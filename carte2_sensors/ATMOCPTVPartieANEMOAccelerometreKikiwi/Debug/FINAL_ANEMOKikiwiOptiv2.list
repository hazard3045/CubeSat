
FINAL_ANEMOKikiwiOptiv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b8  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800a4f8  0800a4f8  0000b4f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab10  0800ab10  0000c1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab10  0800ab10  0000bb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab18  0800ab18  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab18  0800ab18  0000bb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab1c  0800ab1c  0000bb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800ab20  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200001f0  0800ad10  0000c1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800ad10  0000c600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcd1  00000000  00000000  0000c219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002128  00000000  00000000  00017eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0001a018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e8  00000000  00000000  0001abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001710e  00000000  00000000  0001b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d45c  00000000  00000000  000325b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a242  00000000  00000000  0003fa12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9c54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004524  00000000  00000000  000c9c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ce1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a4e0 	.word	0x0800a4e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0800a4e0 	.word	0x0800a4e0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__gesf2>:
 8001014:	f04f 3cff 	mov.w	ip, #4294967295
 8001018:	e006      	b.n	8001028 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__lesf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	e002      	b.n	8001028 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__cmpsf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	f84d cd04 	str.w	ip, [sp, #-4]!
 800102c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001030:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	bf18      	it	ne
 800103a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800103e:	d011      	beq.n	8001064 <__cmpsf2+0x40>
 8001040:	b001      	add	sp, #4
 8001042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001046:	bf18      	it	ne
 8001048:	ea90 0f01 	teqne	r0, r1
 800104c:	bf58      	it	pl
 800104e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001052:	bf88      	it	hi
 8001054:	17c8      	asrhi	r0, r1, #31
 8001056:	bf38      	it	cc
 8001058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800105c:	bf18      	it	ne
 800105e:	f040 0001 	orrne.w	r0, r0, #1
 8001062:	4770      	bx	lr
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	d102      	bne.n	8001070 <__cmpsf2+0x4c>
 800106a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800106e:	d105      	bne.n	800107c <__cmpsf2+0x58>
 8001070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001074:	d1e4      	bne.n	8001040 <__cmpsf2+0x1c>
 8001076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107a:	d0e1      	beq.n	8001040 <__cmpsf2+0x1c>
 800107c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <__aeabi_cfrcmple>:
 8001084:	4684      	mov	ip, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4661      	mov	r1, ip
 800108a:	e7ff      	b.n	800108c <__aeabi_cfcmpeq>

0800108c <__aeabi_cfcmpeq>:
 800108c:	b50f      	push	{r0, r1, r2, r3, lr}
 800108e:	f7ff ffc9 	bl	8001024 <__cmpsf2>
 8001092:	2800      	cmp	r0, #0
 8001094:	bf48      	it	mi
 8001096:	f110 0f00 	cmnmi.w	r0, #0
 800109a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800109c <__aeabi_fcmpeq>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff fff4 	bl	800108c <__aeabi_cfcmpeq>
 80010a4:	bf0c      	ite	eq
 80010a6:	2001      	moveq	r0, #1
 80010a8:	2000      	movne	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_fcmplt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffea 	bl	800108c <__aeabi_cfcmpeq>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmple>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffe0 	bl	800108c <__aeabi_cfcmpeq>
 80010cc:	bf94      	ite	ls
 80010ce:	2001      	movls	r0, #1
 80010d0:	2000      	movhi	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmpge>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffd2 	bl	8001084 <__aeabi_cfrcmple>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpgt>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffc8 	bl	8001084 <__aeabi_cfrcmple>
 80010f4:	bf34      	ite	cc
 80010f6:	2001      	movcc	r0, #1
 80010f8:	2000      	movcs	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_f2iz>:
 8001100:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001104:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001108:	d30f      	bcc.n	800112a <__aeabi_f2iz+0x2a>
 800110a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001112:	d90d      	bls.n	8001130 <__aeabi_f2iz+0x30>
 8001114:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800111c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001120:	fa23 f002 	lsr.w	r0, r3, r2
 8001124:	bf18      	it	ne
 8001126:	4240      	negne	r0, r0
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2iz+0x3a>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d105      	bne.n	8001146 <__aeabi_f2iz+0x46>
 800113a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113e:	bf08      	it	eq
 8001140:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr

0800114c <__aeabi_uldivmod>:
 800114c:	b953      	cbnz	r3, 8001164 <__aeabi_uldivmod+0x18>
 800114e:	b94a      	cbnz	r2, 8001164 <__aeabi_uldivmod+0x18>
 8001150:	2900      	cmp	r1, #0
 8001152:	bf08      	it	eq
 8001154:	2800      	cmpeq	r0, #0
 8001156:	bf1c      	itt	ne
 8001158:	f04f 31ff 	movne.w	r1, #4294967295
 800115c:	f04f 30ff 	movne.w	r0, #4294967295
 8001160:	f000 b968 	b.w	8001434 <__aeabi_idiv0>
 8001164:	f1ad 0c08 	sub.w	ip, sp, #8
 8001168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800116c:	f000 f806 	bl	800117c <__udivmoddi4>
 8001170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <__udivmoddi4>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	9d08      	ldr	r5, [sp, #32]
 8001182:	460c      	mov	r4, r1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d14e      	bne.n	8001226 <__udivmoddi4+0xaa>
 8001188:	4694      	mov	ip, r2
 800118a:	458c      	cmp	ip, r1
 800118c:	4686      	mov	lr, r0
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	d962      	bls.n	800125a <__udivmoddi4+0xde>
 8001194:	b14a      	cbz	r2, 80011aa <__udivmoddi4+0x2e>
 8001196:	f1c2 0320 	rsb	r3, r2, #32
 800119a:	4091      	lsls	r1, r2
 800119c:	fa20 f303 	lsr.w	r3, r0, r3
 80011a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a4:	4319      	orrs	r1, r3
 80011a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80011b2:	fb07 1114 	mls	r1, r7, r4, r1
 80011b6:	fa1f f68c 	uxth.w	r6, ip
 80011ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011c2:	fb04 f106 	mul.w	r1, r4, r6
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d90a      	bls.n	80011e0 <__udivmoddi4+0x64>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80011d2:	f080 8110 	bcs.w	80013f6 <__udivmoddi4+0x27a>
 80011d6:	4299      	cmp	r1, r3
 80011d8:	f240 810d 	bls.w	80013f6 <__udivmoddi4+0x27a>
 80011dc:	3c02      	subs	r4, #2
 80011de:	4463      	add	r3, ip
 80011e0:	1a59      	subs	r1, r3, r1
 80011e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011e6:	fb07 1110 	mls	r1, r7, r0, r1
 80011ea:	fb00 f606 	mul.w	r6, r0, r6
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f6:	429e      	cmp	r6, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x94>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8001202:	f080 80fa 	bcs.w	80013fa <__udivmoddi4+0x27e>
 8001206:	429e      	cmp	r6, r3
 8001208:	f240 80f7 	bls.w	80013fa <__udivmoddi4+0x27e>
 800120c:	4463      	add	r3, ip
 800120e:	3802      	subs	r0, #2
 8001210:	2100      	movs	r1, #0
 8001212:	1b9b      	subs	r3, r3, r6
 8001214:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001218:	b11d      	cbz	r5, 8001222 <__udivmoddi4+0xa6>
 800121a:	40d3      	lsrs	r3, r2
 800121c:	2200      	movs	r2, #0
 800121e:	e9c5 3200 	strd	r3, r2, [r5]
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	428b      	cmp	r3, r1
 8001228:	d905      	bls.n	8001236 <__udivmoddi4+0xba>
 800122a:	b10d      	cbz	r5, 8001230 <__udivmoddi4+0xb4>
 800122c:	e9c5 0100 	strd	r0, r1, [r5]
 8001230:	2100      	movs	r1, #0
 8001232:	4608      	mov	r0, r1
 8001234:	e7f5      	b.n	8001222 <__udivmoddi4+0xa6>
 8001236:	fab3 f183 	clz	r1, r3
 800123a:	2900      	cmp	r1, #0
 800123c:	d146      	bne.n	80012cc <__udivmoddi4+0x150>
 800123e:	42a3      	cmp	r3, r4
 8001240:	d302      	bcc.n	8001248 <__udivmoddi4+0xcc>
 8001242:	4290      	cmp	r0, r2
 8001244:	f0c0 80ee 	bcc.w	8001424 <__udivmoddi4+0x2a8>
 8001248:	1a86      	subs	r6, r0, r2
 800124a:	eb64 0303 	sbc.w	r3, r4, r3
 800124e:	2001      	movs	r0, #1
 8001250:	2d00      	cmp	r5, #0
 8001252:	d0e6      	beq.n	8001222 <__udivmoddi4+0xa6>
 8001254:	e9c5 6300 	strd	r6, r3, [r5]
 8001258:	e7e3      	b.n	8001222 <__udivmoddi4+0xa6>
 800125a:	2a00      	cmp	r2, #0
 800125c:	f040 808f 	bne.w	800137e <__udivmoddi4+0x202>
 8001260:	eba1 040c 	sub.w	r4, r1, ip
 8001264:	2101      	movs	r1, #1
 8001266:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800126a:	fa1f f78c 	uxth.w	r7, ip
 800126e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001272:	fb08 4416 	mls	r4, r8, r6, r4
 8001276:	fb07 f006 	mul.w	r0, r7, r6
 800127a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800127e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001282:	4298      	cmp	r0, r3
 8001284:	d908      	bls.n	8001298 <__udivmoddi4+0x11c>
 8001286:	eb1c 0303 	adds.w	r3, ip, r3
 800128a:	f106 34ff 	add.w	r4, r6, #4294967295
 800128e:	d202      	bcs.n	8001296 <__udivmoddi4+0x11a>
 8001290:	4298      	cmp	r0, r3
 8001292:	f200 80cb 	bhi.w	800142c <__udivmoddi4+0x2b0>
 8001296:	4626      	mov	r6, r4
 8001298:	1a1c      	subs	r4, r3, r0
 800129a:	fbb4 f0f8 	udiv	r0, r4, r8
 800129e:	fb08 4410 	mls	r4, r8, r0, r4
 80012a2:	fb00 f707 	mul.w	r7, r0, r7
 80012a6:	fa1f f38e 	uxth.w	r3, lr
 80012aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ae:	429f      	cmp	r7, r3
 80012b0:	d908      	bls.n	80012c4 <__udivmoddi4+0x148>
 80012b2:	eb1c 0303 	adds.w	r3, ip, r3
 80012b6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012ba:	d202      	bcs.n	80012c2 <__udivmoddi4+0x146>
 80012bc:	429f      	cmp	r7, r3
 80012be:	f200 80ae 	bhi.w	800141e <__udivmoddi4+0x2a2>
 80012c2:	4620      	mov	r0, r4
 80012c4:	1bdb      	subs	r3, r3, r7
 80012c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012ca:	e7a5      	b.n	8001218 <__udivmoddi4+0x9c>
 80012cc:	f1c1 0720 	rsb	r7, r1, #32
 80012d0:	408b      	lsls	r3, r1
 80012d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012da:	fa24 f607 	lsr.w	r6, r4, r7
 80012de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012e2:	fbb6 f8f9 	udiv	r8, r6, r9
 80012e6:	fa1f fe8c 	uxth.w	lr, ip
 80012ea:	fb09 6618 	mls	r6, r9, r8, r6
 80012ee:	fa20 f307 	lsr.w	r3, r0, r7
 80012f2:	408c      	lsls	r4, r1
 80012f4:	fa00 fa01 	lsl.w	sl, r0, r1
 80012f8:	fb08 f00e 	mul.w	r0, r8, lr
 80012fc:	431c      	orrs	r4, r3
 80012fe:	0c23      	lsrs	r3, r4, #16
 8001300:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001304:	4298      	cmp	r0, r3
 8001306:	fa02 f201 	lsl.w	r2, r2, r1
 800130a:	d90a      	bls.n	8001322 <__udivmoddi4+0x1a6>
 800130c:	eb1c 0303 	adds.w	r3, ip, r3
 8001310:	f108 36ff 	add.w	r6, r8, #4294967295
 8001314:	f080 8081 	bcs.w	800141a <__udivmoddi4+0x29e>
 8001318:	4298      	cmp	r0, r3
 800131a:	d97e      	bls.n	800141a <__udivmoddi4+0x29e>
 800131c:	f1a8 0802 	sub.w	r8, r8, #2
 8001320:	4463      	add	r3, ip
 8001322:	1a1e      	subs	r6, r3, r0
 8001324:	fbb6 f3f9 	udiv	r3, r6, r9
 8001328:	fb09 6613 	mls	r6, r9, r3, r6
 800132c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001330:	b2a4      	uxth	r4, r4
 8001332:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001336:	45a6      	cmp	lr, r4
 8001338:	d908      	bls.n	800134c <__udivmoddi4+0x1d0>
 800133a:	eb1c 0404 	adds.w	r4, ip, r4
 800133e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001342:	d266      	bcs.n	8001412 <__udivmoddi4+0x296>
 8001344:	45a6      	cmp	lr, r4
 8001346:	d964      	bls.n	8001412 <__udivmoddi4+0x296>
 8001348:	3b02      	subs	r3, #2
 800134a:	4464      	add	r4, ip
 800134c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001350:	fba0 8302 	umull	r8, r3, r0, r2
 8001354:	eba4 040e 	sub.w	r4, r4, lr
 8001358:	429c      	cmp	r4, r3
 800135a:	46c6      	mov	lr, r8
 800135c:	461e      	mov	r6, r3
 800135e:	d350      	bcc.n	8001402 <__udivmoddi4+0x286>
 8001360:	d04d      	beq.n	80013fe <__udivmoddi4+0x282>
 8001362:	b155      	cbz	r5, 800137a <__udivmoddi4+0x1fe>
 8001364:	ebba 030e 	subs.w	r3, sl, lr
 8001368:	eb64 0406 	sbc.w	r4, r4, r6
 800136c:	fa04 f707 	lsl.w	r7, r4, r7
 8001370:	40cb      	lsrs	r3, r1
 8001372:	431f      	orrs	r7, r3
 8001374:	40cc      	lsrs	r4, r1
 8001376:	e9c5 7400 	strd	r7, r4, [r5]
 800137a:	2100      	movs	r1, #0
 800137c:	e751      	b.n	8001222 <__udivmoddi4+0xa6>
 800137e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001382:	f1c2 0320 	rsb	r3, r2, #32
 8001386:	40d9      	lsrs	r1, r3
 8001388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800138c:	fa20 f303 	lsr.w	r3, r0, r3
 8001390:	fa00 fe02 	lsl.w	lr, r0, r2
 8001394:	fbb1 f0f8 	udiv	r0, r1, r8
 8001398:	fb08 1110 	mls	r1, r8, r0, r1
 800139c:	4094      	lsls	r4, r2
 800139e:	431c      	orrs	r4, r3
 80013a0:	fa1f f78c 	uxth.w	r7, ip
 80013a4:	0c23      	lsrs	r3, r4, #16
 80013a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013aa:	fb00 f107 	mul.w	r1, r0, r7
 80013ae:	4299      	cmp	r1, r3
 80013b0:	d908      	bls.n	80013c4 <__udivmoddi4+0x248>
 80013b2:	eb1c 0303 	adds.w	r3, ip, r3
 80013b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ba:	d22c      	bcs.n	8001416 <__udivmoddi4+0x29a>
 80013bc:	4299      	cmp	r1, r3
 80013be:	d92a      	bls.n	8001416 <__udivmoddi4+0x29a>
 80013c0:	3802      	subs	r0, #2
 80013c2:	4463      	add	r3, ip
 80013c4:	1a5b      	subs	r3, r3, r1
 80013c6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013ca:	fb08 3311 	mls	r3, r8, r1, r3
 80013ce:	b2a4      	uxth	r4, r4
 80013d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013d4:	fb01 f307 	mul.w	r3, r1, r7
 80013d8:	42a3      	cmp	r3, r4
 80013da:	d908      	bls.n	80013ee <__udivmoddi4+0x272>
 80013dc:	eb1c 0404 	adds.w	r4, ip, r4
 80013e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013e4:	d213      	bcs.n	800140e <__udivmoddi4+0x292>
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	d911      	bls.n	800140e <__udivmoddi4+0x292>
 80013ea:	3902      	subs	r1, #2
 80013ec:	4464      	add	r4, ip
 80013ee:	1ae4      	subs	r4, r4, r3
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	e73b      	b.n	800126e <__udivmoddi4+0xf2>
 80013f6:	4604      	mov	r4, r0
 80013f8:	e6f2      	b.n	80011e0 <__udivmoddi4+0x64>
 80013fa:	4608      	mov	r0, r1
 80013fc:	e708      	b.n	8001210 <__udivmoddi4+0x94>
 80013fe:	45c2      	cmp	sl, r8
 8001400:	d2af      	bcs.n	8001362 <__udivmoddi4+0x1e6>
 8001402:	ebb8 0e02 	subs.w	lr, r8, r2
 8001406:	eb63 060c 	sbc.w	r6, r3, ip
 800140a:	3801      	subs	r0, #1
 800140c:	e7a9      	b.n	8001362 <__udivmoddi4+0x1e6>
 800140e:	4631      	mov	r1, r6
 8001410:	e7ed      	b.n	80013ee <__udivmoddi4+0x272>
 8001412:	4603      	mov	r3, r0
 8001414:	e79a      	b.n	800134c <__udivmoddi4+0x1d0>
 8001416:	4630      	mov	r0, r6
 8001418:	e7d4      	b.n	80013c4 <__udivmoddi4+0x248>
 800141a:	46b0      	mov	r8, r6
 800141c:	e781      	b.n	8001322 <__udivmoddi4+0x1a6>
 800141e:	4463      	add	r3, ip
 8001420:	3802      	subs	r0, #2
 8001422:	e74f      	b.n	80012c4 <__udivmoddi4+0x148>
 8001424:	4606      	mov	r6, r0
 8001426:	4623      	mov	r3, r4
 8001428:	4608      	mov	r0, r1
 800142a:	e711      	b.n	8001250 <__udivmoddi4+0xd4>
 800142c:	3e02      	subs	r6, #2
 800142e:	4463      	add	r3, ip
 8001430:	e732      	b.n	8001298 <__udivmoddi4+0x11c>
 8001432:	bf00      	nop

08001434 <__aeabi_idiv0>:
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop

08001438 <BME280_CONFIG_SETUP_ref>:
	signed short dig_T2_N, dig_T3_N, dig_P2_N, dig_P3_N, dig_P4_N, dig_P5_N, dig_P6_N, dig_P7_N, dig_P8_N, dig_P9_N, dig_H2_N, dig_H4_N, dig_H5_N;

	volatile int temperature_raw_ref, pressure_raw_ref, humidity_raw_ref = 0;
	volatile int temperature_raw_N, pressure_raw_N, humidity_raw_N = 0;

	void BME280_CONFIG_SETUP_ref(void){
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2120      	movs	r1, #32
 8001440:	482a      	ldr	r0, [pc, #168]	@ (80014ec <BME280_CONFIG_SETUP_ref+0xb4>)
 8001442:	f003 fc1d 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f003 f984 	bl	8004754 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //SET CS LOW
 800144c:	2200      	movs	r2, #0
 800144e:	2120      	movs	r1, #32
 8001450:	4826      	ldr	r0, [pc, #152]	@ (80014ec <BME280_CONFIG_SETUP_ref+0xb4>)
 8001452:	f003 fc15 	bl	8004c80 <HAL_GPIO_WritePin>
		config_ref[0] = CTRLMEASREG;
 8001456:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <BME280_CONFIG_SETUP_ref+0xb8>)
 8001458:	2274      	movs	r2, #116	@ 0x74
 800145a:	701a      	strb	r2, [r3, #0]
		config_ref[1] = CTRLMEASVAL;
 800145c:	4b24      	ldr	r3, [pc, #144]	@ (80014f0 <BME280_CONFIG_SETUP_ref+0xb8>)
 800145e:	2225      	movs	r2, #37	@ 0x25
 8001460:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(&hspi2, config_ref, 2, 1000); //CONFIG
 8001462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001466:	2202      	movs	r2, #2
 8001468:	4921      	ldr	r1, [pc, #132]	@ (80014f0 <BME280_CONFIG_SETUP_ref+0xb8>)
 800146a:	4822      	ldr	r0, [pc, #136]	@ (80014f4 <BME280_CONFIG_SETUP_ref+0xbc>)
 800146c:	f004 fa5d 	bl	800592a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001470:	2201      	movs	r2, #1
 8001472:	2120      	movs	r1, #32
 8001474:	481d      	ldr	r0, [pc, #116]	@ (80014ec <BME280_CONFIG_SETUP_ref+0xb4>)
 8001476:	f003 fc03 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800147a:	200a      	movs	r0, #10
 800147c:	f003 f96a 	bl	8004754 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //SET CS LOW
 8001480:	2200      	movs	r2, #0
 8001482:	2120      	movs	r1, #32
 8001484:	4819      	ldr	r0, [pc, #100]	@ (80014ec <BME280_CONFIG_SETUP_ref+0xb4>)
 8001486:	f003 fbfb 	bl	8004c80 <HAL_GPIO_WritePin>
		config_ref[0] = CONFIGREG;
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <BME280_CONFIG_SETUP_ref+0xb8>)
 800148c:	2275      	movs	r2, #117	@ 0x75
 800148e:	701a      	strb	r2, [r3, #0]
		config_ref[1] = CONFIGVAL;
 8001490:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <BME280_CONFIG_SETUP_ref+0xb8>)
 8001492:	22a0      	movs	r2, #160	@ 0xa0
 8001494:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(&hspi2, config_ref, 2, 1000); //CONFIG
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	2202      	movs	r2, #2
 800149c:	4914      	ldr	r1, [pc, #80]	@ (80014f0 <BME280_CONFIG_SETUP_ref+0xb8>)
 800149e:	4815      	ldr	r0, [pc, #84]	@ (80014f4 <BME280_CONFIG_SETUP_ref+0xbc>)
 80014a0:	f004 fa43 	bl	800592a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2120      	movs	r1, #32
 80014a8:	4810      	ldr	r0, [pc, #64]	@ (80014ec <BME280_CONFIG_SETUP_ref+0xb4>)
 80014aa:	f003 fbe9 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80014ae:	200a      	movs	r0, #10
 80014b0:	f003 f950 	bl	8004754 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //SET CS LOW
 80014b4:	2200      	movs	r2, #0
 80014b6:	2120      	movs	r1, #32
 80014b8:	480c      	ldr	r0, [pc, #48]	@ (80014ec <BME280_CONFIG_SETUP_ref+0xb4>)
 80014ba:	f003 fbe1 	bl	8004c80 <HAL_GPIO_WritePin>
		config_ref[0] = CTRLHUMREG;
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <BME280_CONFIG_SETUP_ref+0xb8>)
 80014c0:	2272      	movs	r2, #114	@ 0x72
 80014c2:	701a      	strb	r2, [r3, #0]
		config_ref[1] = CTRLHUMVAL;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <BME280_CONFIG_SETUP_ref+0xb8>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(&hspi2, config_ref, 2, 1000); //CONFIG
 80014ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ce:	2202      	movs	r2, #2
 80014d0:	4907      	ldr	r1, [pc, #28]	@ (80014f0 <BME280_CONFIG_SETUP_ref+0xb8>)
 80014d2:	4808      	ldr	r0, [pc, #32]	@ (80014f4 <BME280_CONFIG_SETUP_ref+0xbc>)
 80014d4:	f004 fa29 	bl	800592a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	2120      	movs	r1, #32
 80014dc:	4803      	ldr	r0, [pc, #12]	@ (80014ec <BME280_CONFIG_SETUP_ref+0xb4>)
 80014de:	f003 fbcf 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80014e2:	200a      	movs	r0, #10
 80014e4:	f003 f936 	bl	8004754 <HAL_Delay>
	}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40020000 	.word	0x40020000
 80014f0:	20000214 	.word	0x20000214
 80014f4:	20000300 	.word	0x20000300

080014f8 <BME280_GET_RAW_VALS_ref>:
	void BME280_GET_RAW_VALS_ref(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
		BME280_CONFIG_SETUP_ref();
 80014fc:	f7ff ff9c 	bl	8001438 <BME280_CONFIG_SETUP_ref>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //SET CS LOW
 8001500:	2200      	movs	r2, #0
 8001502:	2120      	movs	r1, #32
 8001504:	481e      	ldr	r0, [pc, #120]	@ (8001580 <BME280_GET_RAW_VALS_ref+0x88>)
 8001506:	f003 fbbb 	bl	8004c80 <HAL_GPIO_WritePin>
		config_ref[0] = RAWREAD;
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <BME280_GET_RAW_VALS_ref+0x8c>)
 800150c:	22f7      	movs	r2, #247	@ 0xf7
 800150e:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, config_ref, 1, 10); //GET ID
 8001510:	230a      	movs	r3, #10
 8001512:	2201      	movs	r2, #1
 8001514:	491b      	ldr	r1, [pc, #108]	@ (8001584 <BME280_GET_RAW_VALS_ref+0x8c>)
 8001516:	481c      	ldr	r0, [pc, #112]	@ (8001588 <BME280_GET_RAW_VALS_ref+0x90>)
 8001518:	f004 fa07 	bl	800592a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tempread_ref, 8, 10);
 800151c:	230a      	movs	r3, #10
 800151e:	2208      	movs	r2, #8
 8001520:	491a      	ldr	r1, [pc, #104]	@ (800158c <BME280_GET_RAW_VALS_ref+0x94>)
 8001522:	4819      	ldr	r0, [pc, #100]	@ (8001588 <BME280_GET_RAW_VALS_ref+0x90>)
 8001524:	f004 fb44 	bl	8005bb0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001528:	2201      	movs	r2, #1
 800152a:	2120      	movs	r1, #32
 800152c:	4814      	ldr	r0, [pc, #80]	@ (8001580 <BME280_GET_RAW_VALS_ref+0x88>)
 800152e:	f003 fba7 	bl	8004c80 <HAL_GPIO_WritePin>

		temperature_raw_ref =(tempread_ref[3]<<12)+(tempread_ref[4]<<4)+(tempread_ref[5]>>4);
 8001532:	4b16      	ldr	r3, [pc, #88]	@ (800158c <BME280_GET_RAW_VALS_ref+0x94>)
 8001534:	78db      	ldrb	r3, [r3, #3]
 8001536:	031a      	lsls	r2, r3, #12
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <BME280_GET_RAW_VALS_ref+0x94>)
 800153a:	791b      	ldrb	r3, [r3, #4]
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	4413      	add	r3, r2
 8001540:	4a12      	ldr	r2, [pc, #72]	@ (800158c <BME280_GET_RAW_VALS_ref+0x94>)
 8001542:	7952      	ldrb	r2, [r2, #5]
 8001544:	0912      	lsrs	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	4413      	add	r3, r2
 800154a:	4a11      	ldr	r2, [pc, #68]	@ (8001590 <BME280_GET_RAW_VALS_ref+0x98>)
 800154c:	6013      	str	r3, [r2, #0]
		pressure_raw_ref = (tempread_ref[0]<<12)+(tempread_ref[1]<<4)+(tempread_ref[2]>>4);
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <BME280_GET_RAW_VALS_ref+0x94>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	031a      	lsls	r2, r3, #12
 8001554:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <BME280_GET_RAW_VALS_ref+0x94>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	4a0b      	ldr	r2, [pc, #44]	@ (800158c <BME280_GET_RAW_VALS_ref+0x94>)
 800155e:	7892      	ldrb	r2, [r2, #2]
 8001560:	0912      	lsrs	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	4413      	add	r3, r2
 8001566:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <BME280_GET_RAW_VALS_ref+0x9c>)
 8001568:	6013      	str	r3, [r2, #0]
		humidity_raw_ref= (tempread_ref[6] << 8) + (tempread_ref[7]);
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <BME280_GET_RAW_VALS_ref+0x94>)
 800156c:	799b      	ldrb	r3, [r3, #6]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	4a06      	ldr	r2, [pc, #24]	@ (800158c <BME280_GET_RAW_VALS_ref+0x94>)
 8001572:	79d2      	ldrb	r2, [r2, #7]
 8001574:	4413      	add	r3, r2
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <BME280_GET_RAW_VALS_ref+0xa0>)
 8001578:	6013      	str	r3, [r2, #0]
	}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40020000 	.word	0x40020000
 8001584:	20000214 	.word	0x20000214
 8001588:	20000300 	.word	0x20000300
 800158c:	2000020c 	.word	0x2000020c
 8001590:	200002c0 	.word	0x200002c0
 8001594:	200002c4 	.word	0x200002c4
 8001598:	200002c8 	.word	0x200002c8

0800159c <BME280_GET_COMP_VALS_ref>:
	void BME280_GET_COMP_VALS_ref(void){
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //SET CS LOW
 80015a0:	2200      	movs	r2, #0
 80015a2:	2120      	movs	r1, #32
 80015a4:	488b      	ldr	r0, [pc, #556]	@ (80017d4 <BME280_GET_COMP_VALS_ref+0x238>)
 80015a6:	f003 fb6b 	bl	8004c80 <HAL_GPIO_WritePin>
		config_ref[0] = COMPTEMPPRES;
 80015aa:	4b8b      	ldr	r3, [pc, #556]	@ (80017d8 <BME280_GET_COMP_VALS_ref+0x23c>)
 80015ac:	2288      	movs	r2, #136	@ 0x88
 80015ae:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, config_ref, 1, 10);
 80015b0:	230a      	movs	r3, #10
 80015b2:	2201      	movs	r2, #1
 80015b4:	4988      	ldr	r1, [pc, #544]	@ (80017d8 <BME280_GET_COMP_VALS_ref+0x23c>)
 80015b6:	4889      	ldr	r0, [pc, #548]	@ (80017dc <BME280_GET_COMP_VALS_ref+0x240>)
 80015b8:	f004 f9b7 	bl	800592a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, comp_ref, 24, 120);
 80015bc:	2378      	movs	r3, #120	@ 0x78
 80015be:	2218      	movs	r2, #24
 80015c0:	4987      	ldr	r1, [pc, #540]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80015c2:	4886      	ldr	r0, [pc, #536]	@ (80017dc <BME280_GET_COMP_VALS_ref+0x240>)
 80015c4:	f004 faf4 	bl	8005bb0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2120      	movs	r1, #32
 80015cc:	4881      	ldr	r0, [pc, #516]	@ (80017d4 <BME280_GET_COMP_VALS_ref+0x238>)
 80015ce:	f003 fb57 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80015d2:	200a      	movs	r0, #10
 80015d4:	f003 f8be 	bl	8004754 <HAL_Delay>

		dig_T1_ref = (comp_ref[0])+(comp_ref[1]<<8);
 80015d8:	4b81      	ldr	r3, [pc, #516]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b80      	ldr	r3, [pc, #512]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80015e0:	785b      	ldrb	r3, [r3, #1]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b7e      	ldr	r3, [pc, #504]	@ (80017e4 <BME280_GET_COMP_VALS_ref+0x248>)
 80015ec:	801a      	strh	r2, [r3, #0]
		dig_T2_ref = (comp_ref[2])+(comp_ref[3]<<8);
 80015ee:	4b7c      	ldr	r3, [pc, #496]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80015f0:	789b      	ldrb	r3, [r3, #2]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b7a      	ldr	r3, [pc, #488]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80015f6:	78db      	ldrb	r3, [r3, #3]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b21a      	sxth	r2, r3
 8001602:	4b79      	ldr	r3, [pc, #484]	@ (80017e8 <BME280_GET_COMP_VALS_ref+0x24c>)
 8001604:	801a      	strh	r2, [r3, #0]
		dig_T3_ref = (comp_ref[4])+(comp_ref[5]<<8);
 8001606:	4b76      	ldr	r3, [pc, #472]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001608:	791b      	ldrb	r3, [r3, #4]
 800160a:	461a      	mov	r2, r3
 800160c:	4b74      	ldr	r3, [pc, #464]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 800160e:	795b      	ldrb	r3, [r3, #5]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b29b      	uxth	r3, r3
 8001614:	4413      	add	r3, r2
 8001616:	b29b      	uxth	r3, r3
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b74      	ldr	r3, [pc, #464]	@ (80017ec <BME280_GET_COMP_VALS_ref+0x250>)
 800161c:	801a      	strh	r2, [r3, #0]
		dig_P1_ref = (comp_ref[6])+(comp_ref[7]<<8);
 800161e:	4b70      	ldr	r3, [pc, #448]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001620:	799b      	ldrb	r3, [r3, #6]
 8001622:	461a      	mov	r2, r3
 8001624:	4b6e      	ldr	r3, [pc, #440]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001626:	79db      	ldrb	r3, [r3, #7]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b29b      	uxth	r3, r3
 800162c:	4413      	add	r3, r2
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b6f      	ldr	r3, [pc, #444]	@ (80017f0 <BME280_GET_COMP_VALS_ref+0x254>)
 8001632:	801a      	strh	r2, [r3, #0]
		dig_P2_ref = (comp_ref[8])+(comp_ref[9]<<8);
 8001634:	4b6a      	ldr	r3, [pc, #424]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001636:	7a1b      	ldrb	r3, [r3, #8]
 8001638:	461a      	mov	r2, r3
 800163a:	4b69      	ldr	r3, [pc, #420]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 800163c:	7a5b      	ldrb	r3, [r3, #9]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b29b      	uxth	r3, r3
 8001642:	4413      	add	r3, r2
 8001644:	b29b      	uxth	r3, r3
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b6a      	ldr	r3, [pc, #424]	@ (80017f4 <BME280_GET_COMP_VALS_ref+0x258>)
 800164a:	801a      	strh	r2, [r3, #0]
		dig_P3_ref = (comp_ref[10])+(comp_ref[11]<<8);
 800164c:	4b64      	ldr	r3, [pc, #400]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 800164e:	7a9b      	ldrb	r3, [r3, #10]
 8001650:	461a      	mov	r2, r3
 8001652:	4b63      	ldr	r3, [pc, #396]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001654:	7adb      	ldrb	r3, [r3, #11]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b29b      	uxth	r3, r3
 800165a:	4413      	add	r3, r2
 800165c:	b29b      	uxth	r3, r3
 800165e:	b21a      	sxth	r2, r3
 8001660:	4b65      	ldr	r3, [pc, #404]	@ (80017f8 <BME280_GET_COMP_VALS_ref+0x25c>)
 8001662:	801a      	strh	r2, [r3, #0]
		dig_P4_ref = (comp_ref[12])+(comp_ref[13]<<8);
 8001664:	4b5e      	ldr	r3, [pc, #376]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001666:	7b1b      	ldrb	r3, [r3, #12]
 8001668:	461a      	mov	r2, r3
 800166a:	4b5d      	ldr	r3, [pc, #372]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 800166c:	7b5b      	ldrb	r3, [r3, #13]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b29b      	uxth	r3, r3
 8001672:	4413      	add	r3, r2
 8001674:	b29b      	uxth	r3, r3
 8001676:	b21a      	sxth	r2, r3
 8001678:	4b60      	ldr	r3, [pc, #384]	@ (80017fc <BME280_GET_COMP_VALS_ref+0x260>)
 800167a:	801a      	strh	r2, [r3, #0]
		dig_P5_ref = (comp_ref[14])+(comp_ref[15]<<8);
 800167c:	4b58      	ldr	r3, [pc, #352]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 800167e:	7b9b      	ldrb	r3, [r3, #14]
 8001680:	461a      	mov	r2, r3
 8001682:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001684:	7bdb      	ldrb	r3, [r3, #15]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	b29b      	uxth	r3, r3
 800168a:	4413      	add	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b5b      	ldr	r3, [pc, #364]	@ (8001800 <BME280_GET_COMP_VALS_ref+0x264>)
 8001692:	801a      	strh	r2, [r3, #0]
		dig_P6_ref = (comp_ref[16])+(comp_ref[17]<<8);
 8001694:	4b52      	ldr	r3, [pc, #328]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001696:	7c1b      	ldrb	r3, [r3, #16]
 8001698:	461a      	mov	r2, r3
 800169a:	4b51      	ldr	r3, [pc, #324]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 800169c:	7c5b      	ldrb	r3, [r3, #17]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	4b56      	ldr	r3, [pc, #344]	@ (8001804 <BME280_GET_COMP_VALS_ref+0x268>)
 80016aa:	801a      	strh	r2, [r3, #0]
		dig_P7_ref = (comp_ref[18])+(comp_ref[19]<<8);
 80016ac:	4b4c      	ldr	r3, [pc, #304]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80016ae:	7c9b      	ldrb	r3, [r3, #18]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b4b      	ldr	r3, [pc, #300]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80016b4:	7cdb      	ldrb	r3, [r3, #19]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	b21a      	sxth	r2, r3
 80016c0:	4b51      	ldr	r3, [pc, #324]	@ (8001808 <BME280_GET_COMP_VALS_ref+0x26c>)
 80016c2:	801a      	strh	r2, [r3, #0]
		dig_P8_ref = (comp_ref[20])+(comp_ref[21]<<8);
 80016c4:	4b46      	ldr	r3, [pc, #280]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80016c6:	7d1b      	ldrb	r3, [r3, #20]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b45      	ldr	r3, [pc, #276]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80016cc:	7d5b      	ldrb	r3, [r3, #21]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b4c      	ldr	r3, [pc, #304]	@ (800180c <BME280_GET_COMP_VALS_ref+0x270>)
 80016da:	801a      	strh	r2, [r3, #0]
		dig_P9_ref = (comp_ref[22])+(comp_ref[23]<<8);
 80016dc:	4b40      	ldr	r3, [pc, #256]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80016de:	7d9b      	ldrb	r3, [r3, #22]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b3f      	ldr	r3, [pc, #252]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80016e4:	7ddb      	ldrb	r3, [r3, #23]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	4b47      	ldr	r3, [pc, #284]	@ (8001810 <BME280_GET_COMP_VALS_ref+0x274>)
 80016f2:	801a      	strh	r2, [r3, #0]

		config_ref[0] = COMPHUMINIT;
 80016f4:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <BME280_GET_COMP_VALS_ref+0x23c>)
 80016f6:	22a0      	movs	r2, #160	@ 0xa0
 80016f8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //SET CS LOW
 80016fa:	2200      	movs	r2, #0
 80016fc:	2120      	movs	r1, #32
 80016fe:	4835      	ldr	r0, [pc, #212]	@ (80017d4 <BME280_GET_COMP_VALS_ref+0x238>)
 8001700:	f003 fabe 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, config_ref, 1, 10);
 8001704:	230a      	movs	r3, #10
 8001706:	2201      	movs	r2, #1
 8001708:	4933      	ldr	r1, [pc, #204]	@ (80017d8 <BME280_GET_COMP_VALS_ref+0x23c>)
 800170a:	4834      	ldr	r0, [pc, #208]	@ (80017dc <BME280_GET_COMP_VALS_ref+0x240>)
 800170c:	f004 f90d 	bl	800592a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &comp_ref[24], 1, 120);
 8001710:	2378      	movs	r3, #120	@ 0x78
 8001712:	2201      	movs	r2, #1
 8001714:	493f      	ldr	r1, [pc, #252]	@ (8001814 <BME280_GET_COMP_VALS_ref+0x278>)
 8001716:	4831      	ldr	r0, [pc, #196]	@ (80017dc <BME280_GET_COMP_VALS_ref+0x240>)
 8001718:	f004 fa4a 	bl	8005bb0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2120      	movs	r1, #32
 8001720:	482c      	ldr	r0, [pc, #176]	@ (80017d4 <BME280_GET_COMP_VALS_ref+0x238>)
 8001722:	f003 faad 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001726:	200a      	movs	r0, #10
 8001728:	f003 f814 	bl	8004754 <HAL_Delay>
		dig_H1_ref = comp_ref[24];
 800172c:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 800172e:	7e1a      	ldrb	r2, [r3, #24]
 8001730:	4b39      	ldr	r3, [pc, #228]	@ (8001818 <BME280_GET_COMP_VALS_ref+0x27c>)
 8001732:	701a      	strb	r2, [r3, #0]

		config_ref[0] = COMPHUMREST;
 8001734:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <BME280_GET_COMP_VALS_ref+0x23c>)
 8001736:	22e1      	movs	r2, #225	@ 0xe1
 8001738:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //SET CS LOW
 800173a:	2200      	movs	r2, #0
 800173c:	2120      	movs	r1, #32
 800173e:	4825      	ldr	r0, [pc, #148]	@ (80017d4 <BME280_GET_COMP_VALS_ref+0x238>)
 8001740:	f003 fa9e 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, config_ref, 1, 10);
 8001744:	230a      	movs	r3, #10
 8001746:	2201      	movs	r2, #1
 8001748:	4923      	ldr	r1, [pc, #140]	@ (80017d8 <BME280_GET_COMP_VALS_ref+0x23c>)
 800174a:	4824      	ldr	r0, [pc, #144]	@ (80017dc <BME280_GET_COMP_VALS_ref+0x240>)
 800174c:	f004 f8ed 	bl	800592a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &comp_ref[25], 7, 120);
 8001750:	2378      	movs	r3, #120	@ 0x78
 8001752:	2207      	movs	r2, #7
 8001754:	4931      	ldr	r1, [pc, #196]	@ (800181c <BME280_GET_COMP_VALS_ref+0x280>)
 8001756:	4821      	ldr	r0, [pc, #132]	@ (80017dc <BME280_GET_COMP_VALS_ref+0x240>)
 8001758:	f004 fa2a 	bl	8005bb0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2120      	movs	r1, #32
 8001760:	481c      	ldr	r0, [pc, #112]	@ (80017d4 <BME280_GET_COMP_VALS_ref+0x238>)
 8001762:	f003 fa8d 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001766:	200a      	movs	r0, #10
 8001768:	f002 fff4 	bl	8004754 <HAL_Delay>
		dig_H2_ref = (comp_ref[25])+(comp_ref[26]<< 8);
 800176c:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 800176e:	7e5b      	ldrb	r3, [r3, #25]
 8001770:	461a      	mov	r2, r3
 8001772:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001774:	7e9b      	ldrb	r3, [r3, #26]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	b29b      	uxth	r3, r3
 800177a:	4413      	add	r3, r2
 800177c:	b29b      	uxth	r3, r3
 800177e:	b21a      	sxth	r2, r3
 8001780:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <BME280_GET_COMP_VALS_ref+0x284>)
 8001782:	801a      	strh	r2, [r3, #0]
		dig_H3_ref = comp_ref[27];
 8001784:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001786:	7eda      	ldrb	r2, [r3, #27]
 8001788:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <BME280_GET_COMP_VALS_ref+0x288>)
 800178a:	701a      	strb	r2, [r3, #0]
		dig_H4_ref = (comp_ref[28] << 4) +(comp_ref[29] & 0xF);
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 800178e:	7f1b      	ldrb	r3, [r3, #28]
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 8001796:	7f5b      	ldrb	r3, [r3, #29]
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	b29b      	uxth	r3, r3
 800179e:	4413      	add	r3, r2
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <BME280_GET_COMP_VALS_ref+0x28c>)
 80017a6:	801a      	strh	r2, [r3, #0]
		dig_H5_ref = (comp_ref[29] & 0xF0) +(comp_ref[30]<< 4);
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80017aa:	7f5b      	ldrb	r3, [r3, #29]
 80017ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80017b4:	7f9b      	ldrb	r3, [r3, #30]
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b29b      	uxth	r3, r3
 80017be:	b21a      	sxth	r2, r3
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <BME280_GET_COMP_VALS_ref+0x290>)
 80017c2:	801a      	strh	r2, [r3, #0]
		dig_H6_ref = comp_ref[31];
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <BME280_GET_COMP_VALS_ref+0x244>)
 80017c6:	7fdb      	ldrb	r3, [r3, #31]
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <BME280_GET_COMP_VALS_ref+0x294>)
 80017cc:	701a      	strb	r2, [r3, #0]
	}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40020000 	.word	0x40020000
 80017d8:	20000214 	.word	0x20000214
 80017dc:	20000300 	.word	0x20000300
 80017e0:	20000218 	.word	0x20000218
 80017e4:	20000280 	.word	0x20000280
 80017e8:	20000284 	.word	0x20000284
 80017ec:	20000286 	.word	0x20000286
 80017f0:	20000282 	.word	0x20000282
 80017f4:	20000288 	.word	0x20000288
 80017f8:	2000028a 	.word	0x2000028a
 80017fc:	2000028c 	.word	0x2000028c
 8001800:	2000028e 	.word	0x2000028e
 8001804:	20000290 	.word	0x20000290
 8001808:	20000292 	.word	0x20000292
 800180c:	20000294 	.word	0x20000294
 8001810:	20000296 	.word	0x20000296
 8001814:	20000230 	.word	0x20000230
 8001818:	2000027c 	.word	0x2000027c
 800181c:	20000231 	.word	0x20000231
 8001820:	20000298 	.word	0x20000298
 8001824:	2000027d 	.word	0x2000027d
 8001828:	2000029a 	.word	0x2000029a
 800182c:	2000029c 	.word	0x2000029c
 8001830:	2000027e 	.word	0x2000027e

08001834 <BME280_CALC_FINAL_VALS_ref>:



	void BME280_CALC_FINAL_VALS_ref(void){
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
		int var1, var2, t_fine;
		var1 = ((((temperature_raw_ref >> 3) - ((int32_t)dig_T1_ref << 1))) * ((int32_t)dig_T2_ref)) >> 11;
 800183a:	4b97      	ldr	r3, [pc, #604]	@ (8001a98 <BME280_CALC_FINAL_VALS_ref+0x264>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	10da      	asrs	r2, r3, #3
 8001840:	4b96      	ldr	r3, [pc, #600]	@ (8001a9c <BME280_CALC_FINAL_VALS_ref+0x268>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	4a95      	ldr	r2, [pc, #596]	@ (8001aa0 <BME280_CALC_FINAL_VALS_ref+0x26c>)
 800184a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	12db      	asrs	r3, r3, #11
 8001854:	60fb      	str	r3, [r7, #12]
		var2 = (((((temperature_raw_ref >> 4) - ((int32_t)dig_T1_ref)) * ((temperature_raw_ref >> 4) - ((int32_t)dig_T1_ref))) >> 12) * ((int32_t)dig_T3_ref)) >> 14;
 8001856:	4b90      	ldr	r3, [pc, #576]	@ (8001a98 <BME280_CALC_FINAL_VALS_ref+0x264>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	111b      	asrs	r3, r3, #4
 800185c:	4a8f      	ldr	r2, [pc, #572]	@ (8001a9c <BME280_CALC_FINAL_VALS_ref+0x268>)
 800185e:	8812      	ldrh	r2, [r2, #0]
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	4a8d      	ldr	r2, [pc, #564]	@ (8001a98 <BME280_CALC_FINAL_VALS_ref+0x264>)
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	1112      	asrs	r2, r2, #4
 8001868:	498c      	ldr	r1, [pc, #560]	@ (8001a9c <BME280_CALC_FINAL_VALS_ref+0x268>)
 800186a:	8809      	ldrh	r1, [r1, #0]
 800186c:	1a52      	subs	r2, r2, r1
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	131b      	asrs	r3, r3, #12
 8001874:	4a8b      	ldr	r2, [pc, #556]	@ (8001aa4 <BME280_CALC_FINAL_VALS_ref+0x270>)
 8001876:	f9b2 2000 	ldrsh.w	r2, [r2]
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	139b      	asrs	r3, r3, #14
 8001880:	60bb      	str	r3, [r7, #8]
		t_fine = var1 + var2;
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4413      	add	r3, r2
 8001888:	607b      	str	r3, [r7, #4]
		finaltemp_ref = (t_fine * 5 + 128) >> 8;
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3380      	adds	r3, #128	@ 0x80
 8001894:	121b      	asrs	r3, r3, #8
 8001896:	4a84      	ldr	r2, [pc, #528]	@ (8001aa8 <BME280_CALC_FINAL_VALS_ref+0x274>)
 8001898:	6013      	str	r3, [r2, #0]

		var1 = (((int)t_fine) >> 1) - 64000;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	105b      	asrs	r3, r3, #1
 800189e:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 80018a2:	60fb      	str	r3, [r7, #12]
		var2 = (((var1 >> 2) * (var1 >> 2)) >> 11 ) * ((int)dig_P6_ref);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	109b      	asrs	r3, r3, #2
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	1092      	asrs	r2, r2, #2
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	12db      	asrs	r3, r3, #11
 80018b2:	4a7e      	ldr	r2, [pc, #504]	@ (8001aac <BME280_CALC_FINAL_VALS_ref+0x278>)
 80018b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	60bb      	str	r3, [r7, #8]
		var2 = var2 + ((var1 * ((int)dig_P5_ref)) << 1);
 80018be:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab0 <BME280_CALC_FINAL_VALS_ref+0x27c>)
 80018c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c4:	461a      	mov	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	4413      	add	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
		var2 = (var2 >> 2) + (((int) dig_P4_ref) << 16);
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	109a      	asrs	r2, r3, #2
 80018d8:	4b76      	ldr	r3, [pc, #472]	@ (8001ab4 <BME280_CALC_FINAL_VALS_ref+0x280>)
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	041b      	lsls	r3, r3, #16
 80018e0:	4413      	add	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
		var1 = (((dig_P3_ref * (((var1 >> 2) * (var1 >> 2)) >> 13 )) >> 3) + ((((int) dig_P2_ref) * var1) >> 1 )) >> 18;
 80018e4:	4b74      	ldr	r3, [pc, #464]	@ (8001ab8 <BME280_CALC_FINAL_VALS_ref+0x284>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	4619      	mov	r1, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	109b      	asrs	r3, r3, #2
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	1092      	asrs	r2, r2, #2
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	135b      	asrs	r3, r3, #13
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	10da      	asrs	r2, r3, #3
 8001900:	4b6e      	ldr	r3, [pc, #440]	@ (8001abc <BME280_CALC_FINAL_VALS_ref+0x288>)
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	4619      	mov	r1, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	105b      	asrs	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	149b      	asrs	r3, r3, #18
 8001914:	60fb      	str	r3, [r7, #12]
		var1 = ((((32768 + var1)) * ((int)dig_P1_ref)) >> 15);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800191c:	4a68      	ldr	r2, [pc, #416]	@ (8001ac0 <BME280_CALC_FINAL_VALS_ref+0x28c>)
 800191e:	8812      	ldrh	r2, [r2, #0]
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	13db      	asrs	r3, r3, #15
 8001926:	60fb      	str	r3, [r7, #12]
		if (var1 == 0)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <BME280_CALC_FINAL_VALS_ref+0x102>
		{
			finalpressure_ref = 0;
 800192e:	4b65      	ldr	r3, [pc, #404]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e04d      	b.n	80019d2 <BME280_CALC_FINAL_VALS_ref+0x19e>
		}
		else{
			finalpressure_ref = (((uint32_t) (((int)1048576)-pressure_raw_ref) - (var2 >> 12))) * 3125;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	131b      	asrs	r3, r3, #12
 800193a:	461a      	mov	r2, r3
 800193c:	4b62      	ldr	r3, [pc, #392]	@ (8001ac8 <BME280_CALC_FINAL_VALS_ref+0x294>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4413      	add	r3, r2
 8001942:	4a62      	ldr	r2, [pc, #392]	@ (8001acc <BME280_CALC_FINAL_VALS_ref+0x298>)
 8001944:	fb02 f303 	mul.w	r3, r2, r3
 8001948:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 800194c:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 8001950:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 8001952:	6013      	str	r3, [r2, #0]
			if (finalpressure_ref < 0x80000000){
 8001954:	4b5b      	ldr	r3, [pc, #364]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db08      	blt.n	800196e <BME280_CALC_FINAL_VALS_ref+0x13a>
				finalpressure_ref = (finalpressure_ref << 1) / (( uint32_t)var1);
 800195c:	4b59      	ldr	r3, [pc, #356]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	005a      	lsls	r2, r3, #1
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	4a56      	ldr	r2, [pc, #344]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	e007      	b.n	800197e <BME280_CALC_FINAL_VALS_ref+0x14a>
			}
			else{
				finalpressure_ref = (finalpressure_ref / (uint32_t)var1) * 2;
 800196e:	4b55      	ldr	r3, [pc, #340]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 800197c:	6013      	str	r3, [r2, #0]
			}
			var1 = (((int)dig_P9_ref) * ((int) ((( finalpressure_ref >> 3) * ( finalpressure_ref >> 3)) >> 13))) >> 12;
 800197e:	4b54      	ldr	r3, [pc, #336]	@ (8001ad0 <BME280_CALC_FINAL_VALS_ref+0x29c>)
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	4619      	mov	r1, r3
 8001986:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	08db      	lsrs	r3, r3, #3
 800198c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	08d2      	lsrs	r2, r2, #3
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	0b5b      	lsrs	r3, r3, #13
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	131b      	asrs	r3, r3, #12
 800199e:	60fb      	str	r3, [r7, #12]
			var2 = (((int) (finalpressure_ref >> 2)) * ((int)dig_P8_ref)) >> 13;
 80019a0:	4b48      	ldr	r3, [pc, #288]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad4 <BME280_CALC_FINAL_VALS_ref+0x2a0>)
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	135b      	asrs	r3, r3, #13
 80019b4:	60bb      	str	r3, [r7, #8]
			finalpressure_ref = ((uint32_t)((int)finalpressure_ref + ((var1 + var2 + dig_P7_ref) >> 4))); //kPA
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a46      	ldr	r2, [pc, #280]	@ (8001ad8 <BME280_CALC_FINAL_VALS_ref+0x2a4>)
 80019be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019c2:	4413      	add	r3, r2
 80019c4:	111b      	asrs	r3, r3, #4
 80019c6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <BME280_CALC_FINAL_VALS_ref+0x290>)
 80019d0:	601a      	str	r2, [r3, #0]
		}

		var1 = (t_fine - ((int) 76800));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80019d8:	60fb      	str	r3, [r7, #12]
		var1 = (((((humidity_raw_ref << 14) - (((int) dig_H4_ref) << 20) - (((int)dig_H5_ref) * var1)) + ((int) 16384)) >> 15) * \
 80019da:	4b40      	ldr	r3, [pc, #256]	@ (8001adc <BME280_CALC_FINAL_VALS_ref+0x2a8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	039a      	lsls	r2, r3, #14
 80019e0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae0 <BME280_CALC_FINAL_VALS_ref+0x2ac>)
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	051b      	lsls	r3, r3, #20
 80019e8:	1ad2      	subs	r2, r2, r3
 80019ea:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae4 <BME280_CALC_FINAL_VALS_ref+0x2b0>)
 80019ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f0:	4619      	mov	r1, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80019fe:	13db      	asrs	r3, r3, #15
		(((((((var1 * ((int) dig_H6_ref)) >> 10) * (((var1 * ((int) dig_H3_ref)) >> 11) + ((int) 32768))) >> 10) + \
 8001a00:	4a39      	ldr	r2, [pc, #228]	@ (8001ae8 <BME280_CALC_FINAL_VALS_ref+0x2b4>)
 8001a02:	f992 2000 	ldrsb.w	r2, [r2]
 8001a06:	4611      	mov	r1, r2
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	fb01 f202 	mul.w	r2, r1, r2
 8001a0e:	1292      	asrs	r2, r2, #10
 8001a10:	4936      	ldr	r1, [pc, #216]	@ (8001aec <BME280_CALC_FINAL_VALS_ref+0x2b8>)
 8001a12:	7809      	ldrb	r1, [r1, #0]
 8001a14:	4608      	mov	r0, r1
 8001a16:	68f9      	ldr	r1, [r7, #12]
 8001a18:	fb00 f101 	mul.w	r1, r0, r1
 8001a1c:	12c9      	asrs	r1, r1, #11
 8001a1e:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001a22:	fb01 f202 	mul.w	r2, r1, r2
 8001a26:	1292      	asrs	r2, r2, #10
 8001a28:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
		((int) 2097152)) * ((int) dig_H2_ref) + 8192) >> 14));
 8001a2c:	4930      	ldr	r1, [pc, #192]	@ (8001af0 <BME280_CALC_FINAL_VALS_ref+0x2bc>)
 8001a2e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a32:	fb01 f202 	mul.w	r2, r1, r2
 8001a36:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001a3a:	1392      	asrs	r2, r2, #14
		var1 = (((((humidity_raw_ref << 14) - (((int) dig_H4_ref) << 20) - (((int)dig_H5_ref) * var1)) + ((int) 16384)) >> 15) * \
 8001a3c:	fb02 f303 	mul.w	r3, r2, r3
 8001a40:	60fb      	str	r3, [r7, #12]

		var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) * ((int)dig_H1_ref)) >> 4));
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	13db      	asrs	r3, r3, #15
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	13d2      	asrs	r2, r2, #15
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	11db      	asrs	r3, r3, #7
 8001a50:	4a28      	ldr	r2, [pc, #160]	@ (8001af4 <BME280_CALC_FINAL_VALS_ref+0x2c0>)
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	111b      	asrs	r3, r3, #4
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	60fb      	str	r3, [r7, #12]
		var1 = (var1 < 0 ? 0 : var1);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a66:	60fb      	str	r3, [r7, #12]
		var1 = (var1 > 419430400 ? 419330400 : var1);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001a6e:	dc01      	bgt.n	8001a74 <BME280_CALC_FINAL_VALS_ref+0x240>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	e000      	b.n	8001a76 <BME280_CALC_FINAL_VALS_ref+0x242>
 8001a74:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <BME280_CALC_FINAL_VALS_ref+0x2c4>)
 8001a76:	60fb      	str	r3, [r7, #12]
		final_humidity_ref = (var1 >> 12)/1024;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	131b      	asrs	r3, r3, #12
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da01      	bge.n	8001a84 <BME280_CALC_FINAL_VALS_ref+0x250>
 8001a80:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8001a84:	129b      	asrs	r3, r3, #10
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <BME280_CALC_FINAL_VALS_ref+0x2c8>)
 8001a8a:	601a      	str	r2, [r3, #0]
	}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200002c0 	.word	0x200002c0
 8001a9c:	20000280 	.word	0x20000280
 8001aa0:	20000284 	.word	0x20000284
 8001aa4:	20000286 	.word	0x20000286
 8001aa8:	20000264 	.word	0x20000264
 8001aac:	20000290 	.word	0x20000290
 8001ab0:	2000028e 	.word	0x2000028e
 8001ab4:	2000028c 	.word	0x2000028c
 8001ab8:	2000028a 	.word	0x2000028a
 8001abc:	20000288 	.word	0x20000288
 8001ac0:	20000282 	.word	0x20000282
 8001ac4:	2000026c 	.word	0x2000026c
 8001ac8:	200002c4 	.word	0x200002c4
 8001acc:	fffff3cb 	.word	0xfffff3cb
 8001ad0:	20000296 	.word	0x20000296
 8001ad4:	20000294 	.word	0x20000294
 8001ad8:	20000292 	.word	0x20000292
 8001adc:	200002c8 	.word	0x200002c8
 8001ae0:	2000029a 	.word	0x2000029a
 8001ae4:	2000029c 	.word	0x2000029c
 8001ae8:	2000027e 	.word	0x2000027e
 8001aec:	2000027d 	.word	0x2000027d
 8001af0:	20000298 	.word	0x20000298
 8001af4:	2000027c 	.word	0x2000027c
 8001af8:	18fe7960 	.word	0x18fe7960
 8001afc:	20000270 	.word	0x20000270

08001b00 <BME280_CONFIG_SETUP_N>:



	void BME280_CONFIG_SETUP_N(void){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2140      	movs	r1, #64	@ 0x40
 8001b08:	482a      	ldr	r0, [pc, #168]	@ (8001bb4 <BME280_CONFIG_SETUP_N+0xb4>)
 8001b0a:	f003 f8b9 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001b0e:	200a      	movs	r0, #10
 8001b10:	f002 fe20 	bl	8004754 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //SET CS LOW
 8001b14:	2200      	movs	r2, #0
 8001b16:	2140      	movs	r1, #64	@ 0x40
 8001b18:	4826      	ldr	r0, [pc, #152]	@ (8001bb4 <BME280_CONFIG_SETUP_N+0xb4>)
 8001b1a:	f003 f8b1 	bl	8004c80 <HAL_GPIO_WritePin>
		config_N[0] = CTRLMEASREG;
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <BME280_CONFIG_SETUP_N+0xb8>)
 8001b20:	2274      	movs	r2, #116	@ 0x74
 8001b22:	701a      	strb	r2, [r3, #0]
		config_N[1] = CTRLMEASVAL;
 8001b24:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <BME280_CONFIG_SETUP_N+0xb8>)
 8001b26:	2225      	movs	r2, #37	@ 0x25
 8001b28:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(&hspi2, config_N, 2, 1000); //CONFIG
 8001b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4921      	ldr	r1, [pc, #132]	@ (8001bb8 <BME280_CONFIG_SETUP_N+0xb8>)
 8001b32:	4822      	ldr	r0, [pc, #136]	@ (8001bbc <BME280_CONFIG_SETUP_N+0xbc>)
 8001b34:	f003 fef9 	bl	800592a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2140      	movs	r1, #64	@ 0x40
 8001b3c:	481d      	ldr	r0, [pc, #116]	@ (8001bb4 <BME280_CONFIG_SETUP_N+0xb4>)
 8001b3e:	f003 f89f 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001b42:	200a      	movs	r0, #10
 8001b44:	f002 fe06 	bl	8004754 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //SET CS LOW
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2140      	movs	r1, #64	@ 0x40
 8001b4c:	4819      	ldr	r0, [pc, #100]	@ (8001bb4 <BME280_CONFIG_SETUP_N+0xb4>)
 8001b4e:	f003 f897 	bl	8004c80 <HAL_GPIO_WritePin>
		config_N[0] = CONFIGREG;
 8001b52:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <BME280_CONFIG_SETUP_N+0xb8>)
 8001b54:	2275      	movs	r2, #117	@ 0x75
 8001b56:	701a      	strb	r2, [r3, #0]
		config_N[1] = CONFIGVAL;
 8001b58:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <BME280_CONFIG_SETUP_N+0xb8>)
 8001b5a:	22a0      	movs	r2, #160	@ 0xa0
 8001b5c:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(&hspi2, config_N, 2, 1000); //CONFIG
 8001b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b62:	2202      	movs	r2, #2
 8001b64:	4914      	ldr	r1, [pc, #80]	@ (8001bb8 <BME280_CONFIG_SETUP_N+0xb8>)
 8001b66:	4815      	ldr	r0, [pc, #84]	@ (8001bbc <BME280_CONFIG_SETUP_N+0xbc>)
 8001b68:	f003 fedf 	bl	800592a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2140      	movs	r1, #64	@ 0x40
 8001b70:	4810      	ldr	r0, [pc, #64]	@ (8001bb4 <BME280_CONFIG_SETUP_N+0xb4>)
 8001b72:	f003 f885 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001b76:	200a      	movs	r0, #10
 8001b78:	f002 fdec 	bl	8004754 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //SET CS LOW
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2140      	movs	r1, #64	@ 0x40
 8001b80:	480c      	ldr	r0, [pc, #48]	@ (8001bb4 <BME280_CONFIG_SETUP_N+0xb4>)
 8001b82:	f003 f87d 	bl	8004c80 <HAL_GPIO_WritePin>
		config_N[0] = CTRLHUMREG;
 8001b86:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <BME280_CONFIG_SETUP_N+0xb8>)
 8001b88:	2272      	movs	r2, #114	@ 0x72
 8001b8a:	701a      	strb	r2, [r3, #0]
		config_N[1] = CTRLHUMVAL;
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb8 <BME280_CONFIG_SETUP_N+0xb8>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(&hspi2, config_N, 2, 1000); //CONFIG
 8001b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b96:	2202      	movs	r2, #2
 8001b98:	4907      	ldr	r1, [pc, #28]	@ (8001bb8 <BME280_CONFIG_SETUP_N+0xb8>)
 8001b9a:	4808      	ldr	r0, [pc, #32]	@ (8001bbc <BME280_CONFIG_SETUP_N+0xbc>)
 8001b9c:	f003 fec5 	bl	800592a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2140      	movs	r1, #64	@ 0x40
 8001ba4:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <BME280_CONFIG_SETUP_N+0xb4>)
 8001ba6:	f003 f86b 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001baa:	200a      	movs	r0, #10
 8001bac:	f002 fdd2 	bl	8004754 <HAL_Delay>
	}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	20000240 	.word	0x20000240
 8001bbc:	20000300 	.word	0x20000300

08001bc0 <BME280_GET_RAW_VALS_N>:
	void BME280_GET_RAW_VALS_N(void){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
		BME280_CONFIG_SETUP_N();
 8001bc4:	f7ff ff9c 	bl	8001b00 <BME280_CONFIG_SETUP_N>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //SET CS LOW
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2140      	movs	r1, #64	@ 0x40
 8001bcc:	481e      	ldr	r0, [pc, #120]	@ (8001c48 <BME280_GET_RAW_VALS_N+0x88>)
 8001bce:	f003 f857 	bl	8004c80 <HAL_GPIO_WritePin>
		config_N[0] = RAWREAD;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <BME280_GET_RAW_VALS_N+0x8c>)
 8001bd4:	22f7      	movs	r2, #247	@ 0xf7
 8001bd6:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, config_N, 1, 10); //GET ID
 8001bd8:	230a      	movs	r3, #10
 8001bda:	2201      	movs	r2, #1
 8001bdc:	491b      	ldr	r1, [pc, #108]	@ (8001c4c <BME280_GET_RAW_VALS_N+0x8c>)
 8001bde:	481c      	ldr	r0, [pc, #112]	@ (8001c50 <BME280_GET_RAW_VALS_N+0x90>)
 8001be0:	f003 fea3 	bl	800592a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tempread_N, 8, 10);
 8001be4:	230a      	movs	r3, #10
 8001be6:	2208      	movs	r2, #8
 8001be8:	491a      	ldr	r1, [pc, #104]	@ (8001c54 <BME280_GET_RAW_VALS_N+0x94>)
 8001bea:	4819      	ldr	r0, [pc, #100]	@ (8001c50 <BME280_GET_RAW_VALS_N+0x90>)
 8001bec:	f003 ffe0 	bl	8005bb0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2140      	movs	r1, #64	@ 0x40
 8001bf4:	4814      	ldr	r0, [pc, #80]	@ (8001c48 <BME280_GET_RAW_VALS_N+0x88>)
 8001bf6:	f003 f843 	bl	8004c80 <HAL_GPIO_WritePin>

		temperature_raw_N =(tempread_N[3]<<12)+(tempread_N[4]<<4)+(tempread_N[5]>>4);
 8001bfa:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <BME280_GET_RAW_VALS_N+0x94>)
 8001bfc:	78db      	ldrb	r3, [r3, #3]
 8001bfe:	031a      	lsls	r2, r3, #12
 8001c00:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <BME280_GET_RAW_VALS_N+0x94>)
 8001c02:	791b      	ldrb	r3, [r3, #4]
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	4413      	add	r3, r2
 8001c08:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <BME280_GET_RAW_VALS_N+0x94>)
 8001c0a:	7952      	ldrb	r2, [r2, #5]
 8001c0c:	0912      	lsrs	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	4413      	add	r3, r2
 8001c12:	4a11      	ldr	r2, [pc, #68]	@ (8001c58 <BME280_GET_RAW_VALS_N+0x98>)
 8001c14:	6013      	str	r3, [r2, #0]
		pressure_raw_N = (tempread_N[0]<<12)+(tempread_N[1]<<4)+(tempread_N[2]>>4);
 8001c16:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <BME280_GET_RAW_VALS_N+0x94>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	031a      	lsls	r2, r3, #12
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <BME280_GET_RAW_VALS_N+0x94>)
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4413      	add	r3, r2
 8001c24:	4a0b      	ldr	r2, [pc, #44]	@ (8001c54 <BME280_GET_RAW_VALS_N+0x94>)
 8001c26:	7892      	ldrb	r2, [r2, #2]
 8001c28:	0912      	lsrs	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <BME280_GET_RAW_VALS_N+0x9c>)
 8001c30:	6013      	str	r3, [r2, #0]
		humidity_raw_N = (tempread_N[6] << 8) + (tempread_N[7]);
 8001c32:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <BME280_GET_RAW_VALS_N+0x94>)
 8001c34:	799b      	ldrb	r3, [r3, #6]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	4a06      	ldr	r2, [pc, #24]	@ (8001c54 <BME280_GET_RAW_VALS_N+0x94>)
 8001c3a:	79d2      	ldrb	r2, [r2, #7]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a08      	ldr	r2, [pc, #32]	@ (8001c60 <BME280_GET_RAW_VALS_N+0xa0>)
 8001c40:	6013      	str	r3, [r2, #0]
	}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	20000240 	.word	0x20000240
 8001c50:	20000300 	.word	0x20000300
 8001c54:	20000238 	.word	0x20000238
 8001c58:	200002cc 	.word	0x200002cc
 8001c5c:	200002d0 	.word	0x200002d0
 8001c60:	200002d4 	.word	0x200002d4

08001c64 <BME280_GET_COMP_VALS_N>:
	void BME280_GET_COMP_VALS_N(void){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //SET CS LOW
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2140      	movs	r1, #64	@ 0x40
 8001c6c:	488b      	ldr	r0, [pc, #556]	@ (8001e9c <BME280_GET_COMP_VALS_N+0x238>)
 8001c6e:	f003 f807 	bl	8004c80 <HAL_GPIO_WritePin>
		config_N[0] = COMPTEMPPRES;
 8001c72:	4b8b      	ldr	r3, [pc, #556]	@ (8001ea0 <BME280_GET_COMP_VALS_N+0x23c>)
 8001c74:	2288      	movs	r2, #136	@ 0x88
 8001c76:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, config_N, 1, 10);
 8001c78:	230a      	movs	r3, #10
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4988      	ldr	r1, [pc, #544]	@ (8001ea0 <BME280_GET_COMP_VALS_N+0x23c>)
 8001c7e:	4889      	ldr	r0, [pc, #548]	@ (8001ea4 <BME280_GET_COMP_VALS_N+0x240>)
 8001c80:	f003 fe53 	bl	800592a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, comp_N, 24, 120);
 8001c84:	2378      	movs	r3, #120	@ 0x78
 8001c86:	2218      	movs	r2, #24
 8001c88:	4987      	ldr	r1, [pc, #540]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001c8a:	4886      	ldr	r0, [pc, #536]	@ (8001ea4 <BME280_GET_COMP_VALS_N+0x240>)
 8001c8c:	f003 ff90 	bl	8005bb0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	2140      	movs	r1, #64	@ 0x40
 8001c94:	4881      	ldr	r0, [pc, #516]	@ (8001e9c <BME280_GET_COMP_VALS_N+0x238>)
 8001c96:	f002 fff3 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001c9a:	200a      	movs	r0, #10
 8001c9c:	f002 fd5a 	bl	8004754 <HAL_Delay>

		dig_T1_N = (comp_N[0])+(comp_N[1]<<8);
 8001ca0:	4b81      	ldr	r3, [pc, #516]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b80      	ldr	r3, [pc, #512]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001ca8:	785b      	ldrb	r3, [r3, #1]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b7e      	ldr	r3, [pc, #504]	@ (8001eac <BME280_GET_COMP_VALS_N+0x248>)
 8001cb4:	801a      	strh	r2, [r3, #0]
		dig_T2_N = (comp_N[2])+(comp_N[3]<<8);
 8001cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001cb8:	789b      	ldrb	r3, [r3, #2]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001cbe:	78db      	ldrb	r3, [r3, #3]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	4b79      	ldr	r3, [pc, #484]	@ (8001eb0 <BME280_GET_COMP_VALS_N+0x24c>)
 8001ccc:	801a      	strh	r2, [r3, #0]
		dig_T3_N = (comp_N[4])+(comp_N[5]<<8);
 8001cce:	4b76      	ldr	r3, [pc, #472]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001cd0:	791b      	ldrb	r3, [r3, #4]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b74      	ldr	r3, [pc, #464]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001cd6:	795b      	ldrb	r3, [r3, #5]
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	4b74      	ldr	r3, [pc, #464]	@ (8001eb4 <BME280_GET_COMP_VALS_N+0x250>)
 8001ce4:	801a      	strh	r2, [r3, #0]
		dig_P1_N = (comp_N[6])+(comp_N[7]<<8);
 8001ce6:	4b70      	ldr	r3, [pc, #448]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001ce8:	799b      	ldrb	r3, [r3, #6]
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b6e      	ldr	r3, [pc, #440]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001cee:	79db      	ldrb	r3, [r3, #7]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb8 <BME280_GET_COMP_VALS_N+0x254>)
 8001cfa:	801a      	strh	r2, [r3, #0]
		dig_P2_N = (comp_N[8])+(comp_N[9]<<8);
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001cfe:	7a1b      	ldrb	r3, [r3, #8]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b69      	ldr	r3, [pc, #420]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d04:	7a5b      	ldrb	r3, [r3, #9]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	4b6a      	ldr	r3, [pc, #424]	@ (8001ebc <BME280_GET_COMP_VALS_N+0x258>)
 8001d12:	801a      	strh	r2, [r3, #0]
		dig_P3_N = (comp_N[10])+(comp_N[11]<<8);
 8001d14:	4b64      	ldr	r3, [pc, #400]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d16:	7a9b      	ldrb	r3, [r3, #10]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d1c:	7adb      	ldrb	r3, [r3, #11]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	4b65      	ldr	r3, [pc, #404]	@ (8001ec0 <BME280_GET_COMP_VALS_N+0x25c>)
 8001d2a:	801a      	strh	r2, [r3, #0]
		dig_P4_N = (comp_N[12])+(comp_N[13]<<8);
 8001d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d2e:	7b1b      	ldrb	r3, [r3, #12]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d34:	7b5b      	ldrb	r3, [r3, #13]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	4b60      	ldr	r3, [pc, #384]	@ (8001ec4 <BME280_GET_COMP_VALS_N+0x260>)
 8001d42:	801a      	strh	r2, [r3, #0]
		dig_P5_N = (comp_N[14])+(comp_N[15]<<8);
 8001d44:	4b58      	ldr	r3, [pc, #352]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d46:	7b9b      	ldrb	r3, [r3, #14]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b57      	ldr	r3, [pc, #348]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d4c:	7bdb      	ldrb	r3, [r3, #15]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec8 <BME280_GET_COMP_VALS_N+0x264>)
 8001d5a:	801a      	strh	r2, [r3, #0]
		dig_P6_N = (comp_N[16])+(comp_N[17]<<8);
 8001d5c:	4b52      	ldr	r3, [pc, #328]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d5e:	7c1b      	ldrb	r3, [r3, #16]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b51      	ldr	r3, [pc, #324]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d64:	7c5b      	ldrb	r3, [r3, #17]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	4b56      	ldr	r3, [pc, #344]	@ (8001ecc <BME280_GET_COMP_VALS_N+0x268>)
 8001d72:	801a      	strh	r2, [r3, #0]
		dig_P7_N = (comp_N[18])+(comp_N[19]<<8);
 8001d74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d76:	7c9b      	ldrb	r3, [r3, #18]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d7c:	7cdb      	ldrb	r3, [r3, #19]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	4b51      	ldr	r3, [pc, #324]	@ (8001ed0 <BME280_GET_COMP_VALS_N+0x26c>)
 8001d8a:	801a      	strh	r2, [r3, #0]
		dig_P8_N = (comp_N[20])+(comp_N[21]<<8);
 8001d8c:	4b46      	ldr	r3, [pc, #280]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d8e:	7d1b      	ldrb	r3, [r3, #20]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b45      	ldr	r3, [pc, #276]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001d94:	7d5b      	ldrb	r3, [r3, #21]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed4 <BME280_GET_COMP_VALS_N+0x270>)
 8001da2:	801a      	strh	r2, [r3, #0]
		dig_P9_N = (comp_N[22])+(comp_N[23]<<8);
 8001da4:	4b40      	ldr	r3, [pc, #256]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001da6:	7d9b      	ldrb	r3, [r3, #22]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001dac:	7ddb      	ldrb	r3, [r3, #23]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	b21a      	sxth	r2, r3
 8001db8:	4b47      	ldr	r3, [pc, #284]	@ (8001ed8 <BME280_GET_COMP_VALS_N+0x274>)
 8001dba:	801a      	strh	r2, [r3, #0]

		config_N[0] = COMPHUMINIT;
 8001dbc:	4b38      	ldr	r3, [pc, #224]	@ (8001ea0 <BME280_GET_COMP_VALS_N+0x23c>)
 8001dbe:	22a0      	movs	r2, #160	@ 0xa0
 8001dc0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //SET CS LOW
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2140      	movs	r1, #64	@ 0x40
 8001dc6:	4835      	ldr	r0, [pc, #212]	@ (8001e9c <BME280_GET_COMP_VALS_N+0x238>)
 8001dc8:	f002 ff5a 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, config_N, 1, 10);
 8001dcc:	230a      	movs	r3, #10
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4933      	ldr	r1, [pc, #204]	@ (8001ea0 <BME280_GET_COMP_VALS_N+0x23c>)
 8001dd2:	4834      	ldr	r0, [pc, #208]	@ (8001ea4 <BME280_GET_COMP_VALS_N+0x240>)
 8001dd4:	f003 fda9 	bl	800592a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &comp_N[24], 1, 120);
 8001dd8:	2378      	movs	r3, #120	@ 0x78
 8001dda:	2201      	movs	r2, #1
 8001ddc:	493f      	ldr	r1, [pc, #252]	@ (8001edc <BME280_GET_COMP_VALS_N+0x278>)
 8001dde:	4831      	ldr	r0, [pc, #196]	@ (8001ea4 <BME280_GET_COMP_VALS_N+0x240>)
 8001de0:	f003 fee6 	bl	8005bb0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001de4:	2201      	movs	r2, #1
 8001de6:	2140      	movs	r1, #64	@ 0x40
 8001de8:	482c      	ldr	r0, [pc, #176]	@ (8001e9c <BME280_GET_COMP_VALS_N+0x238>)
 8001dea:	f002 ff49 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001dee:	200a      	movs	r0, #10
 8001df0:	f002 fcb0 	bl	8004754 <HAL_Delay>
		dig_H1_N = comp_N[24];
 8001df4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001df6:	7e1a      	ldrb	r2, [r3, #24]
 8001df8:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <BME280_GET_COMP_VALS_N+0x27c>)
 8001dfa:	701a      	strb	r2, [r3, #0]

		config_N[0] = COMPHUMREST;
 8001dfc:	4b28      	ldr	r3, [pc, #160]	@ (8001ea0 <BME280_GET_COMP_VALS_N+0x23c>)
 8001dfe:	22e1      	movs	r2, #225	@ 0xe1
 8001e00:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //SET CS LOW
 8001e02:	2200      	movs	r2, #0
 8001e04:	2140      	movs	r1, #64	@ 0x40
 8001e06:	4825      	ldr	r0, [pc, #148]	@ (8001e9c <BME280_GET_COMP_VALS_N+0x238>)
 8001e08:	f002 ff3a 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, config_N, 1, 10);
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4923      	ldr	r1, [pc, #140]	@ (8001ea0 <BME280_GET_COMP_VALS_N+0x23c>)
 8001e12:	4824      	ldr	r0, [pc, #144]	@ (8001ea4 <BME280_GET_COMP_VALS_N+0x240>)
 8001e14:	f003 fd89 	bl	800592a <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, &comp_N[25], 7, 120);
 8001e18:	2378      	movs	r3, #120	@ 0x78
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	4931      	ldr	r1, [pc, #196]	@ (8001ee4 <BME280_GET_COMP_VALS_N+0x280>)
 8001e1e:	4821      	ldr	r0, [pc, #132]	@ (8001ea4 <BME280_GET_COMP_VALS_N+0x240>)
 8001e20:	f003 fec6 	bl	8005bb0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001e24:	2201      	movs	r2, #1
 8001e26:	2140      	movs	r1, #64	@ 0x40
 8001e28:	481c      	ldr	r0, [pc, #112]	@ (8001e9c <BME280_GET_COMP_VALS_N+0x238>)
 8001e2a:	f002 ff29 	bl	8004c80 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001e2e:	200a      	movs	r0, #10
 8001e30:	f002 fc90 	bl	8004754 <HAL_Delay>
		dig_H2_N = (comp_N[25])+(comp_N[26]<< 8);
 8001e34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001e36:	7e5b      	ldrb	r3, [r3, #25]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001e3c:	7e9b      	ldrb	r3, [r3, #26]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <BME280_GET_COMP_VALS_N+0x284>)
 8001e4a:	801a      	strh	r2, [r3, #0]
		dig_H3_N = comp_N[27];
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001e4e:	7eda      	ldrb	r2, [r3, #27]
 8001e50:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <BME280_GET_COMP_VALS_N+0x288>)
 8001e52:	701a      	strb	r2, [r3, #0]
		dig_H4_N = (comp_N[28] << 4) +(comp_N[29] & 0xF);
 8001e54:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001e56:	7f1b      	ldrb	r3, [r3, #28]
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001e5e:	7f5b      	ldrb	r3, [r3, #29]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ef0 <BME280_GET_COMP_VALS_N+0x28c>)
 8001e6e:	801a      	strh	r2, [r3, #0]
		dig_H5_N = (comp_N[29] & 0xF0) +(comp_N[30]<< 4);
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001e72:	7f5b      	ldrb	r3, [r3, #29]
 8001e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001e7c:	7f9b      	ldrb	r3, [r3, #30]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b21a      	sxth	r2, r3
 8001e88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <BME280_GET_COMP_VALS_N+0x290>)
 8001e8a:	801a      	strh	r2, [r3, #0]
		dig_H6_N = comp_N[31];
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <BME280_GET_COMP_VALS_N+0x244>)
 8001e8e:	7fdb      	ldrb	r3, [r3, #31]
 8001e90:	b25a      	sxtb	r2, r3
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <BME280_GET_COMP_VALS_N+0x294>)
 8001e94:	701a      	strb	r2, [r3, #0]
	}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	20000240 	.word	0x20000240
 8001ea4:	20000300 	.word	0x20000300
 8001ea8:	20000244 	.word	0x20000244
 8001eac:	200002a2 	.word	0x200002a2
 8001eb0:	200002a6 	.word	0x200002a6
 8001eb4:	200002a8 	.word	0x200002a8
 8001eb8:	200002a4 	.word	0x200002a4
 8001ebc:	200002aa 	.word	0x200002aa
 8001ec0:	200002ac 	.word	0x200002ac
 8001ec4:	200002ae 	.word	0x200002ae
 8001ec8:	200002b0 	.word	0x200002b0
 8001ecc:	200002b2 	.word	0x200002b2
 8001ed0:	200002b4 	.word	0x200002b4
 8001ed4:	200002b6 	.word	0x200002b6
 8001ed8:	200002b8 	.word	0x200002b8
 8001edc:	2000025c 	.word	0x2000025c
 8001ee0:	2000029e 	.word	0x2000029e
 8001ee4:	2000025d 	.word	0x2000025d
 8001ee8:	200002ba 	.word	0x200002ba
 8001eec:	2000029f 	.word	0x2000029f
 8001ef0:	200002bc 	.word	0x200002bc
 8001ef4:	200002be 	.word	0x200002be
 8001ef8:	200002a0 	.word	0x200002a0

08001efc <BME280_CALC_FINAL_VALS_N>:



	void BME280_CALC_FINAL_VALS_N(void){
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
		int var1, var2, t_fine;
		var1 = ((((temperature_raw_N >> 3) - ((int32_t)dig_T1_N << 1))) * ((int32_t)dig_T2_N)) >> 11;
 8001f02:	4b97      	ldr	r3, [pc, #604]	@ (8002160 <BME280_CALC_FINAL_VALS_N+0x264>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	10da      	asrs	r2, r3, #3
 8001f08:	4b96      	ldr	r3, [pc, #600]	@ (8002164 <BME280_CALC_FINAL_VALS_N+0x268>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	4a95      	ldr	r2, [pc, #596]	@ (8002168 <BME280_CALC_FINAL_VALS_N+0x26c>)
 8001f12:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	12db      	asrs	r3, r3, #11
 8001f1c:	60fb      	str	r3, [r7, #12]
		var2 = (((((temperature_raw_N >> 4) - ((int32_t)dig_T1_N)) * ((temperature_raw_N >> 4) - ((int32_t)dig_T1_N))) >> 12) * ((int32_t)dig_T3_N)) >> 14;
 8001f1e:	4b90      	ldr	r3, [pc, #576]	@ (8002160 <BME280_CALC_FINAL_VALS_N+0x264>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	111b      	asrs	r3, r3, #4
 8001f24:	4a8f      	ldr	r2, [pc, #572]	@ (8002164 <BME280_CALC_FINAL_VALS_N+0x268>)
 8001f26:	8812      	ldrh	r2, [r2, #0]
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	4a8d      	ldr	r2, [pc, #564]	@ (8002160 <BME280_CALC_FINAL_VALS_N+0x264>)
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	1112      	asrs	r2, r2, #4
 8001f30:	498c      	ldr	r1, [pc, #560]	@ (8002164 <BME280_CALC_FINAL_VALS_N+0x268>)
 8001f32:	8809      	ldrh	r1, [r1, #0]
 8001f34:	1a52      	subs	r2, r2, r1
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	131b      	asrs	r3, r3, #12
 8001f3c:	4a8b      	ldr	r2, [pc, #556]	@ (800216c <BME280_CALC_FINAL_VALS_N+0x270>)
 8001f3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	139b      	asrs	r3, r3, #14
 8001f48:	60bb      	str	r3, [r7, #8]
		t_fine = var1 + var2;
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4413      	add	r3, r2
 8001f50:	607b      	str	r3, [r7, #4]
		finaltemp_N = (t_fine * 5 + 128) >> 8;
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	3380      	adds	r3, #128	@ 0x80
 8001f5c:	121b      	asrs	r3, r3, #8
 8001f5e:	4a84      	ldr	r2, [pc, #528]	@ (8002170 <BME280_CALC_FINAL_VALS_N+0x274>)
 8001f60:	6013      	str	r3, [r2, #0]

		var1 = (((int)t_fine) >> 1) - 64000;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	105b      	asrs	r3, r3, #1
 8001f66:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001f6a:	60fb      	str	r3, [r7, #12]
		var2 = (((var1 >> 2) * (var1 >> 2)) >> 11 ) * ((int)dig_P6_N);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	109b      	asrs	r3, r3, #2
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	1092      	asrs	r2, r2, #2
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	12db      	asrs	r3, r3, #11
 8001f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002174 <BME280_CALC_FINAL_VALS_N+0x278>)
 8001f7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	60bb      	str	r3, [r7, #8]
		var2 = var2 + ((var1 * ((int)dig_P5_N)) << 1);
 8001f86:	4b7c      	ldr	r3, [pc, #496]	@ (8002178 <BME280_CALC_FINAL_VALS_N+0x27c>)
 8001f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	4413      	add	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
		var2 = (var2 >> 2) + (((int) dig_P4_N) << 16);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	109a      	asrs	r2, r3, #2
 8001fa0:	4b76      	ldr	r3, [pc, #472]	@ (800217c <BME280_CALC_FINAL_VALS_N+0x280>)
 8001fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	4413      	add	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
		var1 = (((dig_P3_N * (((var1 >> 2) * (var1 >> 2)) >> 13 )) >> 3) + ((((int) dig_P2_N) * var1) >> 1 )) >> 18;
 8001fac:	4b74      	ldr	r3, [pc, #464]	@ (8002180 <BME280_CALC_FINAL_VALS_N+0x284>)
 8001fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	109b      	asrs	r3, r3, #2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	1092      	asrs	r2, r2, #2
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	135b      	asrs	r3, r3, #13
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	10da      	asrs	r2, r3, #3
 8001fc8:	4b6e      	ldr	r3, [pc, #440]	@ (8002184 <BME280_CALC_FINAL_VALS_N+0x288>)
 8001fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	105b      	asrs	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	149b      	asrs	r3, r3, #18
 8001fdc:	60fb      	str	r3, [r7, #12]
		var1 = ((((32768 + var1)) * ((int)dig_P1_N)) >> 15);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001fe4:	4a68      	ldr	r2, [pc, #416]	@ (8002188 <BME280_CALC_FINAL_VALS_N+0x28c>)
 8001fe6:	8812      	ldrh	r2, [r2, #0]
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	13db      	asrs	r3, r3, #15
 8001fee:	60fb      	str	r3, [r7, #12]
		if (var1 == 0)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <BME280_CALC_FINAL_VALS_N+0x102>
		{
			finalpressure_N = 0;
 8001ff6:	4b65      	ldr	r3, [pc, #404]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e04d      	b.n	800209a <BME280_CALC_FINAL_VALS_N+0x19e>
		}
		else{
			finalpressure_N = (((uint32_t) (((int)1048576)-pressure_raw_N) - (var2 >> 12))) * 3125;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	131b      	asrs	r3, r3, #12
 8002002:	461a      	mov	r2, r3
 8002004:	4b62      	ldr	r3, [pc, #392]	@ (8002190 <BME280_CALC_FINAL_VALS_N+0x294>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4413      	add	r3, r2
 800200a:	4a62      	ldr	r2, [pc, #392]	@ (8002194 <BME280_CALC_FINAL_VALS_N+0x298>)
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8002014:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 8002018:	4a5c      	ldr	r2, [pc, #368]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 800201a:	6013      	str	r3, [r2, #0]
			if (finalpressure_N < 0x80000000){
 800201c:	4b5b      	ldr	r3, [pc, #364]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db08      	blt.n	8002036 <BME280_CALC_FINAL_VALS_N+0x13a>
				finalpressure_N = (finalpressure_N << 1) / (( uint32_t)var1);
 8002024:	4b59      	ldr	r3, [pc, #356]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	005a      	lsls	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	4a56      	ldr	r2, [pc, #344]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e007      	b.n	8002046 <BME280_CALC_FINAL_VALS_N+0x14a>
			}
			else{
				finalpressure_N = (finalpressure_N / (uint32_t)var1) * 2;
 8002036:	4b55      	ldr	r3, [pc, #340]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4a52      	ldr	r2, [pc, #328]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 8002044:	6013      	str	r3, [r2, #0]
			}
			var1 = (((int)dig_P9_N) * ((int) ((( finalpressure_N >> 3) * ( finalpressure_N >> 3)) >> 13))) >> 12;
 8002046:	4b54      	ldr	r3, [pc, #336]	@ (8002198 <BME280_CALC_FINAL_VALS_N+0x29c>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204c:	4619      	mov	r1, r3
 800204e:	4b4f      	ldr	r3, [pc, #316]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	08db      	lsrs	r3, r3, #3
 8002054:	4a4d      	ldr	r2, [pc, #308]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	08d2      	lsrs	r2, r2, #3
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	0b5b      	lsrs	r3, r3, #13
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	131b      	asrs	r3, r3, #12
 8002066:	60fb      	str	r3, [r7, #12]
			var2 = (((int) (finalpressure_N >> 2)) * ((int)dig_P8_N)) >> 13;
 8002068:	4b48      	ldr	r3, [pc, #288]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	461a      	mov	r2, r3
 8002070:	4b4a      	ldr	r3, [pc, #296]	@ (800219c <BME280_CALC_FINAL_VALS_N+0x2a0>)
 8002072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	135b      	asrs	r3, r3, #13
 800207c:	60bb      	str	r3, [r7, #8]
			finalpressure_N = ((uint32_t)((int)finalpressure_N + ((var1 + var2 + dig_P7_N) >> 4))); //kPA
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4413      	add	r3, r2
 8002084:	4a46      	ldr	r2, [pc, #280]	@ (80021a0 <BME280_CALC_FINAL_VALS_N+0x2a4>)
 8002086:	f9b2 2000 	ldrsh.w	r2, [r2]
 800208a:	4413      	add	r3, r2
 800208c:	111b      	asrs	r3, r3, #4
 800208e:	4a3f      	ldr	r2, [pc, #252]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	4413      	add	r3, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4b3d      	ldr	r3, [pc, #244]	@ (800218c <BME280_CALC_FINAL_VALS_N+0x290>)
 8002098:	601a      	str	r2, [r3, #0]
		}

		var1 = (t_fine - ((int) 76800));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80020a0:	60fb      	str	r3, [r7, #12]
		var1 = (((((humidity_raw_N << 14) - (((int) dig_H4_N) << 20) - (((int)dig_H5_N) * var1)) + ((int) 16384)) >> 15) * \
 80020a2:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <BME280_CALC_FINAL_VALS_N+0x2a8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	039a      	lsls	r2, r3, #14
 80020a8:	4b3f      	ldr	r3, [pc, #252]	@ (80021a8 <BME280_CALC_FINAL_VALS_N+0x2ac>)
 80020aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ae:	051b      	lsls	r3, r3, #20
 80020b0:	1ad2      	subs	r2, r2, r3
 80020b2:	4b3e      	ldr	r3, [pc, #248]	@ (80021ac <BME280_CALC_FINAL_VALS_N+0x2b0>)
 80020b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b8:	4619      	mov	r1, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80020c6:	13db      	asrs	r3, r3, #15
		(((((((var1 * ((int) dig_H6_N)) >> 10) * (((var1 * ((int) dig_H3_N)) >> 11) + ((int) 32768))) >> 10) + \
 80020c8:	4a39      	ldr	r2, [pc, #228]	@ (80021b0 <BME280_CALC_FINAL_VALS_N+0x2b4>)
 80020ca:	f992 2000 	ldrsb.w	r2, [r2]
 80020ce:	4611      	mov	r1, r2
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	fb01 f202 	mul.w	r2, r1, r2
 80020d6:	1292      	asrs	r2, r2, #10
 80020d8:	4936      	ldr	r1, [pc, #216]	@ (80021b4 <BME280_CALC_FINAL_VALS_N+0x2b8>)
 80020da:	7809      	ldrb	r1, [r1, #0]
 80020dc:	4608      	mov	r0, r1
 80020de:	68f9      	ldr	r1, [r7, #12]
 80020e0:	fb00 f101 	mul.w	r1, r0, r1
 80020e4:	12c9      	asrs	r1, r1, #11
 80020e6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 80020ea:	fb01 f202 	mul.w	r2, r1, r2
 80020ee:	1292      	asrs	r2, r2, #10
 80020f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
		((int) 2097152)) * ((int) dig_H2_N) + 8192) >> 14));
 80020f4:	4930      	ldr	r1, [pc, #192]	@ (80021b8 <BME280_CALC_FINAL_VALS_N+0x2bc>)
 80020f6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80020fa:	fb01 f202 	mul.w	r2, r1, r2
 80020fe:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002102:	1392      	asrs	r2, r2, #14
		var1 = (((((humidity_raw_N << 14) - (((int) dig_H4_N) << 20) - (((int)dig_H5_N) * var1)) + ((int) 16384)) >> 15) * \
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	60fb      	str	r3, [r7, #12]

		var1 = (var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) * ((int)dig_H1_N)) >> 4));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	13db      	asrs	r3, r3, #15
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	13d2      	asrs	r2, r2, #15
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	11db      	asrs	r3, r3, #7
 8002118:	4a28      	ldr	r2, [pc, #160]	@ (80021bc <BME280_CALC_FINAL_VALS_N+0x2c0>)
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	fb02 f303 	mul.w	r3, r2, r3
 8002120:	111b      	asrs	r3, r3, #4
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
		var1 = (var1 < 0 ? 0 : var1);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800212e:	60fb      	str	r3, [r7, #12]
		var1 = (var1 > 419430400 ? 419330400 : var1);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002136:	dc01      	bgt.n	800213c <BME280_CALC_FINAL_VALS_N+0x240>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	e000      	b.n	800213e <BME280_CALC_FINAL_VALS_N+0x242>
 800213c:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <BME280_CALC_FINAL_VALS_N+0x2c4>)
 800213e:	60fb      	str	r3, [r7, #12]
		final_humidity_N = (var1 >> 12)/1024;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	131b      	asrs	r3, r3, #12
 8002144:	2b00      	cmp	r3, #0
 8002146:	da01      	bge.n	800214c <BME280_CALC_FINAL_VALS_N+0x250>
 8002148:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800214c:	129b      	asrs	r3, r3, #10
 800214e:	461a      	mov	r2, r3
 8002150:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <BME280_CALC_FINAL_VALS_N+0x2c8>)
 8002152:	601a      	str	r2, [r3, #0]
	}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	200002cc 	.word	0x200002cc
 8002164:	200002a2 	.word	0x200002a2
 8002168:	200002a6 	.word	0x200002a6
 800216c:	200002a8 	.word	0x200002a8
 8002170:	20000268 	.word	0x20000268
 8002174:	200002b2 	.word	0x200002b2
 8002178:	200002b0 	.word	0x200002b0
 800217c:	200002ae 	.word	0x200002ae
 8002180:	200002ac 	.word	0x200002ac
 8002184:	200002aa 	.word	0x200002aa
 8002188:	200002a4 	.word	0x200002a4
 800218c:	20000274 	.word	0x20000274
 8002190:	200002d0 	.word	0x200002d0
 8002194:	fffff3cb 	.word	0xfffff3cb
 8002198:	200002b8 	.word	0x200002b8
 800219c:	200002b6 	.word	0x200002b6
 80021a0:	200002b4 	.word	0x200002b4
 80021a4:	200002d4 	.word	0x200002d4
 80021a8:	200002bc 	.word	0x200002bc
 80021ac:	200002be 	.word	0x200002be
 80021b0:	200002a0 	.word	0x200002a0
 80021b4:	2000029f 	.word	0x2000029f
 80021b8:	200002ba 	.word	0x200002ba
 80021bc:	2000029e 	.word	0x2000029e
 80021c0:	18fe7960 	.word	0x18fe7960
 80021c4:	20000278 	.word	0x20000278

080021c8 <ms5611_init_E>:
	altitude = (1 - pow(r,c))*44330.77;
}

// EAST Functions
static void ms5611_init_E()
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    EAST_EN;
 80021cc:	2200      	movs	r2, #0
 80021ce:	2180      	movs	r1, #128	@ 0x80
 80021d0:	481e      	ldr	r0, [pc, #120]	@ (800224c <ms5611_init_E+0x84>)
 80021d2:	f002 fd55 	bl	8004c80 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80021d6:	200a      	movs	r0, #10
 80021d8:	f002 fabc 	bl	8004754 <HAL_Delay>

    ms5611_write_E(CMD_RESET);
 80021dc:	201e      	movs	r0, #30
 80021de:	f000 f839 	bl	8002254 <ms5611_write_E>
    HAL_Delay(15);
 80021e2:	200f      	movs	r0, #15
 80021e4:	f002 fab6 	bl	8004754 <HAL_Delay>

    prom_E[0] = ms5611_read16bits_E(CMD_PROM_C1);
 80021e8:	20a2      	movs	r0, #162	@ 0xa2
 80021ea:	f000 f853 	bl	8002294 <ms5611_read16bits_E>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <ms5611_init_E+0x88>)
 80021f4:	801a      	strh	r2, [r3, #0]
    prom_E[1] = ms5611_read16bits_E(CMD_PROM_C2);
 80021f6:	20a4      	movs	r0, #164	@ 0xa4
 80021f8:	f000 f84c 	bl	8002294 <ms5611_read16bits_E>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <ms5611_init_E+0x88>)
 8002202:	805a      	strh	r2, [r3, #2]
    prom_E[2] = ms5611_read16bits_E(CMD_PROM_C3);
 8002204:	20a6      	movs	r0, #166	@ 0xa6
 8002206:	f000 f845 	bl	8002294 <ms5611_read16bits_E>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <ms5611_init_E+0x88>)
 8002210:	809a      	strh	r2, [r3, #4]
    prom_E[3] = ms5611_read16bits_E(CMD_PROM_C4);
 8002212:	20a8      	movs	r0, #168	@ 0xa8
 8002214:	f000 f83e 	bl	8002294 <ms5611_read16bits_E>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <ms5611_init_E+0x88>)
 800221e:	80da      	strh	r2, [r3, #6]
    prom_E[4] = ms5611_read16bits_E(CMD_PROM_C5);
 8002220:	20aa      	movs	r0, #170	@ 0xaa
 8002222:	f000 f837 	bl	8002294 <ms5611_read16bits_E>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <ms5611_init_E+0x88>)
 800222c:	811a      	strh	r2, [r3, #8]
    prom_E[5] = ms5611_read16bits_E(CMD_PROM_C6);
 800222e:	20ac      	movs	r0, #172	@ 0xac
 8002230:	f000 f830 	bl	8002294 <ms5611_read16bits_E>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <ms5611_init_E+0x88>)
 800223a:	815a      	strh	r2, [r3, #10]
    EAST_DIS;
 800223c:	2201      	movs	r2, #1
 800223e:	2180      	movs	r1, #128	@ 0x80
 8002240:	4802      	ldr	r0, [pc, #8]	@ (800224c <ms5611_init_E+0x84>)
 8002242:	f002 fd1d 	bl	8004c80 <HAL_GPIO_WritePin>
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40020000 	.word	0x40020000
 8002250:	200002d8 	.word	0x200002d8

08002254 <ms5611_write_E>:

static void ms5611_write_E(uint8_t data)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    EAST_EN;
 800225e:	2200      	movs	r2, #0
 8002260:	2180      	movs	r1, #128	@ 0x80
 8002262:	480a      	ldr	r0, [pc, #40]	@ (800228c <ms5611_write_E+0x38>)
 8002264:	f002 fd0c 	bl	8004c80 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8002268:	1df9      	adds	r1, r7, #7
 800226a:	2332      	movs	r3, #50	@ 0x32
 800226c:	2201      	movs	r2, #1
 800226e:	4808      	ldr	r0, [pc, #32]	@ (8002290 <ms5611_write_E+0x3c>)
 8002270:	f003 fb5b 	bl	800592a <HAL_SPI_Transmit>
 8002274:	4603      	mov	r3, r0
 8002276:	73fb      	strb	r3, [r7, #15]
    EAST_DIS;
 8002278:	2201      	movs	r2, #1
 800227a:	2180      	movs	r1, #128	@ 0x80
 800227c:	4803      	ldr	r0, [pc, #12]	@ (800228c <ms5611_write_E+0x38>)
 800227e:	f002 fcff 	bl	8004c80 <HAL_GPIO_WritePin>
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40020000 	.word	0x40020000
 8002290:	20000300 	.word	0x20000300

08002294 <ms5611_read16bits_E>:

static uint16_t ms5611_read16bits_E(uint8_t reg)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af02      	add	r7, sp, #8
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
    uint8_t byte[3];
    uint16_t return_value;
    EAST_EN;
 800229e:	2200      	movs	r2, #0
 80022a0:	2180      	movs	r1, #128	@ 0x80
 80022a2:	480f      	ldr	r0, [pc, #60]	@ (80022e0 <ms5611_read16bits_E+0x4c>)
 80022a4:	f002 fcec 	bl	8004c80 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, &reg, byte, 3, SPI_TIMEOUT);
 80022a8:	f107 0208 	add.w	r2, r7, #8
 80022ac:	1df9      	adds	r1, r7, #7
 80022ae:	2332      	movs	r3, #50	@ 0x32
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2303      	movs	r3, #3
 80022b4:	480b      	ldr	r0, [pc, #44]	@ (80022e4 <ms5611_read16bits_E+0x50>)
 80022b6:	f003 fd93 	bl	8005de0 <HAL_SPI_TransmitReceive>
    EAST_DIS;
 80022ba:	2201      	movs	r2, #1
 80022bc:	2180      	movs	r1, #128	@ 0x80
 80022be:	4808      	ldr	r0, [pc, #32]	@ (80022e0 <ms5611_read16bits_E+0x4c>)
 80022c0:	f002 fcde 	bl	8004c80 <HAL_GPIO_WritePin>

    return_value = ((uint16_t)byte[1] << 8) | (byte[2]);
 80022c4:	7a7b      	ldrb	r3, [r7, #9]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	7abb      	ldrb	r3, [r7, #10]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	81fb      	strh	r3, [r7, #14]
    return return_value;
 80022d4:	89fb      	ldrh	r3, [r7, #14]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40020000 	.word	0x40020000
 80022e4:	20000300 	.word	0x20000300

080022e8 <ms5611_read24bits_E>:

static uint32_t ms5611_read24bits_E(uint8_t reg)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
    uint8_t byte[4];
    uint32_t return_value;
    EAST_EN;
 80022f2:	2200      	movs	r2, #0
 80022f4:	2180      	movs	r1, #128	@ 0x80
 80022f6:	480f      	ldr	r0, [pc, #60]	@ (8002334 <ms5611_read24bits_E+0x4c>)
 80022f8:	f002 fcc2 	bl	8004c80 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, &reg, byte, 4, SPI_TIMEOUT);
 80022fc:	f107 0208 	add.w	r2, r7, #8
 8002300:	1df9      	adds	r1, r7, #7
 8002302:	2332      	movs	r3, #50	@ 0x32
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2304      	movs	r3, #4
 8002308:	480b      	ldr	r0, [pc, #44]	@ (8002338 <ms5611_read24bits_E+0x50>)
 800230a:	f003 fd69 	bl	8005de0 <HAL_SPI_TransmitReceive>
    EAST_DIS;
 800230e:	2201      	movs	r2, #1
 8002310:	2180      	movs	r1, #128	@ 0x80
 8002312:	4808      	ldr	r0, [pc, #32]	@ (8002334 <ms5611_read24bits_E+0x4c>)
 8002314:	f002 fcb4 	bl	8004c80 <HAL_GPIO_WritePin>

    return_value = ((uint32_t)byte[1] << 16) | ((uint32_t)(byte[2] << 8)) | (byte[3]);
 8002318:	7a7b      	ldrb	r3, [r7, #9]
 800231a:	041a      	lsls	r2, r3, #16
 800231c:	7abb      	ldrb	r3, [r7, #10]
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	4313      	orrs	r3, r2
 8002322:	7afa      	ldrb	r2, [r7, #11]
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
    return return_value;
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40020000 	.word	0x40020000
 8002338:	20000300 	.word	0x20000300

0800233c <ms5611_readRawTemp_E>:

static uint32_t ms5611_readRawTemp_E()
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
    uint32_t D2;
    ms5611_write_E(tempAddr);
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <ms5611_readRawTemp_E+0x2c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff84 	bl	8002254 <ms5611_write_E>
    HAL_Delay(convDelay);
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <ms5611_readRawTemp_E+0x30>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f002 f9ff 	bl	8004754 <HAL_Delay>
    D2 = ms5611_read24bits_E(0x00);
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff ffc6 	bl	80022e8 <ms5611_read24bits_E>
 800235c:	6078      	str	r0, [r7, #4]

    return D2;
 800235e:	687b      	ldr	r3, [r7, #4]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000001 	.word	0x20000001
 800236c:	20000004 	.word	0x20000004

08002370 <ms5611_readRawPressure_E>:

static uint32_t ms5611_readRawPressure_E()
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
    uint32_t D1;
    ms5611_write_E(pressAddr);
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <ms5611_readRawPressure_E+0x2c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff6a 	bl	8002254 <ms5611_write_E>
    HAL_Delay(convDelay);
 8002380:	4b07      	ldr	r3, [pc, #28]	@ (80023a0 <ms5611_readRawPressure_E+0x30>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f002 f9e5 	bl	8004754 <HAL_Delay>
    D1 = ms5611_read24bits_E(0x00);
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff ffac 	bl	80022e8 <ms5611_read24bits_E>
 8002390:	6078      	str	r0, [r7, #4]

    return D1;
 8002392:	687b      	ldr	r3, [r7, #4]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000000 	.word	0x20000000
 80023a0:	20000004 	.word	0x20000004
 80023a4:	00000000 	.word	0x00000000

080023a8 <Barometer_calculate_E>:
void Barometer_calculate_E()
{
 80023a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ac:	b0d4      	sub	sp, #336	@ 0x150
 80023ae:	af00      	add	r7, sp, #0
	int32_t dT;
	int64_t TEMP, OFF, SENS, P;
	uint32_t D1, D2;
	float press, r, c;

	D1 = ms5611_readRawPressure_E();
 80023b0:	f7ff ffde 	bl	8002370 <ms5611_readRawPressure_E>
 80023b4:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
	D2 = ms5611_readRawTemp_E();
 80023b8:	f7ff ffc0 	bl	800233c <ms5611_readRawTemp_E>
 80023bc:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

	dT = D2-((long)prom_E[4]*256);
 80023c0:	4b74      	ldr	r3, [pc, #464]	@ (8002594 <Barometer_calculate_E+0x1ec>)
 80023c2:	891b      	ldrh	r3, [r3, #8]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	461a      	mov	r2, r3
 80023c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	TEMP = 2000 + ((int64_t)dT * prom_E[5])/8388608;
 80023d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023d6:	17da      	asrs	r2, r3, #31
 80023d8:	469a      	mov	sl, r3
 80023da:	4693      	mov	fp, r2
 80023dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002594 <Barometer_calculate_E+0x1ec>)
 80023de:	895b      	ldrh	r3, [r3, #10]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2200      	movs	r2, #0
 80023e4:	461c      	mov	r4, r3
 80023e6:	4615      	mov	r5, r2
 80023e8:	fb04 f20b 	mul.w	r2, r4, fp
 80023ec:	fb0a f305 	mul.w	r3, sl, r5
 80023f0:	4413      	add	r3, r2
 80023f2:	fbaa 8904 	umull	r8, r9, sl, r4
 80023f6:	444b      	add	r3, r9
 80023f8:	4699      	mov	r9, r3
 80023fa:	4642      	mov	r2, r8
 80023fc:	464b      	mov	r3, r9
 80023fe:	2b00      	cmp	r3, #0
 8002400:	da07      	bge.n	8002412 <Barometer_calculate_E+0x6a>
 8002402:	4965      	ldr	r1, [pc, #404]	@ (8002598 <Barometer_calculate_E+0x1f0>)
 8002404:	1851      	adds	r1, r2, r1
 8002406:	6539      	str	r1, [r7, #80]	@ 0x50
 8002408:	f143 0300 	adc.w	r3, r3, #0
 800240c:	657b      	str	r3, [r7, #84]	@ 0x54
 800240e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002412:	f04f 0000 	mov.w	r0, #0
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	0dd0      	lsrs	r0, r2, #23
 800241c:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8002420:	15d9      	asrs	r1, r3, #23
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	f512 61fa 	adds.w	r1, r2, #2000	@ 0x7d0
 800242a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800242c:	f143 0300 	adc.w	r3, r3, #0
 8002430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002432:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002436:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
	OFF = (int64_t)prom_E[1] * 65536 + ((int64_t)prom_E[3] * dT ) / 128;
 800243a:	4b56      	ldr	r3, [pc, #344]	@ (8002594 <Barometer_calculate_E+0x1ec>)
 800243c:	885b      	ldrh	r3, [r3, #2]
 800243e:	b29b      	uxth	r3, r3
 8002440:	2200      	movs	r2, #0
 8002442:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002446:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800244a:	f04f 0400 	mov.w	r4, #0
 800244e:	f04f 0500 	mov.w	r5, #0
 8002452:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002456:	4613      	mov	r3, r2
 8002458:	041d      	lsls	r5, r3, #16
 800245a:	4613      	mov	r3, r2
 800245c:	460a      	mov	r2, r1
 800245e:	4611      	mov	r1, r2
 8002460:	ea45 4511 	orr.w	r5, r5, r1, lsr #16
 8002464:	4613      	mov	r3, r2
 8002466:	041c      	lsls	r4, r3, #16
 8002468:	4b4a      	ldr	r3, [pc, #296]	@ (8002594 <Barometer_calculate_E+0x1ec>)
 800246a:	88db      	ldrh	r3, [r3, #6]
 800246c:	b29b      	uxth	r3, r3
 800246e:	2200      	movs	r2, #0
 8002470:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002474:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002478:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800247c:	17da      	asrs	r2, r3, #31
 800247e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002482:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002486:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800248a:	460b      	mov	r3, r1
 800248c:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 8002490:	4642      	mov	r2, r8
 8002492:	fb02 f203 	mul.w	r2, r2, r3
 8002496:	464b      	mov	r3, r9
 8002498:	4684      	mov	ip, r0
 800249a:	fb0c f303 	mul.w	r3, ip, r3
 800249e:	4413      	add	r3, r2
 80024a0:	4602      	mov	r2, r0
 80024a2:	4641      	mov	r1, r8
 80024a4:	fba2 2101 	umull	r2, r1, r2, r1
 80024a8:	f8c7 10ec 	str.w	r1, [r7, #236]	@ 0xec
 80024ac:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80024b0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80024b4:	4413      	add	r3, r2
 80024b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80024ba:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	da07      	bge.n	80024d2 <Barometer_calculate_E+0x12a>
 80024c2:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 80024c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80024c8:	f143 0300 	adc.w	r3, r3, #0
 80024cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024d2:	f04f 0000 	mov.w	r0, #0
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	09d0      	lsrs	r0, r2, #7
 80024dc:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80024e0:	11d9      	asrs	r1, r3, #7
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	18a1      	adds	r1, r4, r2
 80024e8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024ea:	eb45 0303 	adc.w	r3, r5, r3
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80024f4:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
	SENS = (int64_t)prom_E[0] * 32768 + ((int64_t)prom_E[2] * dT) / 256;
 80024f8:	4b26      	ldr	r3, [pc, #152]	@ (8002594 <Barometer_calculate_E+0x1ec>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002504:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002508:	f04f 0400 	mov.w	r4, #0
 800250c:	f04f 0500 	mov.w	r5, #0
 8002510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002514:	4613      	mov	r3, r2
 8002516:	03dd      	lsls	r5, r3, #15
 8002518:	4613      	mov	r3, r2
 800251a:	460a      	mov	r2, r1
 800251c:	4611      	mov	r1, r2
 800251e:	ea45 4551 	orr.w	r5, r5, r1, lsr #17
 8002522:	4613      	mov	r3, r2
 8002524:	03dc      	lsls	r4, r3, #15
 8002526:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <Barometer_calculate_E+0x1ec>)
 8002528:	889b      	ldrh	r3, [r3, #4]
 800252a:	b29b      	uxth	r3, r3
 800252c:	2200      	movs	r2, #0
 800252e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002532:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002536:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800253a:	17da      	asrs	r2, r3, #31
 800253c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002540:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002544:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002548:	460b      	mov	r3, r1
 800254a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800254e:	4642      	mov	r2, r8
 8002550:	fb02 f203 	mul.w	r2, r2, r3
 8002554:	464b      	mov	r3, r9
 8002556:	4684      	mov	ip, r0
 8002558:	fb0c f303 	mul.w	r3, ip, r3
 800255c:	4413      	add	r3, r2
 800255e:	4602      	mov	r2, r0
 8002560:	4641      	mov	r1, r8
 8002562:	fba2 2101 	umull	r2, r1, r2, r1
 8002566:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 800256a:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800256e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002572:	4413      	add	r3, r2
 8002574:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002578:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800257c:	2b00      	cmp	r3, #0
 800257e:	da0d      	bge.n	800259c <Barometer_calculate_E+0x1f4>
 8002580:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8002584:	6339      	str	r1, [r7, #48]	@ 0x30
 8002586:	f143 0300 	adc.w	r3, r3, #0
 800258a:	637b      	str	r3, [r7, #52]	@ 0x34
 800258c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002590:	e004      	b.n	800259c <Barometer_calculate_E+0x1f4>
 8002592:	bf00      	nop
 8002594:	200002d8 	.word	0x200002d8
 8002598:	007fffff 	.word	0x007fffff
 800259c:	f04f 0000 	mov.w	r0, #0
 80025a0:	f04f 0100 	mov.w	r1, #0
 80025a4:	0a10      	lsrs	r0, r2, #8
 80025a6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80025aa:	1219      	asrs	r1, r3, #8
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	18a1      	adds	r1, r4, r2
 80025b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80025b4:	eb45 0303 	adc.w	r3, r5, r3
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80025be:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138

	if (TEMP < 2000){   // second order temperature compensation
 80025c2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80025c6:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 80025ca:	f173 0300 	sbcs.w	r3, r3, #0
 80025ce:	f280 80d9 	bge.w	8002784 <Barometer_calculate_E+0x3dc>
		int64_t T2 = (((int64_t)dT)*dT) >> 31;
 80025d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025d6:	17da      	asrs	r2, r3, #31
 80025d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025e4:	17da      	asrs	r2, r3, #31
 80025e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025ea:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025ee:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 80025f2:	4622      	mov	r2, r4
 80025f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80025f8:	4641      	mov	r1, r8
 80025fa:	fb01 f202 	mul.w	r2, r1, r2
 80025fe:	464d      	mov	r5, r9
 8002600:	4618      	mov	r0, r3
 8002602:	4621      	mov	r1, r4
 8002604:	4603      	mov	r3, r0
 8002606:	fb03 f305 	mul.w	r3, r3, r5
 800260a:	4413      	add	r3, r2
 800260c:	4602      	mov	r2, r0
 800260e:	4641      	mov	r1, r8
 8002610:	fba2 2101 	umull	r2, r1, r2, r1
 8002614:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8002618:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800261c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002620:	4413      	add	r3, r2
 8002622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8002632:	4621      	mov	r1, r4
 8002634:	0fca      	lsrs	r2, r1, #31
 8002636:	4620      	mov	r0, r4
 8002638:	4629      	mov	r1, r5
 800263a:	460c      	mov	r4, r1
 800263c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8002640:	17cb      	asrs	r3, r1, #31
 8002642:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
		int64_t Aux_64 = (TEMP-2000)*(TEMP-2000);
 8002646:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800264a:	f5b2 61fa 	subs.w	r1, r2, #2000	@ 0x7d0
 800264e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8002652:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800265a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800265e:	f5b2 61fa 	subs.w	r1, r2, #2000	@ 0x7d0
 8002662:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002664:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002668:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800266a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800266e:	4622      	mov	r2, r4
 8002670:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002674:	4641      	mov	r1, r8
 8002676:	fb01 f202 	mul.w	r2, r1, r2
 800267a:	464d      	mov	r5, r9
 800267c:	4618      	mov	r0, r3
 800267e:	4621      	mov	r1, r4
 8002680:	4603      	mov	r3, r0
 8002682:	fb03 f305 	mul.w	r3, r3, r5
 8002686:	4413      	add	r3, r2
 8002688:	4602      	mov	r2, r0
 800268a:	4641      	mov	r1, r8
 800268c:	fba2 2101 	umull	r2, r1, r2, r1
 8002690:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8002694:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8002698:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800269c:	4413      	add	r3, r2
 800269e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026a2:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 80026a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80026aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
		int64_t OFF2 = (5*Aux_64)>>1;
 80026ae:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80026b2:	4622      	mov	r2, r4
 80026b4:	462b      	mov	r3, r5
 80026b6:	f04f 0000 	mov.w	r0, #0
 80026ba:	f04f 0100 	mov.w	r1, #0
 80026be:	0099      	lsls	r1, r3, #2
 80026c0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80026c4:	0090      	lsls	r0, r2, #2
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	1911      	adds	r1, r2, r4
 80026cc:	6739      	str	r1, [r7, #112]	@ 0x70
 80026ce:	416b      	adcs	r3, r5
 80026d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80026de:	4621      	mov	r1, r4
 80026e0:	084a      	lsrs	r2, r1, #1
 80026e2:	4620      	mov	r0, r4
 80026e4:	4629      	mov	r1, r5
 80026e6:	460c      	mov	r4, r1
 80026e8:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
 80026ec:	104b      	asrs	r3, r1, #1
 80026ee:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
		int64_t SENS2 = (5*Aux_64)>>2;
 80026f2:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80026f6:	4622      	mov	r2, r4
 80026f8:	462b      	mov	r3, r5
 80026fa:	f04f 0000 	mov.w	r0, #0
 80026fe:	f04f 0100 	mov.w	r1, #0
 8002702:	0099      	lsls	r1, r3, #2
 8002704:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002708:	0090      	lsls	r0, r2, #2
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	1911      	adds	r1, r2, r4
 8002710:	66b9      	str	r1, [r7, #104]	@ 0x68
 8002712:	416b      	adcs	r3, r5
 8002714:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8002722:	4621      	mov	r1, r4
 8002724:	088a      	lsrs	r2, r1, #2
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	460c      	mov	r4, r1
 800272c:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
 8002730:	108b      	asrs	r3, r1, #2
 8002732:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
		TEMP = TEMP - T2;
 8002736:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800273a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800273e:	1a84      	subs	r4, r0, r2
 8002740:	623c      	str	r4, [r7, #32]
 8002742:	eb61 0303 	sbc.w	r3, r1, r3
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
 8002748:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800274c:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
		OFF = OFF - OFF2;
 8002750:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8002754:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8002758:	1a84      	subs	r4, r0, r2
 800275a:	61bc      	str	r4, [r7, #24]
 800275c:	eb61 0303 	sbc.w	r3, r1, r3
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002766:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
		SENS = SENS - SENS2;
 800276a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 800276e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8002772:	1a84      	subs	r4, r0, r2
 8002774:	613c      	str	r4, [r7, #16]
 8002776:	eb61 0303 	sbc.w	r3, r1, r3
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002780:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
	}

	P = (D1*SENS/2097152 - OFF)/32768;
 8002784:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002788:	2200      	movs	r2, #0
 800278a:	663b      	str	r3, [r7, #96]	@ 0x60
 800278c:	667a      	str	r2, [r7, #100]	@ 0x64
 800278e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002792:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002796:	462a      	mov	r2, r5
 8002798:	fb02 f203 	mul.w	r2, r2, r3
 800279c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027a0:	4621      	mov	r1, r4
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80027ac:	4621      	mov	r1, r4
 80027ae:	fba2 2101 	umull	r2, r1, r2, r1
 80027b2:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 80027b6:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80027ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80027be:	4413      	add	r3, r2
 80027c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80027c4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da07      	bge.n	80027dc <Barometer_calculate_E+0x434>
 80027cc:	493e      	ldr	r1, [pc, #248]	@ (80028c8 <Barometer_calculate_E+0x520>)
 80027ce:	1851      	adds	r1, r2, r1
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	f143 0300 	adc.w	r3, r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027dc:	f04f 0000 	mov.w	r0, #0
 80027e0:	f04f 0100 	mov.w	r1, #0
 80027e4:	0d50      	lsrs	r0, r2, #21
 80027e6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80027ea:	1559      	asrs	r1, r3, #21
 80027ec:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80027f0:	1a84      	subs	r4, r0, r2
 80027f2:	65bc      	str	r4, [r7, #88]	@ 0x58
 80027f4:	eb61 0303 	sbc.w	r3, r1, r3
 80027f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da08      	bge.n	8002814 <Barometer_calculate_E+0x46c>
 8002802:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002806:	1851      	adds	r1, r2, r1
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	f143 0300 	adc.w	r3, r3, #0
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002814:	f04f 0000 	mov.w	r0, #0
 8002818:	f04f 0100 	mov.w	r1, #0
 800281c:	0bd0      	lsrs	r0, r2, #15
 800281e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8002822:	13d9      	asrs	r1, r3, #15
 8002824:	e9c7 0140 	strd	r0, r1, [r7, #256]	@ 0x100
	temperature = TEMP;
 8002828:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800282c:	4a27      	ldr	r2, [pc, #156]	@ (80028cc <Barometer_calculate_E+0x524>)
 800282e:	6013      	str	r3, [r2, #0]
	pressure = P;
 8002830:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002834:	4a26      	ldr	r2, [pc, #152]	@ (80028d0 <Barometer_calculate_E+0x528>)
 8002836:	6013      	str	r3, [r2, #0]

	press = (float)pressure;
 8002838:	4b25      	ldr	r3, [pc, #148]	@ (80028d0 <Barometer_calculate_E+0x528>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fa45 	bl	8000ccc <__aeabi_i2f>
 8002842:	4603      	mov	r3, r0
 8002844:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	r= press/101325.0;
 8002848:	4922      	ldr	r1, [pc, #136]	@ (80028d4 <Barometer_calculate_E+0x52c>)
 800284a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 800284e:	f7fe fb45 	bl	8000edc <__aeabi_fdiv>
 8002852:	4603      	mov	r3, r0
 8002854:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	c = 1.0/5.255;
 8002858:	4b1f      	ldr	r3, [pc, #124]	@ (80028d8 <Barometer_calculate_E+0x530>)
 800285a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	altitude = (1 - pow(r,c))*44330.77;
 800285e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8002862:	f7fd fdf9 	bl	8000458 <__aeabi_f2d>
 8002866:	4604      	mov	r4, r0
 8002868:	460d      	mov	r5, r1
 800286a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800286e:	f7fd fdf3 	bl	8000458 <__aeabi_f2d>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f006 ff21 	bl	80096c0 <pow>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	f04f 0000 	mov.w	r0, #0
 8002886:	4915      	ldr	r1, [pc, #84]	@ (80028dc <Barometer_calculate_E+0x534>)
 8002888:	f7fd fc86 	bl	8000198 <__aeabi_dsub>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	a30a      	add	r3, pc, #40	@ (adr r3, 80028c0 <Barometer_calculate_E+0x518>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fe35 	bl	8000508 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f7fe f907 	bl	8000ab8 <__aeabi_d2f>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a0c      	ldr	r2, [pc, #48]	@ (80028e0 <Barometer_calculate_E+0x538>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 80028b6:	46bd      	mov	sp, r7
 80028b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028bc:	f3af 8000 	nop.w
 80028c0:	a3d70a3d 	.word	0xa3d70a3d
 80028c4:	40e5a558 	.word	0x40e5a558
 80028c8:	001fffff 	.word	0x001fffff
 80028cc:	200002e4 	.word	0x200002e4
 80028d0:	200002e8 	.word	0x200002e8
 80028d4:	47c5e680 	.word	0x47c5e680
 80028d8:	3e42dcae 	.word	0x3e42dcae
 80028dc:	3ff00000 	.word	0x3ff00000
 80028e0:	200002ec 	.word	0x200002ec

080028e4 <Barometer_init_E>:
    return D1;
}

// Initialisation des capteurs pour EAST et WEST
void Barometer_init_E()
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
    ms5611_init_E();
 80028e8:	f7ff fc6e 	bl	80021c8 <ms5611_init_E>
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <Barometer_getTemp_E>:
	c = 1.0/5.255;
	altitude = (1 - pow(r,c))*44330.77;
}
// Fonctions pour récupérer température, pression et altitude pour EAST et WEST
int32_t Barometer_getTemp_E(bool calculate)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
    if (calculate)
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <Barometer_getTemp_E+0x14>
    {
        Barometer_calculate_E();
 8002900:	f7ff fd52 	bl	80023a8 <Barometer_calculate_E>
    }
    return temperature;
 8002904:	4b02      	ldr	r3, [pc, #8]	@ (8002910 <Barometer_getTemp_E+0x20>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200002e4 	.word	0x200002e4

08002914 <Barometer_getPressure_E>:

int32_t Barometer_getPressure_E(bool calculate)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
    if (calculate)
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <Barometer_getPressure_E+0x14>
    {
        Barometer_calculate_E();
 8002924:	f7ff fd40 	bl	80023a8 <Barometer_calculate_E>
    }
    return pressure;
 8002928:	4b02      	ldr	r3, [pc, #8]	@ (8002934 <Barometer_getPressure_E+0x20>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200002e8 	.word	0x200002e8

08002938 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 800293c:	bf00      	nop
 800293e:	f000 f9df 	bl	8002d00 <icm20948_who_am_i>
 8002942:	4603      	mov	r3, r0
 8002944:	f083 0301 	eor.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f7      	bne.n	800293e <icm20948_init+0x6>

	icm20948_device_reset();
 800294e:	f000 f9fc 	bl	8002d4a <icm20948_device_reset>
	icm20948_wakeup();
 8002952:	f000 fa11 	bl	8002d78 <icm20948_wakeup>

	icm20948_clock_source(1);
 8002956:	2001      	movs	r0, #1
 8002958:	f000 faa3 	bl	8002ea2 <icm20948_clock_source>
	icm20948_odr_align_enable();
 800295c:	f000 faba 	bl	8002ed4 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8002960:	f000 fa3e 	bl	8002de0 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8002964:	2000      	movs	r0, #0
 8002966:	f000 fabe 	bl	8002ee6 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 800296a:	2000      	movs	r0, #0
 800296c:	f000 fad8 	bl	8002f20 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8002970:	2000      	movs	r0, #0
 8002972:	f000 faf2 	bl	8002f5a <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002976:	2000      	movs	r0, #0
 8002978:	f000 fafe 	bl	8002f78 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 800297c:	f000 fb2c 	bl	8002fd8 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8002980:	f000 fbcc 	bl	800311c <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8002984:	2003      	movs	r0, #3
 8002986:	f000 fcdd 	bl	8003344 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 800298a:	2003      	movs	r0, #3
 800298c:	f000 fd24 	bl	80033d8 <icm20948_accel_full_scale_select>
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}

08002994 <ak09916_init>:

void ak09916_init()
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8002998:	f000 fa39 	bl	8002e0e <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 800299c:	f000 fa4e 	bl	8002e3c <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 80029a0:	2007      	movs	r0, #7
 80029a2:	f000 fa65 	bl	8002e70 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 80029a6:	bf00      	nop
 80029a8:	f000 f9bd 	bl	8002d26 <ak09916_who_am_i>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f083 0301 	eor.w	r3, r3, #1
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f7      	bne.n	80029a8 <ak09916_init+0x14>

	ak09916_soft_reset();
 80029b8:	f000 f9d3 	bl	8002d62 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 80029bc:	2008      	movs	r0, #8
 80029be:	f000 faf9 	bl	8002fb4 <ak09916_operation_mode_setting>
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 80029ce:	2206      	movs	r2, #6
 80029d0:	2133      	movs	r1, #51	@ 0x33
 80029d2:	2000      	movs	r0, #0
 80029d4:	f000 fdc8 	bl	8003568 <read_multiple_icm20948_reg>
 80029d8:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3301      	adds	r3, #1
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b21b      	sxth	r3, r3
 80029ea:	4313      	orrs	r3, r2
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f96c 	bl	8000ccc <__aeabi_i2f>
 80029f4:	4602      	mov	r2, r0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3302      	adds	r3, #2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	b21a      	sxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3303      	adds	r3, #3
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b21b      	sxth	r3, r3
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b21b      	sxth	r3, r3
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe f95b 	bl	8000ccc <__aeabi_i2f>
 8002a16:	4602      	mov	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	b21a      	sxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3305      	adds	r3, #5
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe f94a 	bl	8000ccc <__aeabi_i2f>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8002a50:	2206      	movs	r2, #6
 8002a52:	212d      	movs	r1, #45	@ 0x2d
 8002a54:	2000      	movs	r0, #0
 8002a56:	f000 fd87 	bl	8003568 <read_multiple_icm20948_reg>
 8002a5a:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3301      	adds	r3, #1
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f92b 	bl	8000ccc <__aeabi_i2f>
 8002a76:	4602      	mov	r2, r0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3302      	adds	r3, #2
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	b21a      	sxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3303      	adds	r3, #3
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	b21b      	sxth	r3, r3
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f91a 	bl	8000ccc <__aeabi_i2f>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3305      	adds	r3, #5
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	b21b      	sxth	r3, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe f909 	bl	8000ccc <__aeabi_i2f>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <icm20948_accel_read+0x90>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f7fe f84e 	bl	8000b64 <__addsf3>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	609a      	str	r2, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200002f4 	.word	0x200002f4

08002adc <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 8002ae4:	2010      	movs	r0, #16
 8002ae6:	f000 fd9b 	bl	8003620 <read_single_ak09916_reg>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <ak09916_mag_read+0x20>
 8002af8:	2300      	movs	r3, #0
 8002afa:	e043      	b.n	8002b84 <ak09916_mag_read+0xa8>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8002afc:	2106      	movs	r1, #6
 8002afe:	2011      	movs	r0, #17
 8002b00:	f000 fdd1 	bl	80036a6 <read_multiple_ak09916_reg>
 8002b04:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8002b06:	2018      	movs	r0, #24
 8002b08:	f000 fd8a 	bl	8003620 <read_single_ak09916_reg>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <ak09916_mag_read+0x42>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e032      	b.n	8002b84 <ak09916_mag_read+0xa8>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	3301      	adds	r3, #1
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	b21a      	sxth	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b21b      	sxth	r3, r3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe f8ca 	bl	8000ccc <__aeabi_i2f>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	3303      	adds	r3, #3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	b21a      	sxth	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b21b      	sxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe f8b9 	bl	8000ccc <__aeabi_i2f>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	3305      	adds	r3, #5
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	b21a      	sxth	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b21b      	sxth	r3, r3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe f8a8 	bl	8000ccc <__aeabi_i2f>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	609a      	str	r2, [r3, #8]

	return true;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <icm20948_gyro_read_dps>:

void icm20948_gyro_read_dps(axises* data)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ff16 	bl	80029c6 <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a13      	ldr	r2, [pc, #76]	@ (8002bec <icm20948_gyro_read_dps+0x60>)
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe f999 	bl	8000edc <__aeabi_fdiv>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
	data->y /= gyro_scale_factor;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8002bec <icm20948_gyro_read_dps+0x60>)
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe f98d 	bl	8000edc <__aeabi_fdiv>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	605a      	str	r2, [r3, #4]
	data->z /= gyro_scale_factor;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	4a07      	ldr	r2, [pc, #28]	@ (8002bec <icm20948_gyro_read_dps+0x60>)
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe f981 	bl	8000edc <__aeabi_fdiv>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	609a      	str	r2, [r3, #8]
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200002f0 	.word	0x200002f0

08002bf0 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ff25 	bl	8002a48 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a13      	ldr	r2, [pc, #76]	@ (8002c50 <icm20948_accel_read_g+0x60>)
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe f967 	bl	8000edc <__aeabi_fdiv>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	601a      	str	r2, [r3, #0]
	data->y /= accel_scale_factor;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <icm20948_accel_read_g+0x60>)
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe f95b 	bl	8000edc <__aeabi_fdiv>
 8002c26:	4603      	mov	r3, r0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	605a      	str	r2, [r3, #4]
	data->z /= accel_scale_factor;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4a07      	ldr	r2, [pc, #28]	@ (8002c50 <icm20948_accel_read_g+0x60>)
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe f94f 	bl	8000edc <__aeabi_fdiv>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200002f4 	.word	0x200002f4
 8002c54:	00000000 	.word	0x00000000

08002c58 <ak09916_mag_read_uT>:

bool ak09916_mag_read_uT(axises* data)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	axises temp;
	bool new_data = ak09916_mag_read(&temp);
 8002c60:	f107 0308 	add.w	r3, r7, #8
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff39 	bl	8002adc <ak09916_mag_read>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	75fb      	strb	r3, [r7, #23]
	if(!new_data)	return false;
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <ak09916_mag_read_uT+0x26>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e036      	b.n	8002cec <ak09916_mag_read_uT+0x94>

	data->x = (float)(temp.x * 0.15);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fbe9 	bl	8000458 <__aeabi_f2d>
 8002c86:	a31c      	add	r3, pc, #112	@ (adr r3, 8002cf8 <ak09916_mag_read_uT+0xa0>)
 8002c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8c:	f7fd fc3c 	bl	8000508 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f7fd ff0e 	bl	8000ab8 <__aeabi_d2f>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
	data->y = (float)(temp.y * 0.15);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fbd7 	bl	8000458 <__aeabi_f2d>
 8002caa:	a313      	add	r3, pc, #76	@ (adr r3, 8002cf8 <ak09916_mag_read_uT+0xa0>)
 8002cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb0:	f7fd fc2a 	bl	8000508 <__aeabi_dmul>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f7fd fefc 	bl	8000ab8 <__aeabi_d2f>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	605a      	str	r2, [r3, #4]
	data->z = (float)(temp.z * 0.15);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fbc5 	bl	8000458 <__aeabi_f2d>
 8002cce:	a30a      	add	r3, pc, #40	@ (adr r3, 8002cf8 <ak09916_mag_read_uT+0xa0>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f7fd fc18 	bl	8000508 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7fd feea 	bl	8000ab8 <__aeabi_d2f>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	609a      	str	r2, [r3, #8]

	return true;
 8002cea:	2301      	movs	r3, #1
}	
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	f3af 8000 	nop.w
 8002cf8:	33333333 	.word	0x33333333
 8002cfc:	3fc33333 	.word	0x3fc33333

08002d00 <icm20948_who_am_i>:


/* Sub Functions */
bool icm20948_who_am_i()
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8002d06:	2100      	movs	r1, #0
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f000 fbdd 	bl	80034c8 <read_single_icm20948_reg>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	2bea      	cmp	r3, #234	@ 0xea
 8002d16:	d101      	bne.n	8002d1c <icm20948_who_am_i+0x1c>
		return true;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <icm20948_who_am_i+0x1e>
	else
		return false;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f000 fc77 	bl	8003620 <read_single_ak09916_reg>
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b09      	cmp	r3, #9
 8002d3a:	d101      	bne.n	8002d40 <ak09916_who_am_i+0x1a>
		return true;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <ak09916_who_am_i+0x1c>
	else
		return false;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <icm20948_device_reset>:

void icm20948_device_reset()
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8002d4e:	22c1      	movs	r2, #193	@ 0xc1
 8002d50:	2106      	movs	r1, #6
 8002d52:	2000      	movs	r0, #0
 8002d54:	f000 fbe4 	bl	8003520 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002d58:	2064      	movs	r0, #100	@ 0x64
 8002d5a:	f001 fcfb 	bl	8004754 <HAL_Delay>
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8002d66:	2101      	movs	r1, #1
 8002d68:	2032      	movs	r0, #50	@ 0x32
 8002d6a:	f000 fc7a 	bl	8003662 <write_single_ak09916_reg>
	HAL_Delay(100);
 8002d6e:	2064      	movs	r0, #100	@ 0x64
 8002d70:	f001 fcf0 	bl	8004754 <HAL_Delay>
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002d7e:	2106      	movs	r1, #6
 8002d80:	2000      	movs	r0, #0
 8002d82:	f000 fba1 	bl	80034c8 <read_single_icm20948_reg>
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d90:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	461a      	mov	r2, r3
 8002d96:	2106      	movs	r1, #6
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f000 fbc1 	bl	8003520 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002d9e:	2064      	movs	r0, #100	@ 0x64
 8002da0:	f001 fcd8 	bl	8004754 <HAL_Delay>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <icm20948_sleep>:

void icm20948_sleep()
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002db2:	2106      	movs	r1, #6
 8002db4:	2000      	movs	r0, #0
 8002db6:	f000 fb87 	bl	80034c8 <read_single_icm20948_reg>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x40;
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc4:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2106      	movs	r1, #6
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f000 fba7 	bl	8003520 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002dd2:	2064      	movs	r0, #100	@ 0x64
 8002dd4:	f001 fcbe 	bl	8004754 <HAL_Delay>
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <icm20948_spi_slave_enable>:

void icm20948_spi_slave_enable()
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002de6:	2103      	movs	r1, #3
 8002de8:	2000      	movs	r0, #0
 8002dea:	f000 fb6d 	bl	80034c8 <read_single_icm20948_reg>
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	f043 0310 	orr.w	r3, r3, #16
 8002df8:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2103      	movs	r1, #3
 8002e00:	2000      	movs	r0, #0
 8002e02:	f000 fb8d 	bl	8003520 <write_single_icm20948_reg>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002e14:	2103      	movs	r1, #3
 8002e16:	2000      	movs	r0, #0
 8002e18:	f000 fb56 	bl	80034c8 <read_single_icm20948_reg>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f000 fb76 	bl	8003520 <write_single_icm20948_reg>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002e42:	2103      	movs	r1, #3
 8002e44:	2000      	movs	r0, #0
 8002e46:	f000 fb3f 	bl	80034c8 <read_single_icm20948_reg>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	f043 0320 	orr.w	r3, r3, #32
 8002e54:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2103      	movs	r1, #3
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f000 fb5f 	bl	8003520 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002e62:	2064      	movs	r0, #100	@ 0x64
 8002e64:	f001 fc76 	bl	8004754 <HAL_Delay>
}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	2030      	movs	r0, #48	@ 0x30
 8002e7e:	f000 fb23 	bl	80034c8 <read_single_icm20948_reg>
 8002e82:	4603      	mov	r3, r0
 8002e84:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	461a      	mov	r2, r3
 8002e92:	2101      	movs	r1, #1
 8002e94:	2030      	movs	r0, #48	@ 0x30
 8002e96:	f000 fb43 	bl	8003520 <write_single_icm20948_reg>
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002eac:	2106      	movs	r1, #6
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f000 fb0a 	bl	80034c8 <read_single_icm20948_reg>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2106      	movs	r1, #6
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f000 fb2a 	bl	8003520 <write_single_icm20948_reg>
}
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2109      	movs	r1, #9
 8002edc:	2020      	movs	r0, #32
 8002ede:	f000 fb1f 	bl	8003520 <write_single_icm20948_reg>
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	2020      	movs	r0, #32
 8002ef4:	f000 fae8 	bl	80034c8 <read_single_icm20948_reg>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	b25a      	sxtb	r2, r3
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2101      	movs	r1, #1
 8002f12:	2020      	movs	r0, #32
 8002f14:	f000 fb04 	bl	8003520 <write_single_icm20948_reg>
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002f2a:	2114      	movs	r1, #20
 8002f2c:	2020      	movs	r0, #32
 8002f2e:	f000 facb 	bl	80034c8 <read_single_icm20948_reg>
 8002f32:	4603      	mov	r3, r0
 8002f34:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	b25a      	sxtb	r2, r3
 8002f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	2020      	movs	r0, #32
 8002f4e:	f000 fae7 	bl	8003520 <write_single_icm20948_reg>
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	461a      	mov	r2, r3
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2020      	movs	r0, #32
 8002f6c:	f000 fad8 	bl	8003520 <write_single_icm20948_reg>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	461a      	mov	r2, r3
 8002f98:	2110      	movs	r1, #16
 8002f9a:	2020      	movs	r0, #32
 8002f9c:	f000 fac0 	bl	8003520 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8002fa0:	7bbb      	ldrb	r3, [r7, #14]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	2111      	movs	r1, #17
 8002fa6:	2020      	movs	r0, #32
 8002fa8:	f000 faba 	bl	8003520 <write_single_icm20948_reg>
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	2031      	movs	r0, #49	@ 0x31
 8002fc4:	f000 fb4d 	bl	8003662 <write_single_ak09916_reg>
	HAL_Delay(100);
 8002fc8:	2064      	movs	r0, #100	@ 0x64
 8002fca:	f001 fbc3 	bl	8004754 <HAL_Delay>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	@ 0x28
 8002fdc:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8002fde:	f107 030c 	add.w	r3, r7, #12
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff6:	e037      	b.n	8003068 <icm20948_gyro_calibration+0x90>
	{
		icm20948_gyro_read(&temp);
 8002ff8:	f107 0318 	add.w	r3, r7, #24
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fce2 	bl	80029c6 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fe61 	bl	8000ccc <__aeabi_i2f>
 800300a:	4602      	mov	r2, r0
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	4619      	mov	r1, r3
 8003010:	4610      	mov	r0, r2
 8003012:	f7fd fda7 	bl	8000b64 <__addsf3>
 8003016:	4603      	mov	r3, r0
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe f871 	bl	8001100 <__aeabi_f2iz>
 800301e:	4603      	mov	r3, r0
 8003020:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fe51 	bl	8000ccc <__aeabi_i2f>
 800302a:	4602      	mov	r2, r0
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f7fd fd97 	bl	8000b64 <__addsf3>
 8003036:	4603      	mov	r3, r0
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe f861 	bl	8001100 <__aeabi_f2iz>
 800303e:	4603      	mov	r3, r0
 8003040:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fe41 	bl	8000ccc <__aeabi_i2f>
 800304a:	4602      	mov	r2, r0
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f7fd fd87 	bl	8000b64 <__addsf3>
 8003056:	4603      	mov	r3, r0
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe f851 	bl	8001100 <__aeabi_f2iz>
 800305e:	4603      	mov	r3, r0
 8003060:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	3301      	adds	r3, #1
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	2b63      	cmp	r3, #99	@ 0x63
 800306c:	ddc4      	ble.n	8002ff8 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a29      	ldr	r2, [pc, #164]	@ (8003118 <icm20948_gyro_calibration+0x140>)
 8003072:	fb82 1203 	smull	r1, r2, r2, r3
 8003076:	1152      	asrs	r2, r2, #5
 8003078:	17db      	asrs	r3, r3, #31
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4a25      	ldr	r2, [pc, #148]	@ (8003118 <icm20948_gyro_calibration+0x140>)
 8003082:	fb82 1203 	smull	r1, r2, r2, r3
 8003086:	1152      	asrs	r2, r2, #5
 8003088:	17db      	asrs	r3, r3, #31
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	4a21      	ldr	r2, [pc, #132]	@ (8003118 <icm20948_gyro_calibration+0x140>)
 8003092:	fb82 1203 	smull	r1, r2, r2, r3
 8003096:	1152      	asrs	r2, r2, #5
 8003098:	17db      	asrs	r3, r3, #31
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	425b      	negs	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	da00      	bge.n	80030a8 <icm20948_gyro_calibration+0xd0>
 80030a6:	3303      	adds	r3, #3
 80030a8:	109b      	asrs	r3, r3, #2
 80030aa:	121b      	asrs	r3, r3, #8
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	425b      	negs	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da00      	bge.n	80030ba <icm20948_gyro_calibration+0xe2>
 80030b8:	3303      	adds	r3, #3
 80030ba:	109b      	asrs	r3, r3, #2
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	425b      	negs	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	da00      	bge.n	80030ca <icm20948_gyro_calibration+0xf2>
 80030c8:	3303      	adds	r3, #3
 80030ca:	109b      	asrs	r3, r3, #2
 80030cc:	121b      	asrs	r3, r3, #8
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	425b      	negs	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da00      	bge.n	80030dc <icm20948_gyro_calibration+0x104>
 80030da:	3303      	adds	r3, #3
 80030dc:	109b      	asrs	r3, r3, #2
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	425b      	negs	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da00      	bge.n	80030ec <icm20948_gyro_calibration+0x114>
 80030ea:	3303      	adds	r3, #3
 80030ec:	109b      	asrs	r3, r3, #2
 80030ee:	121b      	asrs	r3, r3, #8
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	425b      	negs	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	da00      	bge.n	80030fe <icm20948_gyro_calibration+0x126>
 80030fc:	3303      	adds	r3, #3
 80030fe:	109b      	asrs	r3, r3, #2
 8003100:	b2db      	uxtb	r3, r3
 8003102:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8003104:	1d3a      	adds	r2, r7, #4
 8003106:	2306      	movs	r3, #6
 8003108:	2103      	movs	r1, #3
 800310a:	2020      	movs	r0, #32
 800310c:	f000 fa5c 	bl	80035c8 <write_multiple_icm20948_reg>
}
 8003110:	bf00      	nop
 8003112:	3728      	adds	r7, #40	@ 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	51eb851f 	.word	0x51eb851f

0800311c <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b090      	sub	sp, #64	@ 0x40
 8003120:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8003122:	f107 0318 	add.w	r3, r7, #24
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	2300      	movs	r3, #0
 8003140:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8003142:	2300      	movs	r3, #0
 8003144:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003146:	e037      	b.n	80031b8 <icm20948_accel_calibration+0x9c>
	{
		icm20948_accel_read(&temp);
 8003148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fc7b 	bl	8002a48 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd fdb9 	bl	8000ccc <__aeabi_i2f>
 800315a:	4602      	mov	r2, r0
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f7fd fcff 	bl	8000b64 <__addsf3>
 8003166:	4603      	mov	r3, r0
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd ffc9 	bl	8001100 <__aeabi_f2iz>
 800316e:	4603      	mov	r3, r0
 8003170:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fda9 	bl	8000ccc <__aeabi_i2f>
 800317a:	4602      	mov	r2, r0
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f7fd fcef 	bl	8000b64 <__addsf3>
 8003186:	4603      	mov	r3, r0
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd ffb9 	bl	8001100 <__aeabi_f2iz>
 800318e:	4603      	mov	r3, r0
 8003190:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd fd99 	bl	8000ccc <__aeabi_i2f>
 800319a:	4602      	mov	r2, r0
 800319c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f7fd fcdf 	bl	8000b64 <__addsf3>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd ffa9 	bl	8001100 <__aeabi_f2iz>
 80031ae:	4603      	mov	r3, r0
 80031b0:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 80031b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b4:	3301      	adds	r3, #1
 80031b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ba:	2b63      	cmp	r3, #99	@ 0x63
 80031bc:	ddc4      	ble.n	8003148 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4a5e      	ldr	r2, [pc, #376]	@ (800333c <icm20948_accel_calibration+0x220>)
 80031c2:	fb82 1203 	smull	r1, r2, r2, r3
 80031c6:	1152      	asrs	r2, r2, #5
 80031c8:	17db      	asrs	r3, r3, #31
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	4a5a      	ldr	r2, [pc, #360]	@ (800333c <icm20948_accel_calibration+0x220>)
 80031d2:	fb82 1203 	smull	r1, r2, r2, r3
 80031d6:	1152      	asrs	r2, r2, #5
 80031d8:	17db      	asrs	r3, r3, #31
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	4a56      	ldr	r2, [pc, #344]	@ (800333c <icm20948_accel_calibration+0x220>)
 80031e2:	fb82 1203 	smull	r1, r2, r2, r3
 80031e6:	1152      	asrs	r2, r2, #5
 80031e8:	17db      	asrs	r3, r3, #31
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 80031ee:	4a54      	ldr	r2, [pc, #336]	@ (8003340 <icm20948_accel_calibration+0x224>)
 80031f0:	463b      	mov	r3, r7
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	4611      	mov	r1, r2
 80031f6:	8019      	strh	r1, [r3, #0]
 80031f8:	3302      	adds	r3, #2
 80031fa:	0c12      	lsrs	r2, r2, #16
 80031fc:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 80031fe:	2202      	movs	r2, #2
 8003200:	2114      	movs	r1, #20
 8003202:	2010      	movs	r0, #16
 8003204:	f000 f9b0 	bl	8003568 <read_multiple_icm20948_reg>
 8003208:	63b8      	str	r0, [r7, #56]	@ 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 800320a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003212:	3201      	adds	r2, #1
 8003214:	7812      	ldrb	r2, [r2, #0]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 800321a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321c:	3301      	adds	r3, #1
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8003228:	2202      	movs	r2, #2
 800322a:	2117      	movs	r1, #23
 800322c:	2010      	movs	r0, #16
 800322e:	f000 f99b 	bl	8003568 <read_multiple_icm20948_reg>
 8003232:	6378      	str	r0, [r7, #52]	@ 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800323c:	3201      	adds	r2, #1
 800323e:	7812      	ldrb	r2, [r2, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 8003244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003246:	3301      	adds	r3, #1
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8003252:	2202      	movs	r2, #2
 8003254:	211a      	movs	r1, #26
 8003256:	2010      	movs	r0, #16
 8003258:	f000 f986 	bl	8003568 <read_multiple_icm20948_reg>
 800325c:	6338      	str	r0, [r7, #48]	@ 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 800325e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003266:	3201      	adds	r2, #1
 8003268:	7812      	ldrb	r2, [r2, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	3301      	adds	r3, #1
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	da00      	bge.n	8003286 <icm20948_accel_calibration+0x16a>
 8003284:	3307      	adds	r3, #7
 8003286:	10db      	asrs	r3, r3, #3
 8003288:	425b      	negs	r3, r3
 800328a:	4413      	add	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	da00      	bge.n	8003298 <icm20948_accel_calibration+0x17c>
 8003296:	3307      	adds	r3, #7
 8003298:	10db      	asrs	r3, r3, #3
 800329a:	425b      	negs	r3, r3
 800329c:	4413      	add	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	da00      	bge.n	80032aa <icm20948_accel_calibration+0x18e>
 80032a8:	3307      	adds	r3, #7
 80032aa:	10db      	asrs	r3, r3, #3
 80032ac:	425b      	negs	r3, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	121b      	asrs	r3, r3, #8
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 80032c6:	797a      	ldrb	r2, [r7, #5]
 80032c8:	783b      	ldrb	r3, [r7, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	121b      	asrs	r3, r3, #8
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 80032e4:	79fa      	ldrb	r2, [r7, #7]
 80032e6:	787b      	ldrb	r3, [r7, #1]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	121b      	asrs	r3, r3, #8
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8003302:	7a7a      	ldrb	r2, [r7, #9]
 8003304:	78bb      	ldrb	r3, [r7, #2]
 8003306:	4313      	orrs	r3, r2
 8003308:	b2db      	uxtb	r3, r3
 800330a:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800330c:	1d3a      	adds	r2, r7, #4
 800330e:	2302      	movs	r3, #2
 8003310:	2114      	movs	r1, #20
 8003312:	2010      	movs	r0, #16
 8003314:	f000 f958 	bl	80035c8 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	1c9a      	adds	r2, r3, #2
 800331c:	2302      	movs	r3, #2
 800331e:	2117      	movs	r1, #23
 8003320:	2010      	movs	r0, #16
 8003322:	f000 f951 	bl	80035c8 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	1d1a      	adds	r2, r3, #4
 800332a:	2302      	movs	r3, #2
 800332c:	211a      	movs	r1, #26
 800332e:	2010      	movs	r0, #16
 8003330:	f000 f94a 	bl	80035c8 <write_multiple_icm20948_reg>
}
 8003334:	bf00      	nop
 8003336:	3740      	adds	r7, #64	@ 0x40
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	51eb851f 	.word	0x51eb851f
 8003340:	0800a4f8 	.word	0x0800a4f8

08003344 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800334e:	2101      	movs	r1, #1
 8003350:	2020      	movs	r0, #32
 8003352:	f000 f8b9 	bl	80034c8 <read_single_icm20948_reg>
 8003356:	4603      	mov	r3, r0
 8003358:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d827      	bhi.n	80033b0 <icm20948_gyro_full_scale_select+0x6c>
 8003360:	a201      	add	r2, pc, #4	@ (adr r2, 8003368 <icm20948_gyro_full_scale_select+0x24>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	08003379 	.word	0x08003379
 800336c:	08003381 	.word	0x08003381
 8003370:	08003391 	.word	0x08003391
 8003374:	080033a1 	.word	0x080033a1
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8003378:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <icm20948_gyro_full_scale_select+0x80>)
 800337a:	4a13      	ldr	r2, [pc, #76]	@ (80033c8 <icm20948_gyro_full_scale_select+0x84>)
 800337c:	601a      	str	r2, [r3, #0]
			break;
 800337e:	e017      	b.n	80033b0 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8003388:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <icm20948_gyro_full_scale_select+0x80>)
 800338a:	4a10      	ldr	r2, [pc, #64]	@ (80033cc <icm20948_gyro_full_scale_select+0x88>)
 800338c:	601a      	str	r2, [r3, #0]
			break;
 800338e:	e00f      	b.n	80033b0 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	f043 0304 	orr.w	r3, r3, #4
 8003396:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8003398:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <icm20948_gyro_full_scale_select+0x80>)
 800339a:	4a0d      	ldr	r2, [pc, #52]	@ (80033d0 <icm20948_gyro_full_scale_select+0x8c>)
 800339c:	601a      	str	r2, [r3, #0]
			break;
 800339e:	e007      	b.n	80033b0 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	f043 0306 	orr.w	r3, r3, #6
 80033a6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <icm20948_gyro_full_scale_select+0x80>)
 80033aa:	4a0a      	ldr	r2, [pc, #40]	@ (80033d4 <icm20948_gyro_full_scale_select+0x90>)
 80033ac:	601a      	str	r2, [r3, #0]
			break;
 80033ae:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	461a      	mov	r2, r3
 80033b4:	2101      	movs	r1, #1
 80033b6:	2020      	movs	r0, #32
 80033b8:	f000 f8b2 	bl	8003520 <write_single_icm20948_reg>
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	200002f0 	.word	0x200002f0
 80033c8:	43030000 	.word	0x43030000
 80033cc:	42830000 	.word	0x42830000
 80033d0:	42033333 	.word	0x42033333
 80033d4:	41833333 	.word	0x41833333

080033d8 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80033e2:	2114      	movs	r1, #20
 80033e4:	2020      	movs	r0, #32
 80033e6:	f000 f86f 	bl	80034c8 <read_single_icm20948_reg>
 80033ea:	4603      	mov	r3, r0
 80033ec:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d82b      	bhi.n	800344c <icm20948_accel_full_scale_select+0x74>
 80033f4:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <icm20948_accel_full_scale_select+0x24>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	08003417 	.word	0x08003417
 8003404:	08003429 	.word	0x08003429
 8003408:	0800343b 	.word	0x0800343b
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 800340c:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <icm20948_accel_full_scale_select+0x88>)
 800340e:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8003412:	601a      	str	r2, [r3, #0]
			break;
 8003414:	e01a      	b.n	800344c <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 800341e:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <icm20948_accel_full_scale_select+0x88>)
 8003420:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8003424:	601a      	str	r2, [r3, #0]
			break;
 8003426:	e011      	b.n	800344c <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <icm20948_accel_full_scale_select+0x88>)
 8003432:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8003436:	601a      	str	r2, [r3, #0]
			break;
 8003438:	e008      	b.n	800344c <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	f043 0306 	orr.w	r3, r3, #6
 8003440:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8003442:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <icm20948_accel_full_scale_select+0x88>)
 8003444:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8003448:	601a      	str	r2, [r3, #0]
			break;
 800344a:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	461a      	mov	r2, r3
 8003450:	2114      	movs	r1, #20
 8003452:	2020      	movs	r0, #32
 8003454:	f000 f864 	bl	8003520 <write_single_icm20948_reg>
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	200002f4 	.word	0x200002f4

08003464 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8003468:	2201      	movs	r2, #1
 800346a:	2110      	movs	r1, #16
 800346c:	4802      	ldr	r0, [pc, #8]	@ (8003478 <cs_high+0x14>)
 800346e:	f001 fc07 	bl	8004c80 <HAL_GPIO_WritePin>
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40020000 	.word	0x40020000

0800347c <cs_low>:

static void cs_low()
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8003480:	2200      	movs	r2, #0
 8003482:	2110      	movs	r1, #16
 8003484:	4802      	ldr	r0, [pc, #8]	@ (8003490 <cs_low+0x14>)
 8003486:	f001 fbfb 	bl	8004c80 <HAL_GPIO_WritePin>
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40020000 	.word	0x40020000

08003494 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 800349e:	237f      	movs	r3, #127	@ 0x7f
 80034a0:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	737b      	strb	r3, [r7, #13]

	cs_low();
 80034a6:	f7ff ffe9 	bl	800347c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80034aa:	f107 010c 	add.w	r1, r7, #12
 80034ae:	230a      	movs	r3, #10
 80034b0:	2202      	movs	r2, #2
 80034b2:	4804      	ldr	r0, [pc, #16]	@ (80034c4 <select_user_bank+0x30>)
 80034b4:	f002 fa39 	bl	800592a <HAL_SPI_Transmit>
	cs_high();
 80034b8:	f7ff ffd4 	bl	8003464 <cs_high>
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000358 	.word	0x20000358

080034c8 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	460a      	mov	r2, r1
 80034d2:	71fb      	strb	r3, [r7, #7]
 80034d4:	4613      	mov	r3, r2
 80034d6:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 80034d8:	79bb      	ldrb	r3, [r7, #6]
 80034da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ffd5 	bl	8003494 <select_user_bank>

	cs_low();
 80034ea:	f7ff ffc7 	bl	800347c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80034ee:	f107 010f 	add.w	r1, r7, #15
 80034f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034f6:	2201      	movs	r2, #1
 80034f8:	4808      	ldr	r0, [pc, #32]	@ (800351c <read_single_icm20948_reg+0x54>)
 80034fa:	f002 fa16 	bl	800592a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80034fe:	f107 010e 	add.w	r1, r7, #14
 8003502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003506:	2201      	movs	r2, #1
 8003508:	4804      	ldr	r0, [pc, #16]	@ (800351c <read_single_icm20948_reg+0x54>)
 800350a:	f002 fb51 	bl	8005bb0 <HAL_SPI_Receive>
	cs_high();
 800350e:	f7ff ffa9 	bl	8003464 <cs_high>

	return reg_val;
 8003512:	7bbb      	ldrb	r3, [r7, #14]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000358 	.word	0x20000358

08003520 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
 800352a:	460b      	mov	r3, r1
 800352c:	71bb      	strb	r3, [r7, #6]
 800352e:	4613      	mov	r3, r2
 8003530:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8003532:	79bb      	ldrb	r3, [r7, #6]
 8003534:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8003536:	797b      	ldrb	r3, [r7, #5]
 8003538:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ffa9 	bl	8003494 <select_user_bank>

	cs_low();
 8003542:	f7ff ff9b 	bl	800347c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8003546:	f107 010c 	add.w	r1, r7, #12
 800354a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800354e:	2202      	movs	r2, #2
 8003550:	4804      	ldr	r0, [pc, #16]	@ (8003564 <write_single_icm20948_reg+0x44>)
 8003552:	f002 f9ea 	bl	800592a <HAL_SPI_Transmit>
	cs_high();
 8003556:	f7ff ff85 	bl	8003464 <cs_high>
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000358 	.word	0x20000358

08003568 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
 8003572:	460b      	mov	r3, r1
 8003574:	71bb      	strb	r3, [r7, #6]
 8003576:	4613      	mov	r3, r2
 8003578:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 800357a:	79bb      	ldrb	r3, [r7, #6]
 800357c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003580:	b2db      	uxtb	r3, r3
 8003582:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff84 	bl	8003494 <select_user_bank>

	cs_low();
 800358c:	f7ff ff76 	bl	800347c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8003590:	f107 010f 	add.w	r1, r7, #15
 8003594:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003598:	2201      	movs	r2, #1
 800359a:	4809      	ldr	r0, [pc, #36]	@ (80035c0 <read_multiple_icm20948_reg+0x58>)
 800359c:	f002 f9c5 	bl	800592a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80035a0:	797b      	ldrb	r3, [r7, #5]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035a8:	4906      	ldr	r1, [pc, #24]	@ (80035c4 <read_multiple_icm20948_reg+0x5c>)
 80035aa:	4805      	ldr	r0, [pc, #20]	@ (80035c0 <read_multiple_icm20948_reg+0x58>)
 80035ac:	f002 fb00 	bl	8005bb0 <HAL_SPI_Receive>
	cs_high();
 80035b0:	f7ff ff58 	bl	8003464 <cs_high>

	return reg_val;
 80035b4:	4b03      	ldr	r3, [pc, #12]	@ (80035c4 <read_multiple_icm20948_reg+0x5c>)
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000358 	.word	0x20000358
 80035c4:	200002f8 	.word	0x200002f8

080035c8 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	603a      	str	r2, [r7, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
 80035d6:	460b      	mov	r3, r1
 80035d8:	71bb      	strb	r3, [r7, #6]
 80035da:	4613      	mov	r3, r2
 80035dc:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 80035de:	79bb      	ldrb	r3, [r7, #6]
 80035e0:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff55 	bl	8003494 <select_user_bank>

	cs_low();
 80035ea:	f7ff ff47 	bl	800347c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 80035ee:	f107 010f 	add.w	r1, r7, #15
 80035f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035f6:	2201      	movs	r2, #1
 80035f8:	4808      	ldr	r0, [pc, #32]	@ (800361c <write_multiple_icm20948_reg+0x54>)
 80035fa:	f002 f996 	bl	800592a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 80035fe:	797b      	ldrb	r3, [r7, #5]
 8003600:	b29a      	uxth	r2, r3
 8003602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003606:	6839      	ldr	r1, [r7, #0]
 8003608:	4804      	ldr	r0, [pc, #16]	@ (800361c <write_multiple_icm20948_reg+0x54>)
 800360a:	f002 f98e 	bl	800592a <HAL_SPI_Transmit>
	cs_high();
 800360e:	f7ff ff29 	bl	8003464 <cs_high>
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000358 	.word	0x20000358

08003620 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800362a:	228c      	movs	r2, #140	@ 0x8c
 800362c:	2103      	movs	r1, #3
 800362e:	2030      	movs	r0, #48	@ 0x30
 8003630:	f7ff ff76 	bl	8003520 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	461a      	mov	r2, r3
 8003638:	2104      	movs	r1, #4
 800363a:	2030      	movs	r0, #48	@ 0x30
 800363c:	f7ff ff70 	bl	8003520 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8003640:	2281      	movs	r2, #129	@ 0x81
 8003642:	2105      	movs	r1, #5
 8003644:	2030      	movs	r0, #48	@ 0x30
 8003646:	f7ff ff6b 	bl	8003520 <write_single_icm20948_reg>

	HAL_Delay(1);
 800364a:	2001      	movs	r0, #1
 800364c:	f001 f882 	bl	8004754 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8003650:	213b      	movs	r1, #59	@ 0x3b
 8003652:	2000      	movs	r0, #0
 8003654:	f7ff ff38 	bl	80034c8 <read_single_icm20948_reg>
 8003658:	4603      	mov	r3, r0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	460a      	mov	r2, r1
 800366c:	71fb      	strb	r3, [r7, #7]
 800366e:	4613      	mov	r3, r2
 8003670:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8003672:	220c      	movs	r2, #12
 8003674:	2103      	movs	r1, #3
 8003676:	2030      	movs	r0, #48	@ 0x30
 8003678:	f7ff ff52 	bl	8003520 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	461a      	mov	r2, r3
 8003680:	2104      	movs	r1, #4
 8003682:	2030      	movs	r0, #48	@ 0x30
 8003684:	f7ff ff4c 	bl	8003520 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8003688:	79bb      	ldrb	r3, [r7, #6]
 800368a:	461a      	mov	r2, r3
 800368c:	2106      	movs	r1, #6
 800368e:	2030      	movs	r0, #48	@ 0x30
 8003690:	f7ff ff46 	bl	8003520 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8003694:	2281      	movs	r2, #129	@ 0x81
 8003696:	2105      	movs	r1, #5
 8003698:	2030      	movs	r0, #48	@ 0x30
 800369a:	f7ff ff41 	bl	8003520 <write_single_icm20948_reg>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	460a      	mov	r2, r1
 80036b0:	71fb      	strb	r3, [r7, #7]
 80036b2:	4613      	mov	r3, r2
 80036b4:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80036b6:	228c      	movs	r2, #140	@ 0x8c
 80036b8:	2103      	movs	r1, #3
 80036ba:	2030      	movs	r0, #48	@ 0x30
 80036bc:	f7ff ff30 	bl	8003520 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	461a      	mov	r2, r3
 80036c4:	2104      	movs	r1, #4
 80036c6:	2030      	movs	r0, #48	@ 0x30
 80036c8:	f7ff ff2a 	bl	8003520 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 80036cc:	79bb      	ldrb	r3, [r7, #6]
 80036ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	2105      	movs	r1, #5
 80036d8:	2030      	movs	r0, #48	@ 0x30
 80036da:	f7ff ff21 	bl	8003520 <write_single_icm20948_reg>

	HAL_Delay(1);
 80036de:	2001      	movs	r0, #1
 80036e0:	f001 f838 	bl	8004754 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 80036e4:	79bb      	ldrb	r3, [r7, #6]
 80036e6:	461a      	mov	r2, r3
 80036e8:	213b      	movs	r1, #59	@ 0x3b
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff ff3c 	bl	8003568 <read_multiple_icm20948_reg>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <_write>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	b29a      	uxth	r2, r3
 800370c:	f04f 33ff 	mov.w	r3, #4294967295
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	4804      	ldr	r0, [pc, #16]	@ (8003724 <_write+0x28>)
 8003714:	f002 fe94 	bl	8006440 <HAL_UART_Transmit>
    return len;
 8003718:	687b      	ldr	r3, [r7, #4]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200003f8 	.word	0x200003f8

08003728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800372c:	b09b      	sub	sp, #108	@ 0x6c
 800372e:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	    HAL_Init();
 8003730:	f000 ffa1 	bl	8004676 <HAL_Init>
	    SystemClock_Config();
 8003734:	f000 fbb0 	bl	8003e98 <SystemClock_Config>

	    #define MAX_SAME_VALUE_COUNT 5

	    float last_accel_x = 0.0f;  // Dernière valeur de l'accéléromètre pour X
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	    float last_accel_y = 0.0f;  // Dernière valeur de l'accéléromètre pour Y
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	64bb      	str	r3, [r7, #72]	@ 0x48
	    int same_value_count_x = 0; // Compteur des mêmes valeurs pour X
 8003744:	2300      	movs	r3, #0
 8003746:	647b      	str	r3, [r7, #68]	@ 0x44
	    int same_value_count_y = 0; // Compteur des mêmes valeurs pour Y
 8003748:	2300      	movs	r3, #0
 800374a:	643b      	str	r3, [r7, #64]	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800374c:	f000 ff93 	bl	8004676 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003750:	f000 fba2 	bl	8003e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003754:	f000 fcd2 	bl	80040fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003758:	f000 fc7c 	bl	8004054 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800375c:	f000 fbe4 	bl	8003f28 <MX_SPI2_Init>
  MX_SPI3_Init();
 8003760:	f000 fc18 	bl	8003f94 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8003764:	f000 fc4c 	bl	8004000 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003768:	f000 fc9e 	bl	80040a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data;
 		    printf("Coucou accéléromètre");
 800376c:	4829      	ldr	r0, [pc, #164]	@ (8003814 <main+0xec>)
 800376e:	f003 fded 	bl	800734c <iprintf>
 		    icm20948_init();
 8003772:	f7ff f8e1 	bl	8002938 <icm20948_init>
 		     ak09916_init();
 8003776:	f7ff f90d 	bl	8002994 <ak09916_init>
  /* USER CODE END 2 */

 		    /* Boucle infinie */
 		    /* USER CODE BEGIN WHILE */
 		   /* Configuration du capteur et initialisation des directions */
 		    HAL_Delay(1000);
 800377a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800377e:	f000 ffe9 	bl	8004754 <HAL_Delay>

 		    /* Activation, initialisation et désactivation de chaque capteur */

 		    BME280_CONFIG_SETUP_N();
 8003782:	f7fe f9bd 	bl	8001b00 <BME280_CONFIG_SETUP_N>
 		      BME280_GET_COMP_VALS_N();
 8003786:	f7fe fa6d 	bl	8001c64 <BME280_GET_COMP_VALS_N>
 		      HAL_Delay(1000);
 800378a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800378e:	f000 ffe1 	bl	8004754 <HAL_Delay>
 		    BME280_CONFIG_SETUP_ref();
 8003792:	f7fd fe51 	bl	8001438 <BME280_CONFIG_SETUP_ref>
 		    BME280_GET_COMP_VALS_ref();
 8003796:	f7fd ff01 	bl	800159c <BME280_GET_COMP_VALS_ref>

 		    HAL_Delay(1000);
 800379a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800379e:	f000 ffd9 	bl	8004754 <HAL_Delay>




 		    Barometer_init_E();
 80037a2:	f7ff f89f 	bl	80028e4 <Barometer_init_E>

 		    HAL_Delay(1000);
 80037a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037aa:	f000 ffd3 	bl	8004754 <HAL_Delay>

 		    BME280_CONFIG_SETUP_N();
 80037ae:	f7fe f9a7 	bl	8001b00 <BME280_CONFIG_SETUP_N>
 		        BME280_GET_COMP_VALS_N();
 80037b2:	f7fe fa57 	bl	8001c64 <BME280_GET_COMP_VALS_N>


 		    printf("coucou Baromètre \n\r");
 80037b6:	4818      	ldr	r0, [pc, #96]	@ (8003818 <main+0xf0>)
 80037b8:	f003 fdc8 	bl	800734c <iprintf>
	    while (1)
	    {
	        HAL_Delay(300);
 80037bc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80037c0:	f000 ffc8 	bl	8004754 <HAL_Delay>
	        icm20948_wakeup();
 80037c4:	f7ff fad8 	bl	8002d78 <icm20948_wakeup>
	        // Lire les données des capteurs
	        icm20948_gyro_read_dps(&my_gyro);
 80037c8:	4814      	ldr	r0, [pc, #80]	@ (800381c <main+0xf4>)
 80037ca:	f7ff f9df 	bl	8002b8c <icm20948_gyro_read_dps>
	        icm20948_accel_read_g(&my_accel);
 80037ce:	4814      	ldr	r0, [pc, #80]	@ (8003820 <main+0xf8>)
 80037d0:	f7ff fa0e 	bl	8002bf0 <icm20948_accel_read_g>
	        ak09916_mag_read_uT(&my_mag);
 80037d4:	4813      	ldr	r0, [pc, #76]	@ (8003824 <main+0xfc>)
 80037d6:	f7ff fa3f 	bl	8002c58 <ak09916_mag_read_uT>

	        // Vérification pour l'axe X
	            if (my_accel.x == last_accel_x)
 80037da:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <main+0xf8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4619      	mov	r1, r3
 80037e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80037e2:	f7fd fc5b 	bl	800109c <__aeabi_fcmpeq>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <main+0xcc>
	            {
	                same_value_count_x++;
 80037ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ee:	3301      	adds	r3, #1
 80037f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f2:	e001      	b.n	80037f8 <main+0xd0>
	            }
	            else
	            {
	                same_value_count_x = 0; // Réinitialiser le compteur si la valeur change
 80037f4:	2300      	movs	r3, #0
 80037f6:	647b      	str	r3, [r7, #68]	@ 0x44
	            }

	            // Vérification pour l'axe Y
	            if (my_accel.y == last_accel_y)
 80037f8:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <main+0xf8>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4619      	mov	r1, r3
 80037fe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003800:	f7fd fc4c 	bl	800109c <__aeabi_fcmpeq>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00e      	beq.n	8003828 <main+0x100>
	            {
	                same_value_count_y++;
 800380a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800380c:	3301      	adds	r3, #1
 800380e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003810:	e00c      	b.n	800382c <main+0x104>
 8003812:	bf00      	nop
 8003814:	0800a4fc 	.word	0x0800a4fc
 8003818:	0800a514 	.word	0x0800a514
 800381c:	20000488 	.word	0x20000488
 8003820:	20000494 	.word	0x20000494
 8003824:	200004a0 	.word	0x200004a0
	            }
	            else
	            {
	                same_value_count_y = 0; // Réinitialiser le compteur si la valeur change
 8003828:	2300      	movs	r3, #0
 800382a:	643b      	str	r3, [r7, #64]	@ 0x40
	            }

	            // Si les valeurs de X et Y restent constantes pendant 5 itérations
	            if (same_value_count_x >= MAX_SAME_VALUE_COUNT && same_value_count_y >= MAX_SAME_VALUE_COUNT)
 800382c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800382e:	2b04      	cmp	r3, #4
 8003830:	dd0d      	ble.n	800384e <main+0x126>
 8003832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003834:	2b04      	cmp	r3, #4
 8003836:	dd0a      	ble.n	800384e <main+0x126>
	            {
	                printf("Valeurs constantes détectées sur X et Y. Réinitialisation du programme.\n");
 8003838:	48ad      	ldr	r0, [pc, #692]	@ (8003af0 <main+0x3c8>)
 800383a:	f003 fdef 	bl	800741c <puts>

	                // Réinitialiser le capteur
	                icm20948_init();
 800383e:	f7ff f87b 	bl	8002938 <icm20948_init>
	                ak09916_init();
 8003842:	f7ff f8a7 	bl	8002994 <ak09916_init>

	                // Réinitialiser les compteurs
	                same_value_count_x = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	647b      	str	r3, [r7, #68]	@ 0x44
	                same_value_count_y = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	643b      	str	r3, [r7, #64]	@ 0x40

	                // Réinitialisation éventuelle d'autres ressources si nécessaire
	            }

	            // Mettre à jour les dernières valeurs lues
	            last_accel_x = my_accel.x;
 800384e:	4ba9      	ldr	r3, [pc, #676]	@ (8003af4 <main+0x3cc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	64fb      	str	r3, [r7, #76]	@ 0x4c
	            last_accel_y = my_accel.y;
 8003854:	4ba7      	ldr	r3, [pc, #668]	@ (8003af4 <main+0x3cc>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	64bb      	str	r3, [r7, #72]	@ 0x48

	        // Afficher les données (ajouter vos fonctions d'affichage ici)
	        printf("Gyro: x = %f, y = %f, z = %f\n\r", my_gyro.x, my_gyro.y, my_gyro.z);
 800385a:	4ba7      	ldr	r3, [pc, #668]	@ (8003af8 <main+0x3d0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fdfa 	bl	8000458 <__aeabi_f2d>
 8003864:	4680      	mov	r8, r0
 8003866:	4689      	mov	r9, r1
 8003868:	4ba3      	ldr	r3, [pc, #652]	@ (8003af8 <main+0x3d0>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fc fdf3 	bl	8000458 <__aeabi_f2d>
 8003872:	4604      	mov	r4, r0
 8003874:	460d      	mov	r5, r1
 8003876:	4ba0      	ldr	r3, [pc, #640]	@ (8003af8 <main+0x3d0>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fdec 	bl	8000458 <__aeabi_f2d>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003888:	e9cd 4500 	strd	r4, r5, [sp]
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	489a      	ldr	r0, [pc, #616]	@ (8003afc <main+0x3d4>)
 8003892:	f003 fd5b 	bl	800734c <iprintf>
	        printf("Accel: x = %f, y = %f, z = %f\n\r", my_accel.x, my_accel.y, my_accel.z);
 8003896:	4b97      	ldr	r3, [pc, #604]	@ (8003af4 <main+0x3cc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fc fddc 	bl	8000458 <__aeabi_f2d>
 80038a0:	4680      	mov	r8, r0
 80038a2:	4689      	mov	r9, r1
 80038a4:	4b93      	ldr	r3, [pc, #588]	@ (8003af4 <main+0x3cc>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fdd5 	bl	8000458 <__aeabi_f2d>
 80038ae:	4604      	mov	r4, r0
 80038b0:	460d      	mov	r5, r1
 80038b2:	4b90      	ldr	r3, [pc, #576]	@ (8003af4 <main+0x3cc>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fdce 	bl	8000458 <__aeabi_f2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038c4:	e9cd 4500 	strd	r4, r5, [sp]
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	488c      	ldr	r0, [pc, #560]	@ (8003b00 <main+0x3d8>)
 80038ce:	f003 fd3d 	bl	800734c <iprintf>
	        printf("Mag: x = %f, y = %f, z = %f\n\r", my_mag.x, my_mag.y, my_mag.z);
 80038d2:	4b8c      	ldr	r3, [pc, #560]	@ (8003b04 <main+0x3dc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fc fdbe 	bl	8000458 <__aeabi_f2d>
 80038dc:	4680      	mov	r8, r0
 80038de:	4689      	mov	r9, r1
 80038e0:	4b88      	ldr	r3, [pc, #544]	@ (8003b04 <main+0x3dc>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fdb7 	bl	8000458 <__aeabi_f2d>
 80038ea:	4604      	mov	r4, r0
 80038ec:	460d      	mov	r5, r1
 80038ee:	4b85      	ldr	r3, [pc, #532]	@ (8003b04 <main+0x3dc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fc fdb0 	bl	8000458 <__aeabi_f2d>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003900:	e9cd 4500 	strd	r4, r5, [sp]
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	487f      	ldr	r0, [pc, #508]	@ (8003b08 <main+0x3e0>)
 800390a:	f003 fd1f 	bl	800734c <iprintf>
	        icm20948_sleep();
 800390e:	f7ff fa4d 	bl	8002dac <icm20948_sleep>
	        //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
	        // PARTIE BME//
	        //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
	        BME280_GET_RAW_VALS_ref();
 8003912:	f7fd fdf1 	bl	80014f8 <BME280_GET_RAW_VALS_ref>
	           BME280_CALC_FINAL_VALS_ref();
 8003916:	f7fd ff8d 	bl	8001834 <BME280_CALC_FINAL_VALS_ref>
	           printf("REF, Temperature: %d.%02d°C, Pressure: %d.%02d hPa\n\r",
 800391a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b0c <main+0x3e4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b10 <main+0x3e8>)
 8003920:	fb82 1203 	smull	r1, r2, r2, r3
 8003924:	1152      	asrs	r2, r2, #5
 8003926:	17db      	asrs	r3, r3, #31
 8003928:	1ad0      	subs	r0, r2, r3
 800392a:	4b78      	ldr	r3, [pc, #480]	@ (8003b0c <main+0x3e4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a78      	ldr	r2, [pc, #480]	@ (8003b10 <main+0x3e8>)
 8003930:	fb82 1203 	smull	r1, r2, r2, r3
 8003934:	1151      	asrs	r1, r2, #5
 8003936:	17da      	asrs	r2, r3, #31
 8003938:	1a8a      	subs	r2, r1, r2
 800393a:	2164      	movs	r1, #100	@ 0x64
 800393c:	fb01 f202 	mul.w	r2, r1, r2
 8003940:	1a9a      	subs	r2, r3, r2
 8003942:	4b74      	ldr	r3, [pc, #464]	@ (8003b14 <main+0x3ec>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4972      	ldr	r1, [pc, #456]	@ (8003b10 <main+0x3e8>)
 8003948:	fba1 1303 	umull	r1, r3, r1, r3
 800394c:	095c      	lsrs	r4, r3, #5
 800394e:	4b71      	ldr	r3, [pc, #452]	@ (8003b14 <main+0x3ec>)
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	4b6f      	ldr	r3, [pc, #444]	@ (8003b10 <main+0x3e8>)
 8003954:	fba3 5301 	umull	r5, r3, r3, r1
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	2564      	movs	r5, #100	@ 0x64
 800395c:	fb05 f303 	mul.w	r3, r5, r3
 8003960:	1acb      	subs	r3, r1, r3
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4623      	mov	r3, r4
 8003966:	4601      	mov	r1, r0
 8003968:	486b      	ldr	r0, [pc, #428]	@ (8003b18 <main+0x3f0>)
 800396a:	f003 fcef 	bl	800734c <iprintf>
	                   finaltemp_ref / 100, finaltemp_ref % 100, finalpressure_ref/100,finalpressure_ref%100);
	           HAL_Delay(1000); // A conserver, le capteur génère des erreurs autrement
 800396e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003972:	f000 feef 	bl	8004754 <HAL_Delay>

	           // Lecture des données pour le capteur EXT, extérieur de la nacelle
	           BME280_GET_RAW_VALS_N();
 8003976:	f7fe f923 	bl	8001bc0 <BME280_GET_RAW_VALS_N>
	           BME280_CALC_FINAL_VALS_N();
 800397a:	f7fe fabf 	bl	8001efc <BME280_CALC_FINAL_VALS_N>
	           printf("NORTH, Temperature: %d.%02d°C, Pressure: %d.%02d hPa\n\r",
 800397e:	4b67      	ldr	r3, [pc, #412]	@ (8003b1c <main+0x3f4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a63      	ldr	r2, [pc, #396]	@ (8003b10 <main+0x3e8>)
 8003984:	fb82 1203 	smull	r1, r2, r2, r3
 8003988:	1152      	asrs	r2, r2, #5
 800398a:	17db      	asrs	r3, r3, #31
 800398c:	1ad0      	subs	r0, r2, r3
 800398e:	4b63      	ldr	r3, [pc, #396]	@ (8003b1c <main+0x3f4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5f      	ldr	r2, [pc, #380]	@ (8003b10 <main+0x3e8>)
 8003994:	fb82 1203 	smull	r1, r2, r2, r3
 8003998:	1151      	asrs	r1, r2, #5
 800399a:	17da      	asrs	r2, r3, #31
 800399c:	1a8a      	subs	r2, r1, r2
 800399e:	2164      	movs	r1, #100	@ 0x64
 80039a0:	fb01 f202 	mul.w	r2, r1, r2
 80039a4:	1a9a      	subs	r2, r3, r2
 80039a6:	4b5e      	ldr	r3, [pc, #376]	@ (8003b20 <main+0x3f8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4959      	ldr	r1, [pc, #356]	@ (8003b10 <main+0x3e8>)
 80039ac:	fba1 1303 	umull	r1, r3, r1, r3
 80039b0:	095c      	lsrs	r4, r3, #5
 80039b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b20 <main+0x3f8>)
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	4b56      	ldr	r3, [pc, #344]	@ (8003b10 <main+0x3e8>)
 80039b8:	fba3 5301 	umull	r5, r3, r3, r1
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	2564      	movs	r5, #100	@ 0x64
 80039c0:	fb05 f303 	mul.w	r3, r5, r3
 80039c4:	1acb      	subs	r3, r1, r3
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	4623      	mov	r3, r4
 80039ca:	4601      	mov	r1, r0
 80039cc:	4855      	ldr	r0, [pc, #340]	@ (8003b24 <main+0x3fc>)
 80039ce:	f003 fcbd 	bl	800734c <iprintf>
	                   finaltemp_N / 100, finaltemp_N % 100, finalpressure_N/100,finalpressure_N%100);
	           HAL_Delay(1000);
 80039d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039d6:	f000 febd 	bl	8004754 <HAL_Delay>

	           // Lecture des données pour le baromètre - intérieur de la nacelle

	           int32_t pressure = Barometer_getPressure_E(true);
 80039da:	2001      	movs	r0, #1
 80039dc:	f7fe ff9a 	bl	8002914 <Barometer_getPressure_E>
 80039e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	           int32_t temp = Barometer_getTemp_E(true);
 80039e2:	2001      	movs	r0, #1
 80039e4:	f7fe ff84 	bl	80028f0 <Barometer_getTemp_E>
 80039e8:	63b8      	str	r0, [r7, #56]	@ 0x38


	           printf("EST, Temperature: %d.%02d°C, Pressure: %d.%02d hPa\n\r",
 80039ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ec:	4a48      	ldr	r2, [pc, #288]	@ (8003b10 <main+0x3e8>)
 80039ee:	fb82 1203 	smull	r1, r2, r2, r3
 80039f2:	1152      	asrs	r2, r2, #5
 80039f4:	17db      	asrs	r3, r3, #31
 80039f6:	1ad4      	subs	r4, r2, r3
 80039f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fa:	4a45      	ldr	r2, [pc, #276]	@ (8003b10 <main+0x3e8>)
 80039fc:	fb82 1203 	smull	r1, r2, r2, r3
 8003a00:	1151      	asrs	r1, r2, #5
 8003a02:	17da      	asrs	r2, r3, #31
 8003a04:	1a89      	subs	r1, r1, r2
 8003a06:	2264      	movs	r2, #100	@ 0x64
 8003a08:	fb01 f202 	mul.w	r2, r1, r2
 8003a0c:	1a99      	subs	r1, r3, r2
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a10:	4a3f      	ldr	r2, [pc, #252]	@ (8003b10 <main+0x3e8>)
 8003a12:	fb82 0203 	smull	r0, r2, r2, r3
 8003a16:	1152      	asrs	r2, r2, #5
 8003a18:	17db      	asrs	r3, r3, #31
 8003a1a:	1ad5      	subs	r5, r2, r3
 8003a1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b10 <main+0x3e8>)
 8003a20:	fb83 0302 	smull	r0, r3, r3, r2
 8003a24:	1158      	asrs	r0, r3, #5
 8003a26:	17d3      	asrs	r3, r2, #31
 8003a28:	1ac3      	subs	r3, r0, r3
 8003a2a:	2064      	movs	r0, #100	@ 0x64
 8003a2c:	fb00 f303 	mul.w	r3, r0, r3
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	462b      	mov	r3, r5
 8003a36:	460a      	mov	r2, r1
 8003a38:	4621      	mov	r1, r4
 8003a3a:	483b      	ldr	r0, [pc, #236]	@ (8003b28 <main+0x400>)
 8003a3c:	f003 fc86 	bl	800734c <iprintf>
	                   temp/100, temp%100,pressure/100, pressure%100);

	           HAL_Delay(1000);
 8003a40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a44:	f000 fe86 	bl	8004754 <HAL_Delay>
	           //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
	         	        // PARTIE Transmission série Kikiwi//
	         	        //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
	           // %%% transmission capteur ref %%%
	           // Attention à l'écriture du format : une erreur commise a été d'écrire %d.%02  au lieu de %d.%02d, ce qui a bloqué les mesures d'humidité en phase de tests
	           snprintf(buf2, sizeof(buf2), "%03d.%02d°C ;%d.%02d hPa ;%d.%02drH ;\n", finaltemp_ref / 100, finaltemp_ref % 100, finalpressure_ref/100,finalpressure_ref%100,final_humidity_ref/1024, final_humidity_ref%1024);
 8003a48:	4b30      	ldr	r3, [pc, #192]	@ (8003b0c <main+0x3e4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a30      	ldr	r2, [pc, #192]	@ (8003b10 <main+0x3e8>)
 8003a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8003a52:	1152      	asrs	r2, r2, #5
 8003a54:	17db      	asrs	r3, r3, #31
 8003a56:	1ad6      	subs	r6, r2, r3
 8003a58:	4b2c      	ldr	r3, [pc, #176]	@ (8003b0c <main+0x3e4>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b10 <main+0x3e8>)
 8003a5e:	fb83 1302 	smull	r1, r3, r3, r2
 8003a62:	1159      	asrs	r1, r3, #5
 8003a64:	17d3      	asrs	r3, r2, #31
 8003a66:	1acb      	subs	r3, r1, r3
 8003a68:	2164      	movs	r1, #100	@ 0x64
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	4a28      	ldr	r2, [pc, #160]	@ (8003b14 <main+0x3ec>)
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	4926      	ldr	r1, [pc, #152]	@ (8003b10 <main+0x3e8>)
 8003a76:	fba1 1202 	umull	r1, r2, r1, r2
 8003a7a:	0950      	lsrs	r0, r2, #5
 8003a7c:	4a25      	ldr	r2, [pc, #148]	@ (8003b14 <main+0x3ec>)
 8003a7e:	6811      	ldr	r1, [r2, #0]
 8003a80:	4a23      	ldr	r2, [pc, #140]	@ (8003b10 <main+0x3e8>)
 8003a82:	fba2 4201 	umull	r4, r2, r2, r1
 8003a86:	0952      	lsrs	r2, r2, #5
 8003a88:	2464      	movs	r4, #100	@ 0x64
 8003a8a:	fb04 f202 	mul.w	r2, r4, r2
 8003a8e:	1a8a      	subs	r2, r1, r2
 8003a90:	4926      	ldr	r1, [pc, #152]	@ (8003b2c <main+0x404>)
 8003a92:	6809      	ldr	r1, [r1, #0]
 8003a94:	0a89      	lsrs	r1, r1, #10
 8003a96:	4c25      	ldr	r4, [pc, #148]	@ (8003b2c <main+0x404>)
 8003a98:	6824      	ldr	r4, [r4, #0]
 8003a9a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003a9e:	f107 0508 	add.w	r5, r7, #8
 8003aa2:	9404      	str	r4, [sp, #16]
 8003aa4:	9103      	str	r1, [sp, #12]
 8003aa6:	9202      	str	r2, [sp, #8]
 8003aa8:	9001      	str	r0, [sp, #4]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	4633      	mov	r3, r6
 8003aae:	4a20      	ldr	r2, [pc, #128]	@ (8003b30 <main+0x408>)
 8003ab0:	2130      	movs	r1, #48	@ 0x30
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f003 fcba 	bl	800742c <sniprintf>
			   HAL_UART_Receive(&huart1, &received_char, 1, HAL_MAX_DELAY); // On attend  que la Kikiwi envoie XON
 8003ab8:	1df9      	adds	r1, r7, #7
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	2201      	movs	r2, #1
 8003ac0:	481c      	ldr	r0, [pc, #112]	@ (8003b34 <main+0x40c>)
 8003ac2:	f002 fd40 	bl	8006546 <HAL_UART_Receive>
			   // Cas où la chaîne KiwiRX est non vide> XON envoyé
			       if (received_char == XON) {
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	2b11      	cmp	r3, #17
 8003aca:	d137      	bne.n	8003b3c <main+0x414>

			           HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY); // transmission BME> Kikiwi au total 31 + 1(caractère \n ) octets
 8003acc:	f107 0308 	add.w	r3, r7, #8
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fc fb55 	bl	8000180 <strlen>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	f107 0108 	add.w	r1, r7, #8
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	4814      	ldr	r0, [pc, #80]	@ (8003b34 <main+0x40c>)
 8003ae4:	f002 fcac 	bl	8006440 <HAL_UART_Transmit>
			           printf("La chaîne KiwiRX est non vide\n\n");
 8003ae8:	4813      	ldr	r0, [pc, #76]	@ (8003b38 <main+0x410>)
 8003aea:	f003 fc97 	bl	800741c <puts>
 8003aee:	e028      	b.n	8003b42 <main+0x41a>
 8003af0:	0800a52c 	.word	0x0800a52c
 8003af4:	20000494 	.word	0x20000494
 8003af8:	20000488 	.word	0x20000488
 8003afc:	0800a578 	.word	0x0800a578
 8003b00:	0800a598 	.word	0x0800a598
 8003b04:	200004a0 	.word	0x200004a0
 8003b08:	0800a5b8 	.word	0x0800a5b8
 8003b0c:	20000264 	.word	0x20000264
 8003b10:	51eb851f 	.word	0x51eb851f
 8003b14:	2000026c 	.word	0x2000026c
 8003b18:	0800a5d8 	.word	0x0800a5d8
 8003b1c:	20000268 	.word	0x20000268
 8003b20:	20000274 	.word	0x20000274
 8003b24:	0800a610 	.word	0x0800a610
 8003b28:	0800a648 	.word	0x0800a648
 8003b2c:	20000270 	.word	0x20000270
 8003b30:	0800a680 	.word	0x0800a680
 8003b34:	200003b0 	.word	0x200003b0
 8003b38:	0800a6a8 	.word	0x0800a6a8
			       }
			       // Cas où la chaîne KiwiRX est vide
			       else
			       	   {
			           printf("La chaîne KiwiRX est vide.\n");
 8003b3c:	489e      	ldr	r0, [pc, #632]	@ (8003db8 <main+0x690>)
 8003b3e:	f003 fc6d 	bl	800741c <puts>

			       }
			       // Nombre  actualisé après l'envoi
			       received_char = 0x00;
 8003b42:	2300      	movs	r3, #0
 8003b44:	71fb      	strb	r3, [r7, #7]

			   // %%% transmission capteur nord %%%
	           HAL_Delay(2680); // a conserver, 300 fonctionne plutôt
 8003b46:	f640 2078 	movw	r0, #2680	@ 0xa78
 8003b4a:	f000 fe03 	bl	8004754 <HAL_Delay>
	           snprintf(buf2, sizeof(buf2), "%03d.%02d°C ;%d.%02d hPa ;%d.%02drH ;\n", finaltemp_N / 100, finaltemp_N % 100, finalpressure_N/100,finalpressure_N%100, final_humidity_N/1024, final_humidity_N%1024);
 8003b4e:	4b9b      	ldr	r3, [pc, #620]	@ (8003dbc <main+0x694>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a9b      	ldr	r2, [pc, #620]	@ (8003dc0 <main+0x698>)
 8003b54:	fb82 1203 	smull	r1, r2, r2, r3
 8003b58:	1152      	asrs	r2, r2, #5
 8003b5a:	17db      	asrs	r3, r3, #31
 8003b5c:	1ad6      	subs	r6, r2, r3
 8003b5e:	4b97      	ldr	r3, [pc, #604]	@ (8003dbc <main+0x694>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b97      	ldr	r3, [pc, #604]	@ (8003dc0 <main+0x698>)
 8003b64:	fb83 1302 	smull	r1, r3, r3, r2
 8003b68:	1159      	asrs	r1, r3, #5
 8003b6a:	17d3      	asrs	r3, r2, #31
 8003b6c:	1acb      	subs	r3, r1, r3
 8003b6e:	2164      	movs	r1, #100	@ 0x64
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	4a93      	ldr	r2, [pc, #588]	@ (8003dc4 <main+0x69c>)
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	4991      	ldr	r1, [pc, #580]	@ (8003dc0 <main+0x698>)
 8003b7c:	fba1 1202 	umull	r1, r2, r1, r2
 8003b80:	0950      	lsrs	r0, r2, #5
 8003b82:	4a90      	ldr	r2, [pc, #576]	@ (8003dc4 <main+0x69c>)
 8003b84:	6811      	ldr	r1, [r2, #0]
 8003b86:	4a8e      	ldr	r2, [pc, #568]	@ (8003dc0 <main+0x698>)
 8003b88:	fba2 4201 	umull	r4, r2, r2, r1
 8003b8c:	0952      	lsrs	r2, r2, #5
 8003b8e:	2464      	movs	r4, #100	@ 0x64
 8003b90:	fb04 f202 	mul.w	r2, r4, r2
 8003b94:	1a8a      	subs	r2, r1, r2
 8003b96:	498c      	ldr	r1, [pc, #560]	@ (8003dc8 <main+0x6a0>)
 8003b98:	6809      	ldr	r1, [r1, #0]
 8003b9a:	0a89      	lsrs	r1, r1, #10
 8003b9c:	4c8a      	ldr	r4, [pc, #552]	@ (8003dc8 <main+0x6a0>)
 8003b9e:	6824      	ldr	r4, [r4, #0]
 8003ba0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003ba4:	f107 0508 	add.w	r5, r7, #8
 8003ba8:	9404      	str	r4, [sp, #16]
 8003baa:	9103      	str	r1, [sp, #12]
 8003bac:	9202      	str	r2, [sp, #8]
 8003bae:	9001      	str	r0, [sp, #4]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	4633      	mov	r3, r6
 8003bb4:	4a85      	ldr	r2, [pc, #532]	@ (8003dcc <main+0x6a4>)
 8003bb6:	2130      	movs	r1, #48	@ 0x30
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f003 fc37 	bl	800742c <sniprintf>
	           HAL_UART_Receive(&huart1, &received_char, 1, HAL_MAX_DELAY); // On attend  que la Kikiwi envoie XON
 8003bbe:	1df9      	adds	r1, r7, #7
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	4882      	ldr	r0, [pc, #520]	@ (8003dd0 <main+0x6a8>)
 8003bc8:	f002 fcbd 	bl	8006546 <HAL_UART_Receive>
	           // Cas où la chaîne KiwiRX est non vide> XON envoyé
	        			       if (received_char == XON) {
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	2b11      	cmp	r3, #17
 8003bd0:	d111      	bne.n	8003bf6 <main+0x4ce>
	        			    	   HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY); // transmission BME> Kikiwi au total 31 + 1(caractère \n ) octets
 8003bd2:	f107 0308 	add.w	r3, r7, #8
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc fad2 	bl	8000180 <strlen>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	f107 0108 	add.w	r1, r7, #8
 8003be4:	f04f 33ff 	mov.w	r3, #4294967295
 8003be8:	4879      	ldr	r0, [pc, #484]	@ (8003dd0 <main+0x6a8>)
 8003bea:	f002 fc29 	bl	8006440 <HAL_UART_Transmit>
	        			    	  			           printf("La chaîne KiwiRX est non vide\n\n");
 8003bee:	4879      	ldr	r0, [pc, #484]	@ (8003dd4 <main+0x6ac>)
 8003bf0:	f003 fc14 	bl	800741c <puts>
 8003bf4:	e002      	b.n	8003bfc <main+0x4d4>
	        			       }
	        			       // Cas où la chaîne KiwiRX est vide
	        			       else
	        			       	   {
	        			           printf("La chaîne KiwiRX est vide.\n");
 8003bf6:	4870      	ldr	r0, [pc, #448]	@ (8003db8 <main+0x690>)
 8003bf8:	f003 fc10 	bl	800741c <puts>
	        			       }
	        			       // Nombre  actualisé après l'envoi
	        			       received_char = 0x00;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	71fb      	strb	r3, [r7, #7]

	           // %%% transmission capteur ref %%%
	           HAL_Delay(2680); // a conserver
 8003c00:	f640 2078 	movw	r0, #2680	@ 0xa78
 8003c04:	f000 fda6 	bl	8004754 <HAL_Delay>
	           snprintf(buf2, sizeof(buf2), "%03d.%02d°C ;%d.%02d hPa ;\n",temp/100, temp%100,pressure/100, pressure%100);
 8003c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003dc0 <main+0x698>)
 8003c0c:	fb82 1203 	smull	r1, r2, r2, r3
 8003c10:	1152      	asrs	r2, r2, #5
 8003c12:	17db      	asrs	r3, r3, #31
 8003c14:	1ad5      	subs	r5, r2, r3
 8003c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c18:	4b69      	ldr	r3, [pc, #420]	@ (8003dc0 <main+0x698>)
 8003c1a:	fb83 1302 	smull	r1, r3, r3, r2
 8003c1e:	1159      	asrs	r1, r3, #5
 8003c20:	17d3      	asrs	r3, r2, #31
 8003c22:	1acb      	subs	r3, r1, r3
 8003c24:	2164      	movs	r1, #100	@ 0x64
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c2e:	4964      	ldr	r1, [pc, #400]	@ (8003dc0 <main+0x698>)
 8003c30:	fb81 0102 	smull	r0, r1, r1, r2
 8003c34:	1149      	asrs	r1, r1, #5
 8003c36:	17d2      	asrs	r2, r2, #31
 8003c38:	1a88      	subs	r0, r1, r2
 8003c3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c3c:	4a60      	ldr	r2, [pc, #384]	@ (8003dc0 <main+0x698>)
 8003c3e:	fb82 4201 	smull	r4, r2, r2, r1
 8003c42:	1154      	asrs	r4, r2, #5
 8003c44:	17ca      	asrs	r2, r1, #31
 8003c46:	1aa2      	subs	r2, r4, r2
 8003c48:	2464      	movs	r4, #100	@ 0x64
 8003c4a:	fb04 f202 	mul.w	r2, r4, r2
 8003c4e:	1a8a      	subs	r2, r1, r2
 8003c50:	f107 0408 	add.w	r4, r7, #8
 8003c54:	9202      	str	r2, [sp, #8]
 8003c56:	9001      	str	r0, [sp, #4]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd8 <main+0x6b0>)
 8003c5e:	2130      	movs	r1, #48	@ 0x30
 8003c60:	4620      	mov	r0, r4
 8003c62:	f003 fbe3 	bl	800742c <sniprintf>
	           HAL_UART_Receive(&huart1, &received_char, 1, HAL_MAX_DELAY); // On attend  que la Kikiwi envoie XON
 8003c66:	1df9      	adds	r1, r7, #7
 8003c68:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	4858      	ldr	r0, [pc, #352]	@ (8003dd0 <main+0x6a8>)
 8003c70:	f002 fc69 	bl	8006546 <HAL_UART_Receive>
	           // Cas où la chaîne KiwiRX est non vide> XON envoyé
	           	        			       if (received_char == XON) {
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	2b11      	cmp	r3, #17
 8003c78:	d111      	bne.n	8003c9e <main+0x576>
	           	        			    	 HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY); // transmission BME> Kikiwi au total 31 + 1(caractère \n ) octets
 8003c7a:	f107 0308 	add.w	r3, r7, #8
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fc fa7e 	bl	8000180 <strlen>
 8003c84:	4603      	mov	r3, r0
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	f107 0108 	add.w	r1, r7, #8
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	484f      	ldr	r0, [pc, #316]	@ (8003dd0 <main+0x6a8>)
 8003c92:	f002 fbd5 	bl	8006440 <HAL_UART_Transmit>
	           	        			    	 printf("La chaîne KiwiRX est non vide\n\n");
 8003c96:	484f      	ldr	r0, [pc, #316]	@ (8003dd4 <main+0x6ac>)
 8003c98:	f003 fbc0 	bl	800741c <puts>
 8003c9c:	e002      	b.n	8003ca4 <main+0x57c>
	           	        			       }
	           	        			       // Cas où la chaîne KiwiRX est vide
	           	        			       else
	           	        			       	   {
	           	        			           printf("La chaîne KiwiRX est vide.\n");
 8003c9e:	4846      	ldr	r0, [pc, #280]	@ (8003db8 <main+0x690>)
 8003ca0:	f003 fbbc 	bl	800741c <puts>

	           	        			       }
	           	        			    // Nombre  actualisé après l'envoi
	           	        			    received_char = 0x00;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	71fb      	strb	r3, [r7, #7]
	           HAL_Delay(2680);
 8003ca8:	f640 2078 	movw	r0, #2680	@ 0xa78
 8003cac:	f000 fd52 	bl	8004754 <HAL_Delay>
	           //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
	         	         	        // PARTIE Transmission Accéléromètre//
	         	         	        //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
	           // %%% transmission accélérations %%%
	          	           snprintf(buf2, sizeof(buf2), "A %03f ;%03f ;%03f ;\n", my_accel.x,  my_accel.y, my_accel.z);
 8003cb0:	4b4a      	ldr	r3, [pc, #296]	@ (8003ddc <main+0x6b4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fbcf 	bl	8000458 <__aeabi_f2d>
 8003cba:	4604      	mov	r4, r0
 8003cbc:	460d      	mov	r5, r1
 8003cbe:	4b47      	ldr	r3, [pc, #284]	@ (8003ddc <main+0x6b4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc fbc8 	bl	8000458 <__aeabi_f2d>
 8003cc8:	4680      	mov	r8, r0
 8003cca:	4689      	mov	r9, r1
 8003ccc:	4b43      	ldr	r3, [pc, #268]	@ (8003ddc <main+0x6b4>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fc fbc1 	bl	8000458 <__aeabi_f2d>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	f107 0008 	add.w	r0, r7, #8
 8003cde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ce2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003ce6:	e9cd 4500 	strd	r4, r5, [sp]
 8003cea:	4a3d      	ldr	r2, [pc, #244]	@ (8003de0 <main+0x6b8>)
 8003cec:	2130      	movs	r1, #48	@ 0x30
 8003cee:	f003 fb9d 	bl	800742c <sniprintf>
	          			   HAL_UART_Receive(&huart1, &received_char, 1, HAL_MAX_DELAY); // On attend  que la Kikiwi envoie XON
 8003cf2:	1df9      	adds	r1, r7, #7
 8003cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	4835      	ldr	r0, [pc, #212]	@ (8003dd0 <main+0x6a8>)
 8003cfc:	f002 fc23 	bl	8006546 <HAL_UART_Receive>
	          			   // Cas où la chaîne KiwiRX est non vide> XON envoyé
	          			       if (received_char == XON) {
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	2b11      	cmp	r3, #17
 8003d04:	d111      	bne.n	8003d2a <main+0x602>

	          			           HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY); // transmission BME> Kikiwi au total 31 + 1(caractère \n ) octets
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fa38 	bl	8000180 <strlen>
 8003d10:	4603      	mov	r3, r0
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	f107 0108 	add.w	r1, r7, #8
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1c:	482c      	ldr	r0, [pc, #176]	@ (8003dd0 <main+0x6a8>)
 8003d1e:	f002 fb8f 	bl	8006440 <HAL_UART_Transmit>
	          			           printf("La chaîne KiwiRX est non vide\n\n");
 8003d22:	482c      	ldr	r0, [pc, #176]	@ (8003dd4 <main+0x6ac>)
 8003d24:	f003 fb7a 	bl	800741c <puts>
 8003d28:	e002      	b.n	8003d30 <main+0x608>
	          			       }
	          			       // Cas où la chaîne KiwiRX est vide
	          			       else
	          			       	   {
	          			           printf("La chaîne KiwiRX est vide.\n");
 8003d2a:	4823      	ldr	r0, [pc, #140]	@ (8003db8 <main+0x690>)
 8003d2c:	f003 fb76 	bl	800741c <puts>

	          			       }
	          			       // Nombre  actualisé après l'envoi
	          			       received_char = 0x00;
 8003d30:	2300      	movs	r3, #0
 8003d32:	71fb      	strb	r3, [r7, #7]

	          			   // %%% transmission gyro%%%
	          	           HAL_Delay(2680); // a conserver, 300 fonctionne plutôt
 8003d34:	f640 2078 	movw	r0, #2680	@ 0xa78
 8003d38:	f000 fd0c 	bl	8004754 <HAL_Delay>
	          	           snprintf(buf2, sizeof(buf2), "G %03f ;%03f ;%03f ;\n", my_gyro.x, my_gyro.y, my_gyro.z);
 8003d3c:	4b29      	ldr	r3, [pc, #164]	@ (8003de4 <main+0x6bc>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc fb89 	bl	8000458 <__aeabi_f2d>
 8003d46:	4604      	mov	r4, r0
 8003d48:	460d      	mov	r5, r1
 8003d4a:	4b26      	ldr	r3, [pc, #152]	@ (8003de4 <main+0x6bc>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fc fb82 	bl	8000458 <__aeabi_f2d>
 8003d54:	4680      	mov	r8, r0
 8003d56:	4689      	mov	r9, r1
 8003d58:	4b22      	ldr	r3, [pc, #136]	@ (8003de4 <main+0x6bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fb7b 	bl	8000458 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	f107 0008 	add.w	r0, r7, #8
 8003d6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d6e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003d72:	e9cd 4500 	strd	r4, r5, [sp]
 8003d76:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <main+0x6c0>)
 8003d78:	2130      	movs	r1, #48	@ 0x30
 8003d7a:	f003 fb57 	bl	800742c <sniprintf>
	          	           HAL_UART_Receive(&huart1, &received_char, 1, HAL_MAX_DELAY); // On attend  que la Kikiwi envoie XON
 8003d7e:	1df9      	adds	r1, r7, #7
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
 8003d84:	2201      	movs	r2, #1
 8003d86:	4812      	ldr	r0, [pc, #72]	@ (8003dd0 <main+0x6a8>)
 8003d88:	f002 fbdd 	bl	8006546 <HAL_UART_Receive>
	          	           // Cas où la chaîne KiwiRX est non vide> XON envoyé
	          	        			       if (received_char == XON) {
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	2b11      	cmp	r3, #17
 8003d90:	d12c      	bne.n	8003dec <main+0x6c4>
	          	        			    	   HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY); // transmission BME> Kikiwi au total 31 + 1(caractère \n ) octets
 8003d92:	f107 0308 	add.w	r3, r7, #8
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fc f9f2 	bl	8000180 <strlen>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	f107 0108 	add.w	r1, r7, #8
 8003da4:	f04f 33ff 	mov.w	r3, #4294967295
 8003da8:	4809      	ldr	r0, [pc, #36]	@ (8003dd0 <main+0x6a8>)
 8003daa:	f002 fb49 	bl	8006440 <HAL_UART_Transmit>
	          	        			    	  			           printf("La chaîne KiwiRX est non vide\n\n");
 8003dae:	4809      	ldr	r0, [pc, #36]	@ (8003dd4 <main+0x6ac>)
 8003db0:	f003 fb34 	bl	800741c <puts>
 8003db4:	e01d      	b.n	8003df2 <main+0x6ca>
 8003db6:	bf00      	nop
 8003db8:	0800a6c8 	.word	0x0800a6c8
 8003dbc:	20000268 	.word	0x20000268
 8003dc0:	51eb851f 	.word	0x51eb851f
 8003dc4:	20000274 	.word	0x20000274
 8003dc8:	20000278 	.word	0x20000278
 8003dcc:	0800a680 	.word	0x0800a680
 8003dd0:	200003b0 	.word	0x200003b0
 8003dd4:	0800a6a8 	.word	0x0800a6a8
 8003dd8:	0800a6e4 	.word	0x0800a6e4
 8003ddc:	20000494 	.word	0x20000494
 8003de0:	0800a704 	.word	0x0800a704
 8003de4:	20000488 	.word	0x20000488
 8003de8:	0800a71c 	.word	0x0800a71c
	          	        			       }
	          	        			       // Cas où la chaîne KiwiRX est vide
	          	        			       else
	          	        			       	   {
	          	        			           printf("La chaîne KiwiRX est vide.\n");
 8003dec:	4825      	ldr	r0, [pc, #148]	@ (8003e84 <main+0x75c>)
 8003dee:	f003 fb15 	bl	800741c <puts>
	          	        			       }
	          	        			       // Nombre  actualisé après l'envoi
	          	        			       received_char = 0x00;
 8003df2:	2300      	movs	r3, #0
 8003df4:	71fb      	strb	r3, [r7, #7]

	          	           // %%% transmission mag %%%
	          	           HAL_Delay(2680); // a conserver
 8003df6:	f640 2078 	movw	r0, #2680	@ 0xa78
 8003dfa:	f000 fcab 	bl	8004754 <HAL_Delay>
	          	         snprintf(buf2, sizeof(buf2), "M %03f ;%03f ;%03f ;\n", my_mag.x,  my_mag.y, my_mag.z);
 8003dfe:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <main+0x760>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fc fb28 	bl	8000458 <__aeabi_f2d>
 8003e08:	4604      	mov	r4, r0
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e88 <main+0x760>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fb21 	bl	8000458 <__aeabi_f2d>
 8003e16:	4680      	mov	r8, r0
 8003e18:	4689      	mov	r9, r1
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <main+0x760>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fc fb1a 	bl	8000458 <__aeabi_f2d>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	f107 0008 	add.w	r0, r7, #8
 8003e2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e30:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003e34:	e9cd 4500 	strd	r4, r5, [sp]
 8003e38:	4a14      	ldr	r2, [pc, #80]	@ (8003e8c <main+0x764>)
 8003e3a:	2130      	movs	r1, #48	@ 0x30
 8003e3c:	f003 faf6 	bl	800742c <sniprintf>
	          	           HAL_UART_Receive(&huart1, &received_char, 1, HAL_MAX_DELAY); // On attend  que la Kikiwi envoie XON
 8003e40:	1df9      	adds	r1, r7, #7
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	2201      	movs	r2, #1
 8003e48:	4811      	ldr	r0, [pc, #68]	@ (8003e90 <main+0x768>)
 8003e4a:	f002 fb7c 	bl	8006546 <HAL_UART_Receive>
	          	           // Cas où la chaîne KiwiRX est non vide> XON envoyé
	          	           	        			       if (received_char == XON) {
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	2b11      	cmp	r3, #17
 8003e52:	d111      	bne.n	8003e78 <main+0x750>
	          	           	        			    	 HAL_UART_Transmit(&huart1, (uint8_t*)buf2, strlen(buf2), HAL_MAX_DELAY); // transmission BME> Kikiwi au total 31 + 1(caractère \n ) octets
 8003e54:	f107 0308 	add.w	r3, r7, #8
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc f991 	bl	8000180 <strlen>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	f107 0108 	add.w	r1, r7, #8
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6a:	4809      	ldr	r0, [pc, #36]	@ (8003e90 <main+0x768>)
 8003e6c:	f002 fae8 	bl	8006440 <HAL_UART_Transmit>
	          	           	        			    	 printf("La chaîne KiwiRX est non vide\n\n");
 8003e70:	4808      	ldr	r0, [pc, #32]	@ (8003e94 <main+0x76c>)
 8003e72:	f003 fad3 	bl	800741c <puts>
 8003e76:	e002      	b.n	8003e7e <main+0x756>
	          	           	        			       }
	          	           	        			       // Cas où la chaîne KiwiRX est vide
	          	           	        			       else
	          	           	        			       	   {
	          	           	        			           printf("La chaîne KiwiRX est vide.\n");
 8003e78:	4802      	ldr	r0, [pc, #8]	@ (8003e84 <main+0x75c>)
 8003e7a:	f003 facf 	bl	800741c <puts>

	          	           	        			       }
	          	           	        			    // Nombre  actualisé après l'envoi
	          	           	        			    received_char = 0x00;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	71fb      	strb	r3, [r7, #7]
	    {
 8003e82:	e49b      	b.n	80037bc <main+0x94>
 8003e84:	0800a6c8 	.word	0x0800a6c8
 8003e88:	200004a0 	.word	0x200004a0
 8003e8c:	0800a734 	.word	0x0800a734
 8003e90:	200003b0 	.word	0x200003b0
 8003e94:	0800a6a8 	.word	0x0800a6a8

08003e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b092      	sub	sp, #72	@ 0x48
 8003e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	2234      	movs	r2, #52	@ 0x34
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f003 fbcc 	bl	8007644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003eac:	463b      	mov	r3, r7
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	609a      	str	r2, [r3, #8]
 8003eb6:	60da      	str	r2, [r3, #12]
 8003eb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eba:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <SystemClock_Config+0x8c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8003ec2:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <SystemClock_Config+0x8c>)
 8003ec4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ec8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003eca:	2310      	movs	r3, #16
 8003ecc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003ed6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ee0:	f107 0314 	add.w	r3, r7, #20
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fee3 	bl	8004cb0 <HAL_RCC_OscConfig>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8003ef0:	f000 f970 	bl	80041d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ef4:	230f      	movs	r3, #15
 8003ef6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f08:	463b      	mov	r3, r7
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 f9ff 	bl	8005310 <HAL_RCC_ClockConfig>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003f18:	f000 f95c 	bl	80041d4 <Error_Handler>
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	3748      	adds	r7, #72	@ 0x48
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40007000 	.word	0x40007000

08003f28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f2c:	4b17      	ldr	r3, [pc, #92]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f2e:	4a18      	ldr	r2, [pc, #96]	@ (8003f90 <MX_SPI2_Init+0x68>)
 8003f30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f32:	4b16      	ldr	r3, [pc, #88]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f3a:	4b14      	ldr	r3, [pc, #80]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f40:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f46:	4b11      	ldr	r3, [pc, #68]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f52:	4b0e      	ldr	r3, [pc, #56]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f60:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f66:	4b09      	ldr	r3, [pc, #36]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f6c:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003f72:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f74:	220a      	movs	r2, #10
 8003f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f78:	4804      	ldr	r0, [pc, #16]	@ (8003f8c <MX_SPI2_Init+0x64>)
 8003f7a:	f001 fc4d 	bl	8005818 <HAL_SPI_Init>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003f84:	f000 f926 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003f88:	bf00      	nop
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000300 	.word	0x20000300
 8003f90:	40003800 	.word	0x40003800

08003f94 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003f98:	4b17      	ldr	r3, [pc, #92]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003f9a:	4a18      	ldr	r2, [pc, #96]	@ (8003ffc <MX_SPI3_Init+0x68>)
 8003f9c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003f9e:	4b16      	ldr	r3, [pc, #88]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fa0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003fa4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003fa6:	4b14      	ldr	r3, [pc, #80]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fac:	4b12      	ldr	r3, [pc, #72]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fb2:	4b11      	ldr	r3, [pc, #68]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fc4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fd2:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd8:	4b07      	ldr	r3, [pc, #28]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003fde:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fe0:	220a      	movs	r2, #10
 8003fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003fe4:	4804      	ldr	r0, [pc, #16]	@ (8003ff8 <MX_SPI3_Init+0x64>)
 8003fe6:	f001 fc17 	bl	8005818 <HAL_SPI_Init>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003ff0:	f000 f8f0 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000358 	.word	0x20000358
 8003ffc:	40003c00 	.word	0x40003c00

08004000 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004004:	4b11      	ldr	r3, [pc, #68]	@ (800404c <MX_USART1_UART_Init+0x4c>)
 8004006:	4a12      	ldr	r2, [pc, #72]	@ (8004050 <MX_USART1_UART_Init+0x50>)
 8004008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800400a:	4b10      	ldr	r3, [pc, #64]	@ (800404c <MX_USART1_UART_Init+0x4c>)
 800400c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004012:	4b0e      	ldr	r3, [pc, #56]	@ (800404c <MX_USART1_UART_Init+0x4c>)
 8004014:	2200      	movs	r2, #0
 8004016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <MX_USART1_UART_Init+0x4c>)
 800401a:	2200      	movs	r2, #0
 800401c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800401e:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <MX_USART1_UART_Init+0x4c>)
 8004020:	2200      	movs	r2, #0
 8004022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004024:	4b09      	ldr	r3, [pc, #36]	@ (800404c <MX_USART1_UART_Init+0x4c>)
 8004026:	220c      	movs	r2, #12
 8004028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800402a:	4b08      	ldr	r3, [pc, #32]	@ (800404c <MX_USART1_UART_Init+0x4c>)
 800402c:	2200      	movs	r2, #0
 800402e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004030:	4b06      	ldr	r3, [pc, #24]	@ (800404c <MX_USART1_UART_Init+0x4c>)
 8004032:	2200      	movs	r2, #0
 8004034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004036:	4805      	ldr	r0, [pc, #20]	@ (800404c <MX_USART1_UART_Init+0x4c>)
 8004038:	f002 f9b2 	bl	80063a0 <HAL_UART_Init>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004042:	f000 f8c7 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200003b0 	.word	0x200003b0
 8004050:	40013800 	.word	0x40013800

08004054 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <MX_USART2_UART_Init+0x4c>)
 800405a:	4a12      	ldr	r2, [pc, #72]	@ (80040a4 <MX_USART2_UART_Init+0x50>)
 800405c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <MX_USART2_UART_Init+0x4c>)
 8004060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004066:	4b0e      	ldr	r3, [pc, #56]	@ (80040a0 <MX_USART2_UART_Init+0x4c>)
 8004068:	2200      	movs	r2, #0
 800406a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800406c:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <MX_USART2_UART_Init+0x4c>)
 800406e:	2200      	movs	r2, #0
 8004070:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004072:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <MX_USART2_UART_Init+0x4c>)
 8004074:	2200      	movs	r2, #0
 8004076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004078:	4b09      	ldr	r3, [pc, #36]	@ (80040a0 <MX_USART2_UART_Init+0x4c>)
 800407a:	220c      	movs	r2, #12
 800407c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800407e:	4b08      	ldr	r3, [pc, #32]	@ (80040a0 <MX_USART2_UART_Init+0x4c>)
 8004080:	2200      	movs	r2, #0
 8004082:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004084:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <MX_USART2_UART_Init+0x4c>)
 8004086:	2200      	movs	r2, #0
 8004088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800408a:	4805      	ldr	r0, [pc, #20]	@ (80040a0 <MX_USART2_UART_Init+0x4c>)
 800408c:	f002 f988 	bl	80063a0 <HAL_UART_Init>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004096:	f000 f89d 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	200003f8 	.word	0x200003f8
 80040a4:	40004400 	.word	0x40004400

080040a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040ac:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <MX_USART3_UART_Init+0x4c>)
 80040ae:	4a12      	ldr	r2, [pc, #72]	@ (80040f8 <MX_USART3_UART_Init+0x50>)
 80040b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80040b2:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <MX_USART3_UART_Init+0x4c>)
 80040b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040ba:	4b0e      	ldr	r3, [pc, #56]	@ (80040f4 <MX_USART3_UART_Init+0x4c>)
 80040bc:	2200      	movs	r2, #0
 80040be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040c0:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <MX_USART3_UART_Init+0x4c>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040c6:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <MX_USART3_UART_Init+0x4c>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040cc:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <MX_USART3_UART_Init+0x4c>)
 80040ce:	220c      	movs	r2, #12
 80040d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040d2:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <MX_USART3_UART_Init+0x4c>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d8:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <MX_USART3_UART_Init+0x4c>)
 80040da:	2200      	movs	r2, #0
 80040dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040de:	4805      	ldr	r0, [pc, #20]	@ (80040f4 <MX_USART3_UART_Init+0x4c>)
 80040e0:	f002 f95e 	bl	80063a0 <HAL_UART_Init>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80040ea:	f000 f873 	bl	80041d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000440 	.word	0x20000440
 80040f8:	40004800 	.word	0x40004800

080040fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	@ 0x28
 8004100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004102:	f107 0314 	add.w	r3, r7, #20
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004112:	4b2d      	ldr	r3, [pc, #180]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4a2c      	ldr	r2, [pc, #176]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 8004118:	f043 0304 	orr.w	r3, r3, #4
 800411c:	61d3      	str	r3, [r2, #28]
 800411e:	4b2a      	ldr	r3, [pc, #168]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800412a:	4b27      	ldr	r3, [pc, #156]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	4a26      	ldr	r2, [pc, #152]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 8004130:	f043 0320 	orr.w	r3, r3, #32
 8004134:	61d3      	str	r3, [r2, #28]
 8004136:	4b24      	ldr	r3, [pc, #144]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004142:	4b21      	ldr	r3, [pc, #132]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4a20      	ldr	r2, [pc, #128]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	61d3      	str	r3, [r2, #28]
 800414e:	4b1e      	ldr	r3, [pc, #120]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800415a:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4a1a      	ldr	r2, [pc, #104]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	61d3      	str	r3, [r2, #28]
 8004166:	4b18      	ldr	r3, [pc, #96]	@ (80041c8 <MX_GPIO_Init+0xcc>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	607b      	str	r3, [r7, #4]
 8004170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8004172:	2200      	movs	r2, #0
 8004174:	21f1      	movs	r1, #241	@ 0xf1
 8004176:	4815      	ldr	r0, [pc, #84]	@ (80041cc <MX_GPIO_Init+0xd0>)
 8004178:	f000 fd82 	bl	8004c80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800417c:	2200      	movs	r2, #0
 800417e:	2101      	movs	r1, #1
 8004180:	4813      	ldr	r0, [pc, #76]	@ (80041d0 <MX_GPIO_Init+0xd4>)
 8004182:	f000 fd7d 	bl	8004c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8004186:	23f1      	movs	r3, #241	@ 0xf1
 8004188:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	4619      	mov	r1, r3
 800419c:	480b      	ldr	r0, [pc, #44]	@ (80041cc <MX_GPIO_Init+0xd0>)
 800419e:	f000 fbdf 	bl	8004960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041a2:	2301      	movs	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ae:	2300      	movs	r3, #0
 80041b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b2:	f107 0314 	add.w	r3, r7, #20
 80041b6:	4619      	mov	r1, r3
 80041b8:	4805      	ldr	r0, [pc, #20]	@ (80041d0 <MX_GPIO_Init+0xd4>)
 80041ba:	f000 fbd1 	bl	8004960 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80041be:	bf00      	nop
 80041c0:	3728      	adds	r7, #40	@ 0x28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	40020000 	.word	0x40020000
 80041d0:	40020400 	.word	0x40020400

080041d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041d8:	b672      	cpsid	i
}
 80041da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041dc:	bf00      	nop
 80041de:	e7fd      	b.n	80041dc <Error_Handler+0x8>

080041e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <HAL_MspInit+0x58>)
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	4a13      	ldr	r2, [pc, #76]	@ (8004238 <HAL_MspInit+0x58>)
 80041ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041f0:	6253      	str	r3, [r2, #36]	@ 0x24
 80041f2:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <HAL_MspInit+0x58>)
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004238 <HAL_MspInit+0x58>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4a0d      	ldr	r2, [pc, #52]	@ (8004238 <HAL_MspInit+0x58>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <HAL_MspInit+0x58>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	4b08      	ldr	r3, [pc, #32]	@ (8004238 <HAL_MspInit+0x58>)
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	4a07      	ldr	r2, [pc, #28]	@ (8004238 <HAL_MspInit+0x58>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004220:	6253      	str	r3, [r2, #36]	@ 0x24
 8004222:	4b05      	ldr	r3, [pc, #20]	@ (8004238 <HAL_MspInit+0x58>)
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	40023800 	.word	0x40023800

0800423c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	@ 0x30
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004244:	f107 031c 	add.w	r3, r7, #28
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a2f      	ldr	r2, [pc, #188]	@ (8004318 <HAL_SPI_MspInit+0xdc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d129      	bne.n	80042b2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800425e:	4b2f      	ldr	r3, [pc, #188]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	4a2e      	ldr	r2, [pc, #184]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 8004264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004268:	6253      	str	r3, [r2, #36]	@ 0x24
 800426a:	4b2c      	ldr	r3, [pc, #176]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004276:	4b29      	ldr	r3, [pc, #164]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	4a28      	ldr	r2, [pc, #160]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 800427c:	f043 0302 	orr.w	r3, r3, #2
 8004280:	61d3      	str	r3, [r2, #28]
 8004282:	4b26      	ldr	r3, [pc, #152]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800428e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004294:	2302      	movs	r3, #2
 8004296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004298:	2300      	movs	r3, #0
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800429c:	2303      	movs	r3, #3
 800429e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042a0:	2305      	movs	r3, #5
 80042a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a4:	f107 031c 	add.w	r3, r7, #28
 80042a8:	4619      	mov	r1, r3
 80042aa:	481d      	ldr	r0, [pc, #116]	@ (8004320 <HAL_SPI_MspInit+0xe4>)
 80042ac:	f000 fb58 	bl	8004960 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80042b0:	e02d      	b.n	800430e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004324 <HAL_SPI_MspInit+0xe8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d128      	bne.n	800430e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80042bc:	4b17      	ldr	r3, [pc, #92]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	4a16      	ldr	r2, [pc, #88]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 80042c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042c6:	6253      	str	r3, [r2, #36]	@ 0x24
 80042c8:	4b14      	ldr	r3, [pc, #80]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042d4:	4b11      	ldr	r3, [pc, #68]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	4a10      	ldr	r2, [pc, #64]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 80042da:	f043 0304 	orr.w	r3, r3, #4
 80042de:	61d3      	str	r3, [r2, #28]
 80042e0:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <HAL_SPI_MspInit+0xe0>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80042ec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80042f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f2:	2302      	movs	r3, #2
 80042f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fa:	2303      	movs	r3, #3
 80042fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80042fe:	2306      	movs	r3, #6
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004302:	f107 031c 	add.w	r3, r7, #28
 8004306:	4619      	mov	r1, r3
 8004308:	4807      	ldr	r0, [pc, #28]	@ (8004328 <HAL_SPI_MspInit+0xec>)
 800430a:	f000 fb29 	bl	8004960 <HAL_GPIO_Init>
}
 800430e:	bf00      	nop
 8004310:	3730      	adds	r7, #48	@ 0x30
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40003800 	.word	0x40003800
 800431c:	40023800 	.word	0x40023800
 8004320:	40020400 	.word	0x40020400
 8004324:	40003c00 	.word	0x40003c00
 8004328:	40020800 	.word	0x40020800

0800432c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08e      	sub	sp, #56	@ 0x38
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	605a      	str	r2, [r3, #4]
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	60da      	str	r2, [r3, #12]
 8004342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a46      	ldr	r2, [pc, #280]	@ (8004464 <HAL_UART_MspInit+0x138>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d129      	bne.n	80043a2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800434e:	4b46      	ldr	r3, [pc, #280]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4a45      	ldr	r2, [pc, #276]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 8004354:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004358:	6213      	str	r3, [r2, #32]
 800435a:	4b43      	ldr	r3, [pc, #268]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004362:	623b      	str	r3, [r7, #32]
 8004364:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004366:	4b40      	ldr	r3, [pc, #256]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	4a3f      	ldr	r2, [pc, #252]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	61d3      	str	r3, [r2, #28]
 8004372:	4b3d      	ldr	r3, [pc, #244]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800437e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004384:	2302      	movs	r3, #2
 8004386:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	2300      	movs	r3, #0
 800438a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800438c:	2303      	movs	r3, #3
 800438e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004390:	2307      	movs	r3, #7
 8004392:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004398:	4619      	mov	r1, r3
 800439a:	4834      	ldr	r0, [pc, #208]	@ (800446c <HAL_UART_MspInit+0x140>)
 800439c:	f000 fae0 	bl	8004960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80043a0:	e05b      	b.n	800445a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a32      	ldr	r2, [pc, #200]	@ (8004470 <HAL_UART_MspInit+0x144>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d128      	bne.n	80043fe <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 80043b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b6:	6253      	str	r3, [r2, #36]	@ 0x24
 80043b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c4:	4b28      	ldr	r3, [pc, #160]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	4a27      	ldr	r2, [pc, #156]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	61d3      	str	r3, [r2, #28]
 80043d0:	4b25      	ldr	r3, [pc, #148]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80043dc:	230c      	movs	r3, #12
 80043de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e0:	2302      	movs	r3, #2
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e8:	2303      	movs	r3, #3
 80043ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043ec:	2307      	movs	r3, #7
 80043ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043f4:	4619      	mov	r1, r3
 80043f6:	481d      	ldr	r0, [pc, #116]	@ (800446c <HAL_UART_MspInit+0x140>)
 80043f8:	f000 fab2 	bl	8004960 <HAL_GPIO_Init>
}
 80043fc:	e02d      	b.n	800445a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1c      	ldr	r2, [pc, #112]	@ (8004474 <HAL_UART_MspInit+0x148>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d128      	bne.n	800445a <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004408:	4b17      	ldr	r3, [pc, #92]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	4a16      	ldr	r2, [pc, #88]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 800440e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004412:	6253      	str	r3, [r2, #36]	@ 0x24
 8004414:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004420:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	4a10      	ldr	r2, [pc, #64]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 8004426:	f043 0302 	orr.w	r3, r3, #2
 800442a:	61d3      	str	r3, [r2, #28]
 800442c:	4b0e      	ldr	r3, [pc, #56]	@ (8004468 <HAL_UART_MspInit+0x13c>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004438:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443e:	2302      	movs	r3, #2
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004442:	2300      	movs	r3, #0
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004446:	2303      	movs	r3, #3
 8004448:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800444a:	2307      	movs	r3, #7
 800444c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800444e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004452:	4619      	mov	r1, r3
 8004454:	4808      	ldr	r0, [pc, #32]	@ (8004478 <HAL_UART_MspInit+0x14c>)
 8004456:	f000 fa83 	bl	8004960 <HAL_GPIO_Init>
}
 800445a:	bf00      	nop
 800445c:	3738      	adds	r7, #56	@ 0x38
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40013800 	.word	0x40013800
 8004468:	40023800 	.word	0x40023800
 800446c:	40020000 	.word	0x40020000
 8004470:	40004400 	.word	0x40004400
 8004474:	40004800 	.word	0x40004800
 8004478:	40020400 	.word	0x40020400

0800447c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004480:	bf00      	nop
 8004482:	e7fd      	b.n	8004480 <NMI_Handler+0x4>

08004484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004488:	bf00      	nop
 800448a:	e7fd      	b.n	8004488 <HardFault_Handler+0x4>

0800448c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004490:	bf00      	nop
 8004492:	e7fd      	b.n	8004490 <MemManage_Handler+0x4>

08004494 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <BusFault_Handler+0x4>

0800449c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <UsageFault_Handler+0x4>

080044a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044cc:	f000 f926 	bl	800471c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044d0:	bf00      	nop
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return 1;
 80044d8:	2301      	movs	r3, #1
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <_kill>:

int _kill(int pid, int sig)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044ec:	f003 f8fc 	bl	80076e8 <__errno>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2216      	movs	r2, #22
 80044f4:	601a      	str	r2, [r3, #0]
  return -1;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <_exit>:

void _exit (int status)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800450a:	f04f 31ff 	mov.w	r1, #4294967295
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff ffe7 	bl	80044e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <_exit+0x12>

08004518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	e00a      	b.n	8004540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800452a:	f3af 8000 	nop.w
 800452e:	4601      	mov	r1, r0
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	60ba      	str	r2, [r7, #8]
 8004536:	b2ca      	uxtb	r2, r1
 8004538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	3301      	adds	r3, #1
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	dbf0      	blt.n	800452a <_read+0x12>
  }

  return len;
 8004548:	687b      	ldr	r3, [r7, #4]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004578:	605a      	str	r2, [r3, #4]
  return 0;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr

08004586 <_isatty>:

int _isatty(int file)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800458e:	2301      	movs	r3, #1
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr
	...

080045b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045bc:	4a14      	ldr	r2, [pc, #80]	@ (8004610 <_sbrk+0x5c>)
 80045be:	4b15      	ldr	r3, [pc, #84]	@ (8004614 <_sbrk+0x60>)
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045c8:	4b13      	ldr	r3, [pc, #76]	@ (8004618 <_sbrk+0x64>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d102      	bne.n	80045d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045d0:	4b11      	ldr	r3, [pc, #68]	@ (8004618 <_sbrk+0x64>)
 80045d2:	4a12      	ldr	r2, [pc, #72]	@ (800461c <_sbrk+0x68>)
 80045d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045d6:	4b10      	ldr	r3, [pc, #64]	@ (8004618 <_sbrk+0x64>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4413      	add	r3, r2
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d207      	bcs.n	80045f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045e4:	f003 f880 	bl	80076e8 <__errno>
 80045e8:	4603      	mov	r3, r0
 80045ea:	220c      	movs	r2, #12
 80045ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295
 80045f2:	e009      	b.n	8004608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045f4:	4b08      	ldr	r3, [pc, #32]	@ (8004618 <_sbrk+0x64>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045fa:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <_sbrk+0x64>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	4a05      	ldr	r2, [pc, #20]	@ (8004618 <_sbrk+0x64>)
 8004604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004606:	68fb      	ldr	r3, [r7, #12]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20014000 	.word	0x20014000
 8004614:	00000400 	.word	0x00000400
 8004618:	200004ac 	.word	0x200004ac
 800461c:	20000600 	.word	0x20000600

08004620 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800462c:	f7ff fff8 	bl	8004620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004630:	480b      	ldr	r0, [pc, #44]	@ (8004660 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004632:	490c      	ldr	r1, [pc, #48]	@ (8004664 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004634:	4a0c      	ldr	r2, [pc, #48]	@ (8004668 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004638:	e002      	b.n	8004640 <LoopCopyDataInit>

0800463a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800463a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800463c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800463e:	3304      	adds	r3, #4

08004640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004644:	d3f9      	bcc.n	800463a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004646:	4a09      	ldr	r2, [pc, #36]	@ (800466c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004648:	4c09      	ldr	r4, [pc, #36]	@ (8004670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800464a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800464c:	e001      	b.n	8004652 <LoopFillZerobss>

0800464e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800464e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004650:	3204      	adds	r2, #4

08004652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004654:	d3fb      	bcc.n	800464e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004656:	f003 f84d 	bl	80076f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800465a:	f7ff f865 	bl	8003728 <main>
  bx lr
 800465e:	4770      	bx	lr
  ldr r0, =_sdata
 8004660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004664:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004668:	0800ab20 	.word	0x0800ab20
  ldr r2, =_sbss
 800466c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004670:	20000600 	.word	0x20000600

08004674 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004674:	e7fe      	b.n	8004674 <ADC1_IRQHandler>

08004676 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004680:	2003      	movs	r0, #3
 8004682:	f000 f939 	bl	80048f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004686:	200f      	movs	r0, #15
 8004688:	f000 f80e 	bl	80046a8 <HAL_InitTick>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	71fb      	strb	r3, [r7, #7]
 8004696:	e001      	b.n	800469c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004698:	f7ff fda2 	bl	80041e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800469c:	79fb      	ldrb	r3, [r7, #7]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80046b4:	4b16      	ldr	r3, [pc, #88]	@ (8004710 <HAL_InitTick+0x68>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d022      	beq.n	8004702 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80046bc:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <HAL_InitTick+0x6c>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b13      	ldr	r3, [pc, #76]	@ (8004710 <HAL_InitTick+0x68>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80046c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 f938 	bl	8004946 <HAL_SYSTICK_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10f      	bne.n	80046fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b0f      	cmp	r3, #15
 80046e0:	d809      	bhi.n	80046f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046e2:	2200      	movs	r2, #0
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ea:	f000 f910 	bl	800490e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004718 <HAL_InitTick+0x70>)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	e007      	b.n	8004706 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
 80046fa:	e004      	b.n	8004706 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
 8004700:	e001      	b.n	8004706 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000010 	.word	0x20000010
 8004714:	20000008 	.word	0x20000008
 8004718:	2000000c 	.word	0x2000000c

0800471c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004720:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_IncTick+0x1c>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <HAL_IncTick+0x20>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4413      	add	r3, r2
 800472a:	4a03      	ldr	r2, [pc, #12]	@ (8004738 <HAL_IncTick+0x1c>)
 800472c:	6013      	str	r3, [r2, #0]
}
 800472e:	bf00      	nop
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	200004b0 	.word	0x200004b0
 800473c:	20000010 	.word	0x20000010

08004740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return uwTick;
 8004744:	4b02      	ldr	r3, [pc, #8]	@ (8004750 <HAL_GetTick+0x10>)
 8004746:	681b      	ldr	r3, [r3, #0]
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	200004b0 	.word	0x200004b0

08004754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800475c:	f7ff fff0 	bl	8004740 <HAL_GetTick>
 8004760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476c:	d004      	beq.n	8004778 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800476e:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <HAL_Delay+0x40>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004778:	bf00      	nop
 800477a:	f7ff ffe1 	bl	8004740 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	429a      	cmp	r2, r3
 8004788:	d8f7      	bhi.n	800477a <HAL_Delay+0x26>
  {
  }
}
 800478a:	bf00      	nop
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000010 	.word	0x20000010

08004798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047a8:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <__NVIC_SetPriorityGrouping+0x44>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047b4:	4013      	ands	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ca:	4a04      	ldr	r2, [pc, #16]	@ (80047dc <__NVIC_SetPriorityGrouping+0x44>)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	60d3      	str	r3, [r2, #12]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047e4:	4b04      	ldr	r3, [pc, #16]	@ (80047f8 <__NVIC_GetPriorityGrouping+0x18>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	0a1b      	lsrs	r3, r3, #8
 80047ea:	f003 0307 	and.w	r3, r3, #7
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	6039      	str	r1, [r7, #0]
 8004806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	2b00      	cmp	r3, #0
 800480e:	db0a      	blt.n	8004826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	b2da      	uxtb	r2, r3
 8004814:	490c      	ldr	r1, [pc, #48]	@ (8004848 <__NVIC_SetPriority+0x4c>)
 8004816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481a:	0112      	lsls	r2, r2, #4
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	440b      	add	r3, r1
 8004820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004824:	e00a      	b.n	800483c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4908      	ldr	r1, [pc, #32]	@ (800484c <__NVIC_SetPriority+0x50>)
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	3b04      	subs	r3, #4
 8004834:	0112      	lsls	r2, r2, #4
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	440b      	add	r3, r1
 800483a:	761a      	strb	r2, [r3, #24]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	e000e100 	.word	0xe000e100
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	@ 0x24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f1c3 0307 	rsb	r3, r3, #7
 800486a:	2b04      	cmp	r3, #4
 800486c:	bf28      	it	cs
 800486e:	2304      	movcs	r3, #4
 8004870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3304      	adds	r3, #4
 8004876:	2b06      	cmp	r3, #6
 8004878:	d902      	bls.n	8004880 <NVIC_EncodePriority+0x30>
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3b03      	subs	r3, #3
 800487e:	e000      	b.n	8004882 <NVIC_EncodePriority+0x32>
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004884:	f04f 32ff 	mov.w	r2, #4294967295
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43da      	mvns	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	401a      	ands	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004898:	f04f 31ff 	mov.w	r1, #4294967295
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	fa01 f303 	lsl.w	r3, r1, r3
 80048a2:	43d9      	mvns	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	4313      	orrs	r3, r2
         );
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3724      	adds	r7, #36	@ 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c4:	d301      	bcc.n	80048ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00f      	b.n	80048ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ca:	4a0a      	ldr	r2, [pc, #40]	@ (80048f4 <SysTick_Config+0x40>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d2:	210f      	movs	r1, #15
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	f7ff ff90 	bl	80047fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048dc:	4b05      	ldr	r3, [pc, #20]	@ (80048f4 <SysTick_Config+0x40>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e2:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <SysTick_Config+0x40>)
 80048e4:	2207      	movs	r2, #7
 80048e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	e000e010 	.word	0xe000e010

080048f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ff49 	bl	8004798 <__NVIC_SetPriorityGrouping>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004920:	f7ff ff5e 	bl	80047e0 <__NVIC_GetPriorityGrouping>
 8004924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	6978      	ldr	r0, [r7, #20]
 800492c:	f7ff ff90 	bl	8004850 <NVIC_EncodePriority>
 8004930:	4602      	mov	r2, r0
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff5f 	bl	80047fc <__NVIC_SetPriority>
}
 800493e:	bf00      	nop
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ffb0 	bl	80048b4 <SysTick_Config>
 8004954:	4603      	mov	r3, r0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004976:	e160      	b.n	8004c3a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	2101      	movs	r1, #1
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	4013      	ands	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8152 	beq.w	8004c34 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d005      	beq.n	80049a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d130      	bne.n	8004a0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	2203      	movs	r2, #3
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4013      	ands	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80049de:	2201      	movs	r2, #1
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4013      	ands	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 0201 	and.w	r2, r3, #1
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d017      	beq.n	8004a46 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	2203      	movs	r2, #3
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43db      	mvns	r3, r3
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d123      	bne.n	8004a9a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	08da      	lsrs	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3208      	adds	r2, #8
 8004a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	220f      	movs	r2, #15
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4013      	ands	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	08da      	lsrs	r2, r3, #3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3208      	adds	r2, #8
 8004a94:	6939      	ldr	r1, [r7, #16]
 8004a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 0203 	and.w	r2, r3, #3
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 80ac 	beq.w	8004c34 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004adc:	4b5e      	ldr	r3, [pc, #376]	@ (8004c58 <HAL_GPIO_Init+0x2f8>)
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	4a5d      	ldr	r2, [pc, #372]	@ (8004c58 <HAL_GPIO_Init+0x2f8>)
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	6213      	str	r3, [r2, #32]
 8004ae8:	4b5b      	ldr	r3, [pc, #364]	@ (8004c58 <HAL_GPIO_Init+0x2f8>)
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004af4:	4a59      	ldr	r2, [pc, #356]	@ (8004c5c <HAL_GPIO_Init+0x2fc>)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	3302      	adds	r3, #2
 8004afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	220f      	movs	r2, #15
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4013      	ands	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a51      	ldr	r2, [pc, #324]	@ (8004c60 <HAL_GPIO_Init+0x300>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d025      	beq.n	8004b6c <HAL_GPIO_Init+0x20c>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a50      	ldr	r2, [pc, #320]	@ (8004c64 <HAL_GPIO_Init+0x304>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d01f      	beq.n	8004b68 <HAL_GPIO_Init+0x208>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a4f      	ldr	r2, [pc, #316]	@ (8004c68 <HAL_GPIO_Init+0x308>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d019      	beq.n	8004b64 <HAL_GPIO_Init+0x204>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a4e      	ldr	r2, [pc, #312]	@ (8004c6c <HAL_GPIO_Init+0x30c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <HAL_GPIO_Init+0x200>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a4d      	ldr	r2, [pc, #308]	@ (8004c70 <HAL_GPIO_Init+0x310>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00d      	beq.n	8004b5c <HAL_GPIO_Init+0x1fc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a4c      	ldr	r2, [pc, #304]	@ (8004c74 <HAL_GPIO_Init+0x314>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d007      	beq.n	8004b58 <HAL_GPIO_Init+0x1f8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a4b      	ldr	r2, [pc, #300]	@ (8004c78 <HAL_GPIO_Init+0x318>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_GPIO_Init+0x1f4>
 8004b50:	2306      	movs	r3, #6
 8004b52:	e00c      	b.n	8004b6e <HAL_GPIO_Init+0x20e>
 8004b54:	2307      	movs	r3, #7
 8004b56:	e00a      	b.n	8004b6e <HAL_GPIO_Init+0x20e>
 8004b58:	2305      	movs	r3, #5
 8004b5a:	e008      	b.n	8004b6e <HAL_GPIO_Init+0x20e>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	e006      	b.n	8004b6e <HAL_GPIO_Init+0x20e>
 8004b60:	2303      	movs	r3, #3
 8004b62:	e004      	b.n	8004b6e <HAL_GPIO_Init+0x20e>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e002      	b.n	8004b6e <HAL_GPIO_Init+0x20e>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <HAL_GPIO_Init+0x20e>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	f002 0203 	and.w	r2, r2, #3
 8004b74:	0092      	lsls	r2, r2, #2
 8004b76:	4093      	lsls	r3, r2
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b7e:	4937      	ldr	r1, [pc, #220]	@ (8004c5c <HAL_GPIO_Init+0x2fc>)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	089b      	lsrs	r3, r3, #2
 8004b84:	3302      	adds	r3, #2
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c7c <HAL_GPIO_Init+0x31c>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	43db      	mvns	r3, r3
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004bb0:	4a32      	ldr	r2, [pc, #200]	@ (8004c7c <HAL_GPIO_Init+0x31c>)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bb6:	4b31      	ldr	r3, [pc, #196]	@ (8004c7c <HAL_GPIO_Init+0x31c>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004bda:	4a28      	ldr	r2, [pc, #160]	@ (8004c7c <HAL_GPIO_Init+0x31c>)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004be0:	4b26      	ldr	r3, [pc, #152]	@ (8004c7c <HAL_GPIO_Init+0x31c>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004c04:	4a1d      	ldr	r2, [pc, #116]	@ (8004c7c <HAL_GPIO_Init+0x31c>)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c7c <HAL_GPIO_Init+0x31c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4013      	ands	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c2e:	4a13      	ldr	r2, [pc, #76]	@ (8004c7c <HAL_GPIO_Init+0x31c>)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	3301      	adds	r3, #1
 8004c38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f47f ae97 	bne.w	8004978 <HAL_GPIO_Init+0x18>
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40020000 	.word	0x40020000
 8004c64:	40020400 	.word	0x40020400
 8004c68:	40020800 	.word	0x40020800
 8004c6c:	40020c00 	.word	0x40020c00
 8004c70:	40021000 	.word	0x40021000
 8004c74:	40021400 	.word	0x40021400
 8004c78:	40021800 	.word	0x40021800
 8004c7c:	40010400 	.word	0x40010400

08004c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	807b      	strh	r3, [r7, #2]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c90:	787b      	ldrb	r3, [r7, #1]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c96:	887a      	ldrh	r2, [r7, #2]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004c9c:	e003      	b.n	8004ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004c9e:	887b      	ldrh	r3, [r7, #2]
 8004ca0:	041a      	lsls	r2, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	619a      	str	r2, [r3, #24]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e31d      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc2:	4b94      	ldr	r3, [pc, #592]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ccc:	4b91      	ldr	r3, [pc, #580]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cd4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d07b      	beq.n	8004dda <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d006      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b0c      	cmp	r3, #12
 8004cec:	d10f      	bne.n	8004d0e <HAL_RCC_OscConfig+0x5e>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf4:	d10b      	bne.n	8004d0e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf6:	4b87      	ldr	r3, [pc, #540]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d06a      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x128>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d166      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e2f7      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d106      	bne.n	8004d24 <HAL_RCC_OscConfig+0x74>
 8004d16:	4b7f      	ldr	r3, [pc, #508]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e02d      	b.n	8004d80 <HAL_RCC_OscConfig+0xd0>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10c      	bne.n	8004d46 <HAL_RCC_OscConfig+0x96>
 8004d2c:	4b79      	ldr	r3, [pc, #484]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a78      	ldr	r2, [pc, #480]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	4b76      	ldr	r3, [pc, #472]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a75      	ldr	r2, [pc, #468]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	e01c      	b.n	8004d80 <HAL_RCC_OscConfig+0xd0>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	d10c      	bne.n	8004d68 <HAL_RCC_OscConfig+0xb8>
 8004d4e:	4b71      	ldr	r3, [pc, #452]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a70      	ldr	r2, [pc, #448]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e00b      	b.n	8004d80 <HAL_RCC_OscConfig+0xd0>
 8004d68:	4b6a      	ldr	r3, [pc, #424]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a69      	ldr	r2, [pc, #420]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	4b67      	ldr	r3, [pc, #412]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a66      	ldr	r2, [pc, #408]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d013      	beq.n	8004db0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7ff fcda 	bl	8004740 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d90:	f7ff fcd6 	bl	8004740 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	@ 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e2ad      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004da2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0xe0>
 8004dae:	e014      	b.n	8004dda <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7ff fcc6 	bl	8004740 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004db8:	f7ff fcc2 	bl	8004740 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	@ 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e299      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dca:	4b52      	ldr	r3, [pc, #328]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x108>
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d05a      	beq.n	8004e9c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b0c      	cmp	r3, #12
 8004df0:	d119      	bne.n	8004e26 <HAL_RCC_OscConfig+0x176>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d116      	bne.n	8004e26 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df8:	4b46      	ldr	r3, [pc, #280]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_OscConfig+0x160>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e276      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e10:	4b40      	ldr	r3, [pc, #256]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	493d      	ldr	r1, [pc, #244]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e24:	e03a      	b.n	8004e9c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d020      	beq.n	8004e70 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f18 <HAL_RCC_OscConfig+0x268>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e34:	f7ff fc84 	bl	8004740 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3c:	f7ff fc80 	bl	8004740 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e257      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e4e:	4b31      	ldr	r3, [pc, #196]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	492a      	ldr	r1, [pc, #168]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	604b      	str	r3, [r1, #4]
 8004e6e:	e015      	b.n	8004e9c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e70:	4b29      	ldr	r3, [pc, #164]	@ (8004f18 <HAL_RCC_OscConfig+0x268>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e76:	f7ff fc63 	bl	8004740 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e7e:	f7ff fc5f 	bl	8004740 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e236      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e90:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f0      	bne.n	8004e7e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80b8 	beq.w	800501a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d170      	bne.n	8004f92 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004eb0:	4b18      	ldr	r3, [pc, #96]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x218>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e21a      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1a      	ldr	r2, [r3, #32]
 8004ecc:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d921      	bls.n	8004f1c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fc3b 	bl	8005758 <RCC_SetFlashLatencyFromMSIRange>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e208      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eec:	4b09      	ldr	r3, [pc, #36]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	4906      	ldr	r1, [pc, #24]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004efe:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	4901      	ldr	r1, [pc, #4]	@ (8004f14 <HAL_RCC_OscConfig+0x264>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	604b      	str	r3, [r1, #4]
 8004f12:	e020      	b.n	8004f56 <HAL_RCC_OscConfig+0x2a6>
 8004f14:	40023800 	.word	0x40023800
 8004f18:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f1c:	4b99      	ldr	r3, [pc, #612]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	4996      	ldr	r1, [pc, #600]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f2e:	4b95      	ldr	r3, [pc, #596]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	061b      	lsls	r3, r3, #24
 8004f3c:	4991      	ldr	r1, [pc, #580]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fc06 	bl	8005758 <RCC_SetFlashLatencyFromMSIRange>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e1d3      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	0b5b      	lsrs	r3, r3, #13
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004f66:	4a87      	ldr	r2, [pc, #540]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8004f68:	6892      	ldr	r2, [r2, #8]
 8004f6a:	0912      	lsrs	r2, r2, #4
 8004f6c:	f002 020f 	and.w	r2, r2, #15
 8004f70:	4985      	ldr	r1, [pc, #532]	@ (8005188 <HAL_RCC_OscConfig+0x4d8>)
 8004f72:	5c8a      	ldrb	r2, [r1, r2]
 8004f74:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f76:	4a85      	ldr	r2, [pc, #532]	@ (800518c <HAL_RCC_OscConfig+0x4dc>)
 8004f78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f7a:	4b85      	ldr	r3, [pc, #532]	@ (8005190 <HAL_RCC_OscConfig+0x4e0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fb92 	bl	80046a8 <HAL_InitTick>
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d045      	beq.n	800501a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	e1b5      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d029      	beq.n	8004fee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f9a:	4b7e      	ldr	r3, [pc, #504]	@ (8005194 <HAL_RCC_OscConfig+0x4e4>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7ff fbce 	bl	8004740 <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fa8:	f7ff fbca 	bl	8004740 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e1a1      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004fba:	4b72      	ldr	r3, [pc, #456]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0f0      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	496c      	ldr	r1, [pc, #432]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	061b      	lsls	r3, r3, #24
 8004fe6:	4967      	ldr	r1, [pc, #412]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]
 8004fec:	e015      	b.n	800501a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fee:	4b69      	ldr	r3, [pc, #420]	@ (8005194 <HAL_RCC_OscConfig+0x4e4>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7ff fba4 	bl	8004740 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ffc:	f7ff fba0 	bl	8004740 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e177      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800500e:	4b5d      	ldr	r3, [pc, #372]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d030      	beq.n	8005088 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d016      	beq.n	800505c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800502e:	4b5a      	ldr	r3, [pc, #360]	@ (8005198 <HAL_RCC_OscConfig+0x4e8>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005034:	f7ff fb84 	bl	8004740 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800503c:	f7ff fb80 	bl	8004740 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e157      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800504e:	4b4d      	ldr	r3, [pc, #308]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8005050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x38c>
 800505a:	e015      	b.n	8005088 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800505c:	4b4e      	ldr	r3, [pc, #312]	@ (8005198 <HAL_RCC_OscConfig+0x4e8>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005062:	f7ff fb6d 	bl	8004740 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800506a:	f7ff fb69 	bl	8004740 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e140      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800507c:	4b41      	ldr	r3, [pc, #260]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 800507e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80b5 	beq.w	8005200 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005096:	2300      	movs	r3, #0
 8005098:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509a:	4b3a      	ldr	r3, [pc, #232]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10d      	bne.n	80050c2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	4b37      	ldr	r3, [pc, #220]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 80050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050aa:	4a36      	ldr	r2, [pc, #216]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b0:	6253      	str	r3, [r2, #36]	@ 0x24
 80050b2:	4b34      	ldr	r3, [pc, #208]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050be:	2301      	movs	r3, #1
 80050c0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c2:	4b36      	ldr	r3, [pc, #216]	@ (800519c <HAL_RCC_OscConfig+0x4ec>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d118      	bne.n	8005100 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ce:	4b33      	ldr	r3, [pc, #204]	@ (800519c <HAL_RCC_OscConfig+0x4ec>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a32      	ldr	r2, [pc, #200]	@ (800519c <HAL_RCC_OscConfig+0x4ec>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050da:	f7ff fb31 	bl	8004740 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e2:	f7ff fb2d 	bl	8004740 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b64      	cmp	r3, #100	@ 0x64
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e104      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	4b29      	ldr	r3, [pc, #164]	@ (800519c <HAL_RCC_OscConfig+0x4ec>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d106      	bne.n	8005116 <HAL_RCC_OscConfig+0x466>
 8005108:	4b1e      	ldr	r3, [pc, #120]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 800510a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510c:	4a1d      	ldr	r2, [pc, #116]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 800510e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005112:	6353      	str	r3, [r2, #52]	@ 0x34
 8005114:	e02d      	b.n	8005172 <HAL_RCC_OscConfig+0x4c2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10c      	bne.n	8005138 <HAL_RCC_OscConfig+0x488>
 800511e:	4b19      	ldr	r3, [pc, #100]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8005120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005122:	4a18      	ldr	r2, [pc, #96]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8005124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005128:	6353      	str	r3, [r2, #52]	@ 0x34
 800512a:	4b16      	ldr	r3, [pc, #88]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 800512c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512e:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8005130:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005134:	6353      	str	r3, [r2, #52]	@ 0x34
 8005136:	e01c      	b.n	8005172 <HAL_RCC_OscConfig+0x4c2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b05      	cmp	r3, #5
 800513e:	d10c      	bne.n	800515a <HAL_RCC_OscConfig+0x4aa>
 8005140:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8005142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005144:	4a0f      	ldr	r2, [pc, #60]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8005146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800514a:	6353      	str	r3, [r2, #52]	@ 0x34
 800514c:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 800514e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005150:	4a0c      	ldr	r2, [pc, #48]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8005152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005156:	6353      	str	r3, [r2, #52]	@ 0x34
 8005158:	e00b      	b.n	8005172 <HAL_RCC_OscConfig+0x4c2>
 800515a:	4b0a      	ldr	r3, [pc, #40]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 800515c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800515e:	4a09      	ldr	r2, [pc, #36]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8005160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005164:	6353      	str	r3, [r2, #52]	@ 0x34
 8005166:	4b07      	ldr	r3, [pc, #28]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 8005168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516a:	4a06      	ldr	r2, [pc, #24]	@ (8005184 <HAL_RCC_OscConfig+0x4d4>)
 800516c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005170:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d024      	beq.n	80051c4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517a:	f7ff fae1 	bl	8004740 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005180:	e019      	b.n	80051b6 <HAL_RCC_OscConfig+0x506>
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800
 8005188:	0800a758 	.word	0x0800a758
 800518c:	20000008 	.word	0x20000008
 8005190:	2000000c 	.word	0x2000000c
 8005194:	42470020 	.word	0x42470020
 8005198:	42470680 	.word	0x42470680
 800519c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7ff face 	bl	8004740 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e0a3      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051b6:	4b54      	ldr	r3, [pc, #336]	@ (8005308 <HAL_RCC_OscConfig+0x658>)
 80051b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ee      	beq.n	80051a0 <HAL_RCC_OscConfig+0x4f0>
 80051c2:	e014      	b.n	80051ee <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c4:	f7ff fabc 	bl	8004740 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051cc:	f7ff fab8 	bl	8004740 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e08d      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051e2:	4b49      	ldr	r3, [pc, #292]	@ (8005308 <HAL_RCC_OscConfig+0x658>)
 80051e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1ee      	bne.n	80051cc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051ee:	7ffb      	ldrb	r3, [r7, #31]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d105      	bne.n	8005200 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f4:	4b44      	ldr	r3, [pc, #272]	@ (8005308 <HAL_RCC_OscConfig+0x658>)
 80051f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f8:	4a43      	ldr	r2, [pc, #268]	@ (8005308 <HAL_RCC_OscConfig+0x658>)
 80051fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051fe:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d079      	beq.n	80052fc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b0c      	cmp	r3, #12
 800520c:	d056      	beq.n	80052bc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	2b02      	cmp	r3, #2
 8005214:	d13b      	bne.n	800528e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005216:	4b3d      	ldr	r3, [pc, #244]	@ (800530c <HAL_RCC_OscConfig+0x65c>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521c:	f7ff fa90 	bl	8004740 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005224:	f7ff fa8c 	bl	8004740 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e063      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005236:	4b34      	ldr	r3, [pc, #208]	@ (8005308 <HAL_RCC_OscConfig+0x658>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005242:	4b31      	ldr	r3, [pc, #196]	@ (8005308 <HAL_RCC_OscConfig+0x658>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	4319      	orrs	r1, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005258:	430b      	orrs	r3, r1
 800525a:	492b      	ldr	r1, [pc, #172]	@ (8005308 <HAL_RCC_OscConfig+0x658>)
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005260:	4b2a      	ldr	r3, [pc, #168]	@ (800530c <HAL_RCC_OscConfig+0x65c>)
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005266:	f7ff fa6b 	bl	8004740 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800526e:	f7ff fa67 	bl	8004740 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e03e      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005280:	4b21      	ldr	r3, [pc, #132]	@ (8005308 <HAL_RCC_OscConfig+0x658>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCC_OscConfig+0x5be>
 800528c:	e036      	b.n	80052fc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800528e:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <HAL_RCC_OscConfig+0x65c>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005294:	f7ff fa54 	bl	8004740 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800529c:	f7ff fa50 	bl	8004740 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e027      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052ae:	4b16      	ldr	r3, [pc, #88]	@ (8005308 <HAL_RCC_OscConfig+0x658>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x5ec>
 80052ba:	e01f      	b.n	80052fc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e01a      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005308 <HAL_RCC_OscConfig+0x658>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d8:	429a      	cmp	r2, r3
 80052da:	d10d      	bne.n	80052f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d106      	bne.n	80052f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800
 800530c:	42470060 	.word	0x42470060

08005310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e11a      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005324:	4b8f      	ldr	r3, [pc, #572]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d919      	bls.n	8005366 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d105      	bne.n	8005344 <HAL_RCC_ClockConfig+0x34>
 8005338:	4b8a      	ldr	r3, [pc, #552]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a89      	ldr	r2, [pc, #548]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 800533e:	f043 0304 	orr.w	r3, r3, #4
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	4b87      	ldr	r3, [pc, #540]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 0201 	bic.w	r2, r3, #1
 800534c:	4985      	ldr	r1, [pc, #532]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005354:	4b83      	ldr	r3, [pc, #524]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d001      	beq.n	8005366 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e0f9      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005372:	4b7d      	ldr	r3, [pc, #500]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	497a      	ldr	r1, [pc, #488]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 808e 	beq.w	80054ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b02      	cmp	r3, #2
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800539a:	4b73      	ldr	r3, [pc, #460]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d121      	bne.n	80053ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0d7      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d107      	bne.n	80053c2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d115      	bne.n	80053ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e0cb      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d107      	bne.n	80053da <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ca:	4b67      	ldr	r3, [pc, #412]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0bf      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80053da:	4b63      	ldr	r3, [pc, #396]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e0b7      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f023 0203 	bic.w	r2, r3, #3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	495c      	ldr	r1, [pc, #368]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053fc:	f7ff f9a0 	bl	8004740 <HAL_GetTick>
 8005400:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d112      	bne.n	8005430 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800540a:	e00a      	b.n	8005422 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800540c:	f7ff f998 	bl	8004740 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e09b      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005422:	4b51      	ldr	r3, [pc, #324]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 030c 	and.w	r3, r3, #12
 800542a:	2b08      	cmp	r3, #8
 800542c:	d1ee      	bne.n	800540c <HAL_RCC_ClockConfig+0xfc>
 800542e:	e03e      	b.n	80054ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d112      	bne.n	800545e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005438:	e00a      	b.n	8005450 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543a:	f7ff f981 	bl	8004740 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005448:	4293      	cmp	r3, r2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e084      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005450:	4b45      	ldr	r3, [pc, #276]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 030c 	and.w	r3, r3, #12
 8005458:	2b0c      	cmp	r3, #12
 800545a:	d1ee      	bne.n	800543a <HAL_RCC_ClockConfig+0x12a>
 800545c:	e027      	b.n	80054ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d11d      	bne.n	80054a2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005466:	e00a      	b.n	800547e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005468:	f7ff f96a 	bl	8004740 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e06d      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800547e:	4b3a      	ldr	r3, [pc, #232]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b04      	cmp	r3, #4
 8005488:	d1ee      	bne.n	8005468 <HAL_RCC_ClockConfig+0x158>
 800548a:	e010      	b.n	80054ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800548c:	f7ff f958 	bl	8004740 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e05b      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80054a2:	4b31      	ldr	r3, [pc, #196]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1ee      	bne.n	800548c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d219      	bcs.n	80054f0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d105      	bne.n	80054ce <HAL_RCC_ClockConfig+0x1be>
 80054c2:	4b28      	ldr	r3, [pc, #160]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a27      	ldr	r2, [pc, #156]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 80054c8:	f043 0304 	orr.w	r3, r3, #4
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	4b25      	ldr	r3, [pc, #148]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 0201 	bic.w	r2, r3, #1
 80054d6:	4923      	ldr	r1, [pc, #140]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b21      	ldr	r3, [pc, #132]	@ (8005564 <HAL_RCC_ClockConfig+0x254>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e034      	b.n	800555a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4917      	ldr	r1, [pc, #92]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800551a:	4b13      	ldr	r3, [pc, #76]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	490f      	ldr	r1, [pc, #60]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800552e:	f000 f823 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 8005532:	4602      	mov	r2, r0
 8005534:	4b0c      	ldr	r3, [pc, #48]	@ (8005568 <HAL_RCC_ClockConfig+0x258>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	490b      	ldr	r1, [pc, #44]	@ (800556c <HAL_RCC_ClockConfig+0x25c>)
 8005540:	5ccb      	ldrb	r3, [r1, r3]
 8005542:	fa22 f303 	lsr.w	r3, r2, r3
 8005546:	4a0a      	ldr	r2, [pc, #40]	@ (8005570 <HAL_RCC_ClockConfig+0x260>)
 8005548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800554a:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <HAL_RCC_ClockConfig+0x264>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff f8aa 	bl	80046a8 <HAL_InitTick>
 8005554:	4603      	mov	r3, r0
 8005556:	72fb      	strb	r3, [r7, #11]

  return status;
 8005558:	7afb      	ldrb	r3, [r7, #11]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40023c00 	.word	0x40023c00
 8005568:	40023800 	.word	0x40023800
 800556c:	0800a758 	.word	0x0800a758
 8005570:	20000008 	.word	0x20000008
 8005574:	2000000c 	.word	0x2000000c

08005578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800557c:	b08e      	sub	sp, #56	@ 0x38
 800557e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005580:	4b58      	ldr	r3, [pc, #352]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005588:	f003 030c 	and.w	r3, r3, #12
 800558c:	2b0c      	cmp	r3, #12
 800558e:	d00d      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0x34>
 8005590:	2b0c      	cmp	r3, #12
 8005592:	f200 8092 	bhi.w	80056ba <HAL_RCC_GetSysClockFreq+0x142>
 8005596:	2b04      	cmp	r3, #4
 8005598:	d002      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0x28>
 800559a:	2b08      	cmp	r3, #8
 800559c:	d003      	beq.n	80055a6 <HAL_RCC_GetSysClockFreq+0x2e>
 800559e:	e08c      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055a0:	4b51      	ldr	r3, [pc, #324]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x170>)
 80055a2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80055a4:	e097      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055a6:	4b51      	ldr	r3, [pc, #324]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x174>)
 80055a8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80055aa:	e094      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80055ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ae:	0c9b      	lsrs	r3, r3, #18
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	4b4e      	ldr	r3, [pc, #312]	@ (80056f0 <HAL_RCC_GetSysClockFreq+0x178>)
 80055b6:	5c9b      	ldrb	r3, [r3, r2]
 80055b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80055ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055bc:	0d9b      	lsrs	r3, r3, #22
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	3301      	adds	r3, #1
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055c6:	4b47      	ldr	r3, [pc, #284]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d021      	beq.n	8005616 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80055d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d4:	2200      	movs	r2, #0
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	61fa      	str	r2, [r7, #28]
 80055da:	4b44      	ldr	r3, [pc, #272]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x174>)
 80055dc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80055e0:	464a      	mov	r2, r9
 80055e2:	fb03 f202 	mul.w	r2, r3, r2
 80055e6:	2300      	movs	r3, #0
 80055e8:	4644      	mov	r4, r8
 80055ea:	fb04 f303 	mul.w	r3, r4, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	4a3e      	ldr	r2, [pc, #248]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x174>)
 80055f2:	4644      	mov	r4, r8
 80055f4:	fba4 0102 	umull	r0, r1, r4, r2
 80055f8:	440b      	add	r3, r1
 80055fa:	4619      	mov	r1, r3
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	2200      	movs	r2, #0
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	617a      	str	r2, [r7, #20]
 8005604:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005608:	f7fb fda0 	bl	800114c <__aeabi_uldivmod>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4613      	mov	r3, r2
 8005612:	637b      	str	r3, [r7, #52]	@ 0x34
 8005614:	e04e      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005618:	2200      	movs	r2, #0
 800561a:	469a      	mov	sl, r3
 800561c:	4693      	mov	fp, r2
 800561e:	4652      	mov	r2, sl
 8005620:	465b      	mov	r3, fp
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	0159      	lsls	r1, r3, #5
 800562c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005630:	0150      	lsls	r0, r2, #5
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	ebb2 080a 	subs.w	r8, r2, sl
 800563a:	eb63 090b 	sbc.w	r9, r3, fp
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800564a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800564e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005652:	ebb2 0408 	subs.w	r4, r2, r8
 8005656:	eb63 0509 	sbc.w	r5, r3, r9
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	00eb      	lsls	r3, r5, #3
 8005664:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005668:	00e2      	lsls	r2, r4, #3
 800566a:	4614      	mov	r4, r2
 800566c:	461d      	mov	r5, r3
 800566e:	eb14 030a 	adds.w	r3, r4, sl
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	eb45 030b 	adc.w	r3, r5, fp
 8005678:	607b      	str	r3, [r7, #4]
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005686:	4629      	mov	r1, r5
 8005688:	028b      	lsls	r3, r1, #10
 800568a:	4620      	mov	r0, r4
 800568c:	4629      	mov	r1, r5
 800568e:	4604      	mov	r4, r0
 8005690:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005694:	4601      	mov	r1, r0
 8005696:	028a      	lsls	r2, r1, #10
 8005698:	4610      	mov	r0, r2
 800569a:	4619      	mov	r1, r3
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	2200      	movs	r2, #0
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	60fa      	str	r2, [r7, #12]
 80056a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056a8:	f7fb fd50 	bl	800114c <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4613      	mov	r3, r2
 80056b2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 80056b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80056b8:	e00d      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80056ba:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	0b5b      	lsrs	r3, r3, #13
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	3301      	adds	r3, #1
 80056ca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80056d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3738      	adds	r7, #56	@ 0x38
 80056dc:	46bd      	mov	sp, r7
 80056de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e2:	bf00      	nop
 80056e4:	40023800 	.word	0x40023800
 80056e8:	00f42400 	.word	0x00f42400
 80056ec:	016e3600 	.word	0x016e3600
 80056f0:	0800a74c 	.word	0x0800a74c

080056f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f8:	4b02      	ldr	r3, [pc, #8]	@ (8005704 <HAL_RCC_GetHCLKFreq+0x10>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	20000008 	.word	0x20000008

08005708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800570c:	f7ff fff2 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005710:	4602      	mov	r2, r0
 8005712:	4b05      	ldr	r3, [pc, #20]	@ (8005728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	4903      	ldr	r1, [pc, #12]	@ (800572c <HAL_RCC_GetPCLK1Freq+0x24>)
 800571e:	5ccb      	ldrb	r3, [r1, r3]
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40023800 	.word	0x40023800
 800572c:	0800a768 	.word	0x0800a768

08005730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005734:	f7ff ffde 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	0adb      	lsrs	r3, r3, #11
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4903      	ldr	r1, [pc, #12]	@ (8005754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40023800 	.word	0x40023800
 8005754:	0800a768 	.word	0x0800a768

08005758 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005764:	4b29      	ldr	r3, [pc, #164]	@ (800580c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d12c      	bne.n	80057ca <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005770:	4b26      	ldr	r3, [pc, #152]	@ (800580c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800577c:	4b24      	ldr	r3, [pc, #144]	@ (8005810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	e016      	b.n	80057b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005788:	4b20      	ldr	r3, [pc, #128]	@ (800580c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	4a1f      	ldr	r2, [pc, #124]	@ (800580c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005792:	6253      	str	r3, [r2, #36]	@ 0x24
 8005794:	4b1d      	ldr	r3, [pc, #116]	@ (800580c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80057a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005810 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80057a8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80057aa:	4b18      	ldr	r3, [pc, #96]	@ (800580c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	4a17      	ldr	r2, [pc, #92]	@ (800580c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80057b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b4:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80057bc:	d105      	bne.n	80057ca <RCC_SetFlashLatencyFromMSIRange+0x72>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80057c4:	d101      	bne.n	80057ca <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80057c6:	2301      	movs	r3, #1
 80057c8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d105      	bne.n	80057dc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80057d0:	4b10      	ldr	r3, [pc, #64]	@ (8005814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057d6:	f043 0304 	orr.w	r3, r3, #4
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 0201 	bic.w	r2, r3, #1
 80057e4:	490b      	ldr	r1, [pc, #44]	@ (8005814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057ec:	4b09      	ldr	r3, [pc, #36]	@ (8005814 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d001      	beq.n	80057fe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40023800 	.word	0x40023800
 8005810:	40007000 	.word	0x40007000
 8005814:	40023c00 	.word	0x40023c00

08005818 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e07b      	b.n	8005922 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	d108      	bne.n	8005844 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800583a:	d009      	beq.n	8005850 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	61da      	str	r2, [r3, #28]
 8005842:	e005      	b.n	8005850 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fe fce6 	bl	800423c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005886:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d4:	ea42 0103 	orr.w	r1, r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	0c1b      	lsrs	r3, r3, #16
 80058ee:	f003 0104 	and.w	r1, r3, #4
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	f003 0210 	and.w	r2, r3, #16
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005910:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b088      	sub	sp, #32
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_SPI_Transmit+0x22>
 8005948:	2302      	movs	r3, #2
 800594a:	e12d      	b.n	8005ba8 <HAL_SPI_Transmit+0x27e>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005954:	f7fe fef4 	bl	8004740 <HAL_GetTick>
 8005958:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	d002      	beq.n	8005970 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800596a:	2302      	movs	r3, #2
 800596c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800596e:	e116      	b.n	8005b9e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_SPI_Transmit+0x52>
 8005976:	88fb      	ldrh	r3, [r7, #6]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005980:	e10d      	b.n	8005b9e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2203      	movs	r2, #3
 8005986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c8:	d10f      	bne.n	80059ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f4:	2b40      	cmp	r3, #64	@ 0x40
 80059f6:	d007      	beq.n	8005a08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a10:	d14f      	bne.n	8005ab2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_SPI_Transmit+0xf6>
 8005a1a:	8afb      	ldrh	r3, [r7, #22]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d142      	bne.n	8005aa6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a24:	881a      	ldrh	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a30:	1c9a      	adds	r2, r3, #2
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a44:	e02f      	b.n	8005aa6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d112      	bne.n	8005a7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a58:	881a      	ldrh	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a64:	1c9a      	adds	r2, r3, #2
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a78:	e015      	b.n	8005aa6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a7a:	f7fe fe61 	bl	8004740 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d803      	bhi.n	8005a92 <HAL_SPI_Transmit+0x168>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d102      	bne.n	8005a98 <HAL_SPI_Transmit+0x16e>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005aa4:	e07b      	b.n	8005b9e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1ca      	bne.n	8005a46 <HAL_SPI_Transmit+0x11c>
 8005ab0:	e050      	b.n	8005b54 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_SPI_Transmit+0x196>
 8005aba:	8afb      	ldrh	r3, [r7, #22]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d144      	bne.n	8005b4a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	330c      	adds	r3, #12
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ae6:	e030      	b.n	8005b4a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d113      	bne.n	8005b1e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	330c      	adds	r3, #12
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b1c:	e015      	b.n	8005b4a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b1e:	f7fe fe0f 	bl	8004740 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d803      	bhi.n	8005b36 <HAL_SPI_Transmit+0x20c>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d102      	bne.n	8005b3c <HAL_SPI_Transmit+0x212>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005b48:	e029      	b.n	8005b9e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1c9      	bne.n	8005ae8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 fbdf 	bl	800631c <SPI_EndRxTxTransaction>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	77fb      	strb	r3, [r7, #31]
 8005b94:	e003      	b.n	8005b9e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005ba6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d002      	beq.n	8005bd6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bd4:	e0fb      	b.n	8005dce <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bde:	d112      	bne.n	8005c06 <HAL_SPI_Receive+0x56>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10e      	bne.n	8005c06 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2204      	movs	r2, #4
 8005bec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f8ef 	bl	8005de0 <HAL_SPI_TransmitReceive>
 8005c02:	4603      	mov	r3, r0
 8005c04:	e0e8      	b.n	8005dd8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_SPI_Receive+0x64>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e0e1      	b.n	8005dd8 <HAL_SPI_Receive+0x228>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c1c:	f7fe fd90 	bl	8004740 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_SPI_Receive+0x7e>
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d102      	bne.n	8005c34 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c32:	e0cc      	b.n	8005dce <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2204      	movs	r2, #4
 8005c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	88fa      	ldrh	r2, [r7, #6]
 8005c52:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c7a:	d10f      	bne.n	8005c9c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca6:	2b40      	cmp	r3, #64	@ 0x40
 8005ca8:	d007      	beq.n	8005cba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d16a      	bne.n	8005d98 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cc2:	e032      	b.n	8005d2a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d115      	bne.n	8005cfe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f103 020c 	add.w	r2, r3, #12
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	7812      	ldrb	r2, [r2, #0]
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cfc:	e015      	b.n	8005d2a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cfe:	f7fe fd1f 	bl	8004740 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d803      	bhi.n	8005d16 <HAL_SPI_Receive+0x166>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d102      	bne.n	8005d1c <HAL_SPI_Receive+0x16c>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005d28:	e051      	b.n	8005dce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1c7      	bne.n	8005cc4 <HAL_SPI_Receive+0x114>
 8005d34:	e035      	b.n	8005da2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d113      	bne.n	8005d6c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4e:	b292      	uxth	r2, r2
 8005d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d56:	1c9a      	adds	r2, r3, #2
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d6a:	e015      	b.n	8005d98 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d6c:	f7fe fce8 	bl	8004740 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d803      	bhi.n	8005d84 <HAL_SPI_Receive+0x1d4>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d102      	bne.n	8005d8a <HAL_SPI_Receive+0x1da>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005d96:	e01a      	b.n	8005dce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1c9      	bne.n	8005d36 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 fa52 	bl	8006250 <SPI_EndRxTransaction>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	75fb      	strb	r3, [r7, #23]
 8005dc4:	e003      	b.n	8005dce <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	@ 0x30
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dee:	2301      	movs	r3, #1
 8005df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x26>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e198      	b.n	8006138 <HAL_SPI_TransmitReceive+0x358>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e0e:	f7fe fc97 	bl	8004740 <HAL_GetTick>
 8005e12:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e24:	887b      	ldrh	r3, [r7, #2]
 8005e26:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d00f      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x70>
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e36:	d107      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d103      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x68>
 8005e40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d003      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005e4e:	e16d      	b.n	800612c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0x82>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0x82>
 8005e5c:	887b      	ldrh	r3, [r7, #2]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005e68:	e160      	b.n	800612c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d003      	beq.n	8005e7e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2205      	movs	r2, #5
 8005e7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	887a      	ldrh	r2, [r7, #2]
 8005e8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	887a      	ldrh	r2, [r7, #2]
 8005e94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	887a      	ldrh	r2, [r7, #2]
 8005ea0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	887a      	ldrh	r2, [r7, #2]
 8005ea6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebe:	2b40      	cmp	r3, #64	@ 0x40
 8005ec0:	d007      	beq.n	8005ed2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ed0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eda:	d17c      	bne.n	8005fd6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x10a>
 8005ee4:	8b7b      	ldrh	r3, [r7, #26]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d16a      	bne.n	8005fc0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	881a      	ldrh	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	1c9a      	adds	r2, r3, #2
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f0e:	e057      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d11b      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x176>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d016      	beq.n	8005f56 <HAL_SPI_TransmitReceive+0x176>
 8005f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d113      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f32:	881a      	ldrh	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f3e:	1c9a      	adds	r2, r3, #2
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d119      	bne.n	8005f98 <HAL_SPI_TransmitReceive+0x1b8>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d014      	beq.n	8005f98 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	b292      	uxth	r2, r2
 8005f7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	1c9a      	adds	r2, r3, #2
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f94:	2301      	movs	r3, #1
 8005f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f98:	f7fe fbd2 	bl	8004740 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d80b      	bhi.n	8005fc0 <HAL_SPI_TransmitReceive+0x1e0>
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d007      	beq.n	8005fc0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005fbe:	e0b5      	b.n	800612c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1a2      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x130>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d19d      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x130>
 8005fd4:	e080      	b.n	80060d8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_SPI_TransmitReceive+0x204>
 8005fde:	8b7b      	ldrh	r3, [r7, #26]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d16f      	bne.n	80060c4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	7812      	ldrb	r2, [r2, #0]
 8005ff0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800600a:	e05b      	b.n	80060c4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d11c      	bne.n	8006054 <HAL_SPI_TransmitReceive+0x274>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d017      	beq.n	8006054 <HAL_SPI_TransmitReceive+0x274>
 8006024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006026:	2b01      	cmp	r3, #1
 8006028:	d114      	bne.n	8006054 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b01      	cmp	r3, #1
 8006060:	d119      	bne.n	8006096 <HAL_SPI_TransmitReceive+0x2b6>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d014      	beq.n	8006096 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006092:	2301      	movs	r3, #1
 8006094:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006096:	f7fe fb53 	bl	8004740 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d803      	bhi.n	80060ae <HAL_SPI_TransmitReceive+0x2ce>
 80060a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ac:	d102      	bne.n	80060b4 <HAL_SPI_TransmitReceive+0x2d4>
 80060ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d107      	bne.n	80060c4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80060c2:	e033      	b.n	800612c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d19e      	bne.n	800600c <HAL_SPI_TransmitReceive+0x22c>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d199      	bne.n	800600c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f91d 	bl	800631c <SPI_EndRxTxTransaction>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d006      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80060f4:	e01a      	b.n	800612c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006122:	e003      	b.n	800612c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006134:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006138:	4618      	mov	r0, r3
 800613a:	3730      	adds	r7, #48	@ 0x30
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4613      	mov	r3, r2
 800614e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006150:	f7fe faf6 	bl	8004740 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	4413      	add	r3, r2
 800615e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006160:	f7fe faee 	bl	8004740 <HAL_GetTick>
 8006164:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006166:	4b39      	ldr	r3, [pc, #228]	@ (800624c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	015b      	lsls	r3, r3, #5
 800616c:	0d1b      	lsrs	r3, r3, #20
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	fb02 f303 	mul.w	r3, r2, r3
 8006174:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006176:	e054      	b.n	8006222 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d050      	beq.n	8006222 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006180:	f7fe fade 	bl	8004740 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	429a      	cmp	r2, r3
 800618e:	d902      	bls.n	8006196 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d13d      	bne.n	8006212 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061ae:	d111      	bne.n	80061d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b8:	d004      	beq.n	80061c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c2:	d107      	bne.n	80061d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061dc:	d10f      	bne.n	80061fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e017      	b.n	8006242 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	3b01      	subs	r3, #1
 8006220:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4013      	ands	r3, r2
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	429a      	cmp	r2, r3
 8006230:	bf0c      	ite	eq
 8006232:	2301      	moveq	r3, #1
 8006234:	2300      	movne	r3, #0
 8006236:	b2db      	uxtb	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	429a      	cmp	r2, r3
 800623e:	d19b      	bne.n	8006178 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000008 	.word	0x20000008

08006250 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006264:	d111      	bne.n	800628a <SPI_EndRxTransaction+0x3a>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800626e:	d004      	beq.n	800627a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006278:	d107      	bne.n	800628a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006288:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006292:	d12a      	bne.n	80062ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800629c:	d012      	beq.n	80062c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2200      	movs	r2, #0
 80062a6:	2180      	movs	r1, #128	@ 0x80
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f7ff ff49 	bl	8006140 <SPI_WaitFlagStateUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d02d      	beq.n	8006310 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b8:	f043 0220 	orr.w	r2, r3, #32
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e026      	b.n	8006312 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2200      	movs	r2, #0
 80062cc:	2101      	movs	r1, #1
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff ff36 	bl	8006140 <SPI_WaitFlagStateUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01a      	beq.n	8006310 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062de:	f043 0220 	orr.w	r2, r3, #32
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e013      	b.n	8006312 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2200      	movs	r2, #0
 80062f2:	2101      	movs	r1, #1
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff ff23 	bl	8006140 <SPI_WaitFlagStateUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006304:	f043 0220 	orr.w	r2, r3, #32
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e000      	b.n	8006312 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006328:	4b1b      	ldr	r3, [pc, #108]	@ (8006398 <SPI_EndRxTxTransaction+0x7c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1b      	ldr	r2, [pc, #108]	@ (800639c <SPI_EndRxTxTransaction+0x80>)
 800632e:	fba2 2303 	umull	r2, r3, r2, r3
 8006332:	0d5b      	lsrs	r3, r3, #21
 8006334:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006338:	fb02 f303 	mul.w	r3, r2, r3
 800633c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006346:	d112      	bne.n	800636e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2200      	movs	r2, #0
 8006350:	2180      	movs	r1, #128	@ 0x80
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff fef4 	bl	8006140 <SPI_WaitFlagStateUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d016      	beq.n	800638c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006362:	f043 0220 	orr.w	r2, r3, #32
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e00f      	b.n	800638e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	3b01      	subs	r3, #1
 8006378:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006384:	2b80      	cmp	r3, #128	@ 0x80
 8006386:	d0f2      	beq.n	800636e <SPI_EndRxTxTransaction+0x52>
 8006388:	e000      	b.n	800638c <SPI_EndRxTxTransaction+0x70>
        break;
 800638a:	bf00      	nop
  }

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000008 	.word	0x20000008
 800639c:	165e9f81 	.word	0x165e9f81

080063a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e042      	b.n	8006438 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fd ffb0 	bl	800432c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	@ 0x24
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f9af 	bl	8006748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695a      	ldr	r2, [r3, #20]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	@ 0x28
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b20      	cmp	r3, #32
 800645e:	d16d      	bne.n	800653c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_UART_Transmit+0x2c>
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e066      	b.n	800653e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2221      	movs	r2, #33	@ 0x21
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800647e:	f7fe f95f 	bl	8004740 <HAL_GetTick>
 8006482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	88fa      	ldrh	r2, [r7, #6]
 800648e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006498:	d108      	bne.n	80064ac <HAL_UART_Transmit+0x6c>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	e003      	b.n	80064b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064b4:	e02a      	b.n	800650c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2200      	movs	r2, #0
 80064be:	2180      	movs	r1, #128	@ 0x80
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f8d2 	bl	800666a <UART_WaitOnFlagUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e036      	b.n	800653e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10b      	bne.n	80064ee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	3302      	adds	r3, #2
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	e007      	b.n	80064fe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	3301      	adds	r3, #1
 80064fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1cf      	bne.n	80064b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2200      	movs	r2, #0
 800651e:	2140      	movs	r1, #64	@ 0x40
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f8a2 	bl	800666a <UART_WaitOnFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e006      	b.n	800653e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800653c:	2302      	movs	r3, #2
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b08a      	sub	sp, #40	@ 0x28
 800654a:	af02      	add	r7, sp, #8
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b20      	cmp	r3, #32
 8006564:	d17c      	bne.n	8006660 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <HAL_UART_Receive+0x2c>
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e075      	b.n	8006662 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2222      	movs	r2, #34	@ 0x22
 8006580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800658a:	f7fe f8d9 	bl	8004740 <HAL_GetTick>
 800658e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	88fa      	ldrh	r2, [r7, #6]
 8006594:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	88fa      	ldrh	r2, [r7, #6]
 800659a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065a4:	d108      	bne.n	80065b8 <HAL_UART_Receive+0x72>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d104      	bne.n	80065b8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	e003      	b.n	80065c0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80065c0:	e043      	b.n	800664a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2200      	movs	r2, #0
 80065ca:	2120      	movs	r1, #32
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 f84c 	bl	800666a <UART_WaitOnFlagUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e042      	b.n	8006662 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10c      	bne.n	80065fc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	3302      	adds	r3, #2
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	e01f      	b.n	800663c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006604:	d007      	beq.n	8006616 <HAL_UART_Receive+0xd0>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <HAL_UART_Receive+0xde>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	e008      	b.n	8006636 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006630:	b2da      	uxtb	r2, r3
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	3301      	adds	r3, #1
 800663a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1b6      	bne.n	80065c2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	e000      	b.n	8006662 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006660:	2302      	movs	r3, #2
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b090      	sub	sp, #64	@ 0x40
 800666e:	af00      	add	r7, sp, #0
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	603b      	str	r3, [r7, #0]
 8006676:	4613      	mov	r3, r2
 8006678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800667a:	e050      	b.n	800671e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d04c      	beq.n	800671e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006686:	2b00      	cmp	r3, #0
 8006688:	d007      	beq.n	800669a <UART_WaitOnFlagUntilTimeout+0x30>
 800668a:	f7fe f859 	bl	8004740 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006696:	429a      	cmp	r2, r3
 8006698:	d241      	bcs.n	800671e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80066b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	330c      	adds	r3, #12
 80066b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066ba:	637a      	str	r2, [r7, #52]	@ 0x34
 80066bc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80066c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3314      	adds	r3, #20
 80066d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	613b      	str	r3, [r7, #16]
   return(result);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f023 0301 	bic.w	r3, r3, #1
 80066e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3314      	adds	r3, #20
 80066ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066ee:	623a      	str	r2, [r7, #32]
 80066f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	69f9      	ldr	r1, [r7, #28]
 80066f4:	6a3a      	ldr	r2, [r7, #32]
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e5      	bne.n	80066ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e00f      	b.n	800673e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	bf0c      	ite	eq
 800672e:	2301      	moveq	r3, #1
 8006730:	2300      	movne	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	429a      	cmp	r2, r3
 800673a:	d09f      	beq.n	800667c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3740      	adds	r7, #64	@ 0x40
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	4313      	orrs	r3, r2
 800677c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006788:	f023 030c 	bic.w	r3, r3, #12
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6812      	ldr	r2, [r2, #0]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	430b      	orrs	r3, r1
 8006794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699a      	ldr	r2, [r3, #24]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a55      	ldr	r2, [pc, #340]	@ (8006908 <UART_SetConfig+0x1c0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d103      	bne.n	80067be <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067b6:	f7fe ffbb 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	e002      	b.n	80067c4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067be:	f7fe ffa3 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 80067c2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067cc:	d14c      	bne.n	8006868 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	009a      	lsls	r2, r3, #2
 80067d8:	441a      	add	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e4:	4a49      	ldr	r2, [pc, #292]	@ (800690c <UART_SetConfig+0x1c4>)
 80067e6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	0119      	lsls	r1, r3, #4
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	009a      	lsls	r2, r3, #2
 80067f8:	441a      	add	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	fbb2 f2f3 	udiv	r2, r2, r3
 8006804:	4b41      	ldr	r3, [pc, #260]	@ (800690c <UART_SetConfig+0x1c4>)
 8006806:	fba3 0302 	umull	r0, r3, r3, r2
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	2064      	movs	r0, #100	@ 0x64
 800680e:	fb00 f303 	mul.w	r3, r0, r3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	3332      	adds	r3, #50	@ 0x32
 8006818:	4a3c      	ldr	r2, [pc, #240]	@ (800690c <UART_SetConfig+0x1c4>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006826:	4419      	add	r1, r3
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009a      	lsls	r2, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	fbb2 f2f3 	udiv	r2, r2, r3
 800683e:	4b33      	ldr	r3, [pc, #204]	@ (800690c <UART_SetConfig+0x1c4>)
 8006840:	fba3 0302 	umull	r0, r3, r3, r2
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	2064      	movs	r0, #100	@ 0x64
 8006848:	fb00 f303 	mul.w	r3, r0, r3
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	3332      	adds	r3, #50	@ 0x32
 8006852:	4a2e      	ldr	r2, [pc, #184]	@ (800690c <UART_SetConfig+0x1c4>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	f003 0207 	and.w	r2, r3, #7
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	440a      	add	r2, r1
 8006864:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006866:	e04a      	b.n	80068fe <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009a      	lsls	r2, r3, #2
 8006872:	441a      	add	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	fbb2 f3f3 	udiv	r3, r2, r3
 800687e:	4a23      	ldr	r2, [pc, #140]	@ (800690c <UART_SetConfig+0x1c4>)
 8006880:	fba2 2303 	umull	r2, r3, r2, r3
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	0119      	lsls	r1, r3, #4
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4613      	mov	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	009a      	lsls	r2, r3, #2
 8006892:	441a      	add	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	fbb2 f2f3 	udiv	r2, r2, r3
 800689e:	4b1b      	ldr	r3, [pc, #108]	@ (800690c <UART_SetConfig+0x1c4>)
 80068a0:	fba3 0302 	umull	r0, r3, r3, r2
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	2064      	movs	r0, #100	@ 0x64
 80068a8:	fb00 f303 	mul.w	r3, r0, r3
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	3332      	adds	r3, #50	@ 0x32
 80068b2:	4a16      	ldr	r2, [pc, #88]	@ (800690c <UART_SetConfig+0x1c4>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068be:	4419      	add	r1, r3
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009a      	lsls	r2, r3, #2
 80068ca:	441a      	add	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80068d6:	4b0d      	ldr	r3, [pc, #52]	@ (800690c <UART_SetConfig+0x1c4>)
 80068d8:	fba3 0302 	umull	r0, r3, r3, r2
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	2064      	movs	r0, #100	@ 0x64
 80068e0:	fb00 f303 	mul.w	r3, r0, r3
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	011b      	lsls	r3, r3, #4
 80068e8:	3332      	adds	r3, #50	@ 0x32
 80068ea:	4a08      	ldr	r2, [pc, #32]	@ (800690c <UART_SetConfig+0x1c4>)
 80068ec:	fba2 2303 	umull	r2, r3, r2, r3
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	f003 020f 	and.w	r2, r3, #15
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	440a      	add	r2, r1
 80068fc:	609a      	str	r2, [r3, #8]
}
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40013800 	.word	0x40013800
 800690c:	51eb851f 	.word	0x51eb851f

08006910 <__cvt>:
 8006910:	2b00      	cmp	r3, #0
 8006912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006916:	461d      	mov	r5, r3
 8006918:	bfbb      	ittet	lt
 800691a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800691e:	461d      	movlt	r5, r3
 8006920:	2300      	movge	r3, #0
 8006922:	232d      	movlt	r3, #45	@ 0x2d
 8006924:	b088      	sub	sp, #32
 8006926:	4614      	mov	r4, r2
 8006928:	bfb8      	it	lt
 800692a:	4614      	movlt	r4, r2
 800692c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800692e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006930:	7013      	strb	r3, [r2, #0]
 8006932:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006934:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006938:	f023 0820 	bic.w	r8, r3, #32
 800693c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006940:	d005      	beq.n	800694e <__cvt+0x3e>
 8006942:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006946:	d100      	bne.n	800694a <__cvt+0x3a>
 8006948:	3601      	adds	r6, #1
 800694a:	2302      	movs	r3, #2
 800694c:	e000      	b.n	8006950 <__cvt+0x40>
 800694e:	2303      	movs	r3, #3
 8006950:	aa07      	add	r2, sp, #28
 8006952:	9204      	str	r2, [sp, #16]
 8006954:	aa06      	add	r2, sp, #24
 8006956:	e9cd a202 	strd	sl, r2, [sp, #8]
 800695a:	e9cd 3600 	strd	r3, r6, [sp]
 800695e:	4622      	mov	r2, r4
 8006960:	462b      	mov	r3, r5
 8006962:	f000 ff85 	bl	8007870 <_dtoa_r>
 8006966:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800696a:	4607      	mov	r7, r0
 800696c:	d119      	bne.n	80069a2 <__cvt+0x92>
 800696e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006970:	07db      	lsls	r3, r3, #31
 8006972:	d50e      	bpl.n	8006992 <__cvt+0x82>
 8006974:	eb00 0906 	add.w	r9, r0, r6
 8006978:	2200      	movs	r2, #0
 800697a:	2300      	movs	r3, #0
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7fa f82a 	bl	80009d8 <__aeabi_dcmpeq>
 8006984:	b108      	cbz	r0, 800698a <__cvt+0x7a>
 8006986:	f8cd 901c 	str.w	r9, [sp, #28]
 800698a:	2230      	movs	r2, #48	@ 0x30
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	454b      	cmp	r3, r9
 8006990:	d31e      	bcc.n	80069d0 <__cvt+0xc0>
 8006992:	4638      	mov	r0, r7
 8006994:	9b07      	ldr	r3, [sp, #28]
 8006996:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006998:	1bdb      	subs	r3, r3, r7
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	b008      	add	sp, #32
 800699e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069a6:	eb00 0906 	add.w	r9, r0, r6
 80069aa:	d1e5      	bne.n	8006978 <__cvt+0x68>
 80069ac:	7803      	ldrb	r3, [r0, #0]
 80069ae:	2b30      	cmp	r3, #48	@ 0x30
 80069b0:	d10a      	bne.n	80069c8 <__cvt+0xb8>
 80069b2:	2200      	movs	r2, #0
 80069b4:	2300      	movs	r3, #0
 80069b6:	4620      	mov	r0, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7fa f80d 	bl	80009d8 <__aeabi_dcmpeq>
 80069be:	b918      	cbnz	r0, 80069c8 <__cvt+0xb8>
 80069c0:	f1c6 0601 	rsb	r6, r6, #1
 80069c4:	f8ca 6000 	str.w	r6, [sl]
 80069c8:	f8da 3000 	ldr.w	r3, [sl]
 80069cc:	4499      	add	r9, r3
 80069ce:	e7d3      	b.n	8006978 <__cvt+0x68>
 80069d0:	1c59      	adds	r1, r3, #1
 80069d2:	9107      	str	r1, [sp, #28]
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	e7d9      	b.n	800698c <__cvt+0x7c>

080069d8 <__exponent>:
 80069d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069da:	2900      	cmp	r1, #0
 80069dc:	bfb6      	itet	lt
 80069de:	232d      	movlt	r3, #45	@ 0x2d
 80069e0:	232b      	movge	r3, #43	@ 0x2b
 80069e2:	4249      	neglt	r1, r1
 80069e4:	2909      	cmp	r1, #9
 80069e6:	7002      	strb	r2, [r0, #0]
 80069e8:	7043      	strb	r3, [r0, #1]
 80069ea:	dd29      	ble.n	8006a40 <__exponent+0x68>
 80069ec:	f10d 0307 	add.w	r3, sp, #7
 80069f0:	461d      	mov	r5, r3
 80069f2:	270a      	movs	r7, #10
 80069f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80069f8:	461a      	mov	r2, r3
 80069fa:	fb07 1416 	mls	r4, r7, r6, r1
 80069fe:	3430      	adds	r4, #48	@ 0x30
 8006a00:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a04:	460c      	mov	r4, r1
 8006a06:	2c63      	cmp	r4, #99	@ 0x63
 8006a08:	4631      	mov	r1, r6
 8006a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a0e:	dcf1      	bgt.n	80069f4 <__exponent+0x1c>
 8006a10:	3130      	adds	r1, #48	@ 0x30
 8006a12:	1e94      	subs	r4, r2, #2
 8006a14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a18:	4623      	mov	r3, r4
 8006a1a:	1c41      	adds	r1, r0, #1
 8006a1c:	42ab      	cmp	r3, r5
 8006a1e:	d30a      	bcc.n	8006a36 <__exponent+0x5e>
 8006a20:	f10d 0309 	add.w	r3, sp, #9
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	42ac      	cmp	r4, r5
 8006a28:	bf88      	it	hi
 8006a2a:	2300      	movhi	r3, #0
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	4403      	add	r3, r0
 8006a30:	1a18      	subs	r0, r3, r0
 8006a32:	b003      	add	sp, #12
 8006a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a36:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a3a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a3e:	e7ed      	b.n	8006a1c <__exponent+0x44>
 8006a40:	2330      	movs	r3, #48	@ 0x30
 8006a42:	3130      	adds	r1, #48	@ 0x30
 8006a44:	7083      	strb	r3, [r0, #2]
 8006a46:	70c1      	strb	r1, [r0, #3]
 8006a48:	1d03      	adds	r3, r0, #4
 8006a4a:	e7f1      	b.n	8006a30 <__exponent+0x58>

08006a4c <_printf_float>:
 8006a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a50:	b091      	sub	sp, #68	@ 0x44
 8006a52:	460c      	mov	r4, r1
 8006a54:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006a58:	4616      	mov	r6, r2
 8006a5a:	461f      	mov	r7, r3
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	f000 fdf9 	bl	8007654 <_localeconv_r>
 8006a62:	6803      	ldr	r3, [r0, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	9308      	str	r3, [sp, #32]
 8006a68:	f7f9 fb8a 	bl	8000180 <strlen>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006a70:	f8d8 3000 	ldr.w	r3, [r8]
 8006a74:	9009      	str	r0, [sp, #36]	@ 0x24
 8006a76:	3307      	adds	r3, #7
 8006a78:	f023 0307 	bic.w	r3, r3, #7
 8006a7c:	f103 0208 	add.w	r2, r3, #8
 8006a80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a84:	f8d4 b000 	ldr.w	fp, [r4]
 8006a88:	f8c8 2000 	str.w	r2, [r8]
 8006a8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a96:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006aa2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8006d18 <_printf_float+0x2cc>)
 8006aa8:	f7f9 ffc8 	bl	8000a3c <__aeabi_dcmpun>
 8006aac:	bb70      	cbnz	r0, 8006b0c <_printf_float+0xc0>
 8006aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab6:	4b98      	ldr	r3, [pc, #608]	@ (8006d18 <_printf_float+0x2cc>)
 8006ab8:	f7f9 ffa2 	bl	8000a00 <__aeabi_dcmple>
 8006abc:	bb30      	cbnz	r0, 8006b0c <_printf_float+0xc0>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	f7f9 ff91 	bl	80009ec <__aeabi_dcmplt>
 8006aca:	b110      	cbz	r0, 8006ad2 <_printf_float+0x86>
 8006acc:	232d      	movs	r3, #45	@ 0x2d
 8006ace:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ad2:	4a92      	ldr	r2, [pc, #584]	@ (8006d1c <_printf_float+0x2d0>)
 8006ad4:	4b92      	ldr	r3, [pc, #584]	@ (8006d20 <_printf_float+0x2d4>)
 8006ad6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006ada:	bf94      	ite	ls
 8006adc:	4690      	movls	r8, r2
 8006ade:	4698      	movhi	r8, r3
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	f04f 0900 	mov.w	r9, #0
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	f02b 0304 	bic.w	r3, fp, #4
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	4633      	mov	r3, r6
 8006af0:	4621      	mov	r1, r4
 8006af2:	4628      	mov	r0, r5
 8006af4:	9700      	str	r7, [sp, #0]
 8006af6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006af8:	f000 f9d4 	bl	8006ea4 <_printf_common>
 8006afc:	3001      	adds	r0, #1
 8006afe:	f040 8090 	bne.w	8006c22 <_printf_float+0x1d6>
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	b011      	add	sp, #68	@ 0x44
 8006b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	4640      	mov	r0, r8
 8006b12:	4649      	mov	r1, r9
 8006b14:	f7f9 ff92 	bl	8000a3c <__aeabi_dcmpun>
 8006b18:	b148      	cbz	r0, 8006b2e <_printf_float+0xe2>
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bfb8      	it	lt
 8006b20:	232d      	movlt	r3, #45	@ 0x2d
 8006b22:	4a80      	ldr	r2, [pc, #512]	@ (8006d24 <_printf_float+0x2d8>)
 8006b24:	bfb8      	it	lt
 8006b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d28 <_printf_float+0x2dc>)
 8006b2c:	e7d3      	b.n	8006ad6 <_printf_float+0x8a>
 8006b2e:	6863      	ldr	r3, [r4, #4]
 8006b30:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	d13f      	bne.n	8006bb8 <_printf_float+0x16c>
 8006b38:	2306      	movs	r3, #6
 8006b3a:	6063      	str	r3, [r4, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006b42:	6023      	str	r3, [r4, #0]
 8006b44:	9206      	str	r2, [sp, #24]
 8006b46:	aa0e      	add	r2, sp, #56	@ 0x38
 8006b48:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006b4c:	aa0d      	add	r2, sp, #52	@ 0x34
 8006b4e:	9203      	str	r2, [sp, #12]
 8006b50:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006b54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006b58:	6863      	ldr	r3, [r4, #4]
 8006b5a:	4642      	mov	r2, r8
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	4628      	mov	r0, r5
 8006b60:	464b      	mov	r3, r9
 8006b62:	910a      	str	r1, [sp, #40]	@ 0x28
 8006b64:	f7ff fed4 	bl	8006910 <__cvt>
 8006b68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	2947      	cmp	r1, #71	@ 0x47
 8006b6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006b70:	d128      	bne.n	8006bc4 <_printf_float+0x178>
 8006b72:	1cc8      	adds	r0, r1, #3
 8006b74:	db02      	blt.n	8006b7c <_printf_float+0x130>
 8006b76:	6863      	ldr	r3, [r4, #4]
 8006b78:	4299      	cmp	r1, r3
 8006b7a:	dd40      	ble.n	8006bfe <_printf_float+0x1b2>
 8006b7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b80:	fa5f fa8a 	uxtb.w	sl, sl
 8006b84:	4652      	mov	r2, sl
 8006b86:	3901      	subs	r1, #1
 8006b88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b8c:	910d      	str	r1, [sp, #52]	@ 0x34
 8006b8e:	f7ff ff23 	bl	80069d8 <__exponent>
 8006b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b94:	4681      	mov	r9, r0
 8006b96:	1813      	adds	r3, r2, r0
 8006b98:	2a01      	cmp	r2, #1
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	dc02      	bgt.n	8006ba4 <_printf_float+0x158>
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	07d2      	lsls	r2, r2, #31
 8006ba2:	d501      	bpl.n	8006ba8 <_printf_float+0x15c>
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	6123      	str	r3, [r4, #16]
 8006ba8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d09e      	beq.n	8006aee <_printf_float+0xa2>
 8006bb0:	232d      	movs	r3, #45	@ 0x2d
 8006bb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bb6:	e79a      	b.n	8006aee <_printf_float+0xa2>
 8006bb8:	2947      	cmp	r1, #71	@ 0x47
 8006bba:	d1bf      	bne.n	8006b3c <_printf_float+0xf0>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1bd      	bne.n	8006b3c <_printf_float+0xf0>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e7ba      	b.n	8006b3a <_printf_float+0xee>
 8006bc4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bc8:	d9dc      	bls.n	8006b84 <_printf_float+0x138>
 8006bca:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006bce:	d118      	bne.n	8006c02 <_printf_float+0x1b6>
 8006bd0:	2900      	cmp	r1, #0
 8006bd2:	6863      	ldr	r3, [r4, #4]
 8006bd4:	dd0b      	ble.n	8006bee <_printf_float+0x1a2>
 8006bd6:	6121      	str	r1, [r4, #16]
 8006bd8:	b913      	cbnz	r3, 8006be0 <_printf_float+0x194>
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	07d0      	lsls	r0, r2, #31
 8006bde:	d502      	bpl.n	8006be6 <_printf_float+0x19a>
 8006be0:	3301      	adds	r3, #1
 8006be2:	440b      	add	r3, r1
 8006be4:	6123      	str	r3, [r4, #16]
 8006be6:	f04f 0900 	mov.w	r9, #0
 8006bea:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006bec:	e7dc      	b.n	8006ba8 <_printf_float+0x15c>
 8006bee:	b913      	cbnz	r3, 8006bf6 <_printf_float+0x1aa>
 8006bf0:	6822      	ldr	r2, [r4, #0]
 8006bf2:	07d2      	lsls	r2, r2, #31
 8006bf4:	d501      	bpl.n	8006bfa <_printf_float+0x1ae>
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	e7f4      	b.n	8006be4 <_printf_float+0x198>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e7f2      	b.n	8006be4 <_printf_float+0x198>
 8006bfe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c04:	4299      	cmp	r1, r3
 8006c06:	db05      	blt.n	8006c14 <_printf_float+0x1c8>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	6121      	str	r1, [r4, #16]
 8006c0c:	07d8      	lsls	r0, r3, #31
 8006c0e:	d5ea      	bpl.n	8006be6 <_printf_float+0x19a>
 8006c10:	1c4b      	adds	r3, r1, #1
 8006c12:	e7e7      	b.n	8006be4 <_printf_float+0x198>
 8006c14:	2900      	cmp	r1, #0
 8006c16:	bfcc      	ite	gt
 8006c18:	2201      	movgt	r2, #1
 8006c1a:	f1c1 0202 	rsble	r2, r1, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	e7e0      	b.n	8006be4 <_printf_float+0x198>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	055a      	lsls	r2, r3, #21
 8006c26:	d407      	bmi.n	8006c38 <_printf_float+0x1ec>
 8006c28:	6923      	ldr	r3, [r4, #16]
 8006c2a:	4642      	mov	r2, r8
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4628      	mov	r0, r5
 8006c30:	47b8      	blx	r7
 8006c32:	3001      	adds	r0, #1
 8006c34:	d12b      	bne.n	8006c8e <_printf_float+0x242>
 8006c36:	e764      	b.n	8006b02 <_printf_float+0xb6>
 8006c38:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c3c:	f240 80dc 	bls.w	8006df8 <_printf_float+0x3ac>
 8006c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c44:	2200      	movs	r2, #0
 8006c46:	2300      	movs	r3, #0
 8006c48:	f7f9 fec6 	bl	80009d8 <__aeabi_dcmpeq>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d033      	beq.n	8006cb8 <_printf_float+0x26c>
 8006c50:	2301      	movs	r3, #1
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	4a35      	ldr	r2, [pc, #212]	@ (8006d2c <_printf_float+0x2e0>)
 8006c58:	47b8      	blx	r7
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	f43f af51 	beq.w	8006b02 <_printf_float+0xb6>
 8006c60:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006c64:	4543      	cmp	r3, r8
 8006c66:	db02      	blt.n	8006c6e <_printf_float+0x222>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	07d8      	lsls	r0, r3, #31
 8006c6c:	d50f      	bpl.n	8006c8e <_printf_float+0x242>
 8006c6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c72:	4631      	mov	r1, r6
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b8      	blx	r7
 8006c78:	3001      	adds	r0, #1
 8006c7a:	f43f af42 	beq.w	8006b02 <_printf_float+0xb6>
 8006c7e:	f04f 0900 	mov.w	r9, #0
 8006c82:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c86:	f104 0a1a 	add.w	sl, r4, #26
 8006c8a:	45c8      	cmp	r8, r9
 8006c8c:	dc09      	bgt.n	8006ca2 <_printf_float+0x256>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	079b      	lsls	r3, r3, #30
 8006c92:	f100 8102 	bmi.w	8006e9a <_printf_float+0x44e>
 8006c96:	68e0      	ldr	r0, [r4, #12]
 8006c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c9a:	4298      	cmp	r0, r3
 8006c9c:	bfb8      	it	lt
 8006c9e:	4618      	movlt	r0, r3
 8006ca0:	e731      	b.n	8006b06 <_printf_float+0xba>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b8      	blx	r7
 8006cac:	3001      	adds	r0, #1
 8006cae:	f43f af28 	beq.w	8006b02 <_printf_float+0xb6>
 8006cb2:	f109 0901 	add.w	r9, r9, #1
 8006cb6:	e7e8      	b.n	8006c8a <_printf_float+0x23e>
 8006cb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dc38      	bgt.n	8006d30 <_printf_float+0x2e4>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	4a19      	ldr	r2, [pc, #100]	@ (8006d2c <_printf_float+0x2e0>)
 8006cc6:	47b8      	blx	r7
 8006cc8:	3001      	adds	r0, #1
 8006cca:	f43f af1a 	beq.w	8006b02 <_printf_float+0xb6>
 8006cce:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006cd2:	ea59 0303 	orrs.w	r3, r9, r3
 8006cd6:	d102      	bne.n	8006cde <_printf_float+0x292>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	07d9      	lsls	r1, r3, #31
 8006cdc:	d5d7      	bpl.n	8006c8e <_printf_float+0x242>
 8006cde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f af0a 	beq.w	8006b02 <_printf_float+0xb6>
 8006cee:	f04f 0a00 	mov.w	sl, #0
 8006cf2:	f104 0b1a 	add.w	fp, r4, #26
 8006cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cf8:	425b      	negs	r3, r3
 8006cfa:	4553      	cmp	r3, sl
 8006cfc:	dc01      	bgt.n	8006d02 <_printf_float+0x2b6>
 8006cfe:	464b      	mov	r3, r9
 8006d00:	e793      	b.n	8006c2a <_printf_float+0x1de>
 8006d02:	2301      	movs	r3, #1
 8006d04:	465a      	mov	r2, fp
 8006d06:	4631      	mov	r1, r6
 8006d08:	4628      	mov	r0, r5
 8006d0a:	47b8      	blx	r7
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	f43f aef8 	beq.w	8006b02 <_printf_float+0xb6>
 8006d12:	f10a 0a01 	add.w	sl, sl, #1
 8006d16:	e7ee      	b.n	8006cf6 <_printf_float+0x2aa>
 8006d18:	7fefffff 	.word	0x7fefffff
 8006d1c:	0800a770 	.word	0x0800a770
 8006d20:	0800a774 	.word	0x0800a774
 8006d24:	0800a778 	.word	0x0800a778
 8006d28:	0800a77c 	.word	0x0800a77c
 8006d2c:	0800a780 	.word	0x0800a780
 8006d30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d32:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d36:	4553      	cmp	r3, sl
 8006d38:	bfa8      	it	ge
 8006d3a:	4653      	movge	r3, sl
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	4699      	mov	r9, r3
 8006d40:	dc36      	bgt.n	8006db0 <_printf_float+0x364>
 8006d42:	f04f 0b00 	mov.w	fp, #0
 8006d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d4a:	f104 021a 	add.w	r2, r4, #26
 8006d4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d52:	eba3 0309 	sub.w	r3, r3, r9
 8006d56:	455b      	cmp	r3, fp
 8006d58:	dc31      	bgt.n	8006dbe <_printf_float+0x372>
 8006d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d5c:	459a      	cmp	sl, r3
 8006d5e:	dc3a      	bgt.n	8006dd6 <_printf_float+0x38a>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	07da      	lsls	r2, r3, #31
 8006d64:	d437      	bmi.n	8006dd6 <_printf_float+0x38a>
 8006d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d68:	ebaa 0903 	sub.w	r9, sl, r3
 8006d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8006d72:	4599      	cmp	r9, r3
 8006d74:	bfa8      	it	ge
 8006d76:	4699      	movge	r9, r3
 8006d78:	f1b9 0f00 	cmp.w	r9, #0
 8006d7c:	dc33      	bgt.n	8006de6 <_printf_float+0x39a>
 8006d7e:	f04f 0800 	mov.w	r8, #0
 8006d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d86:	f104 0b1a 	add.w	fp, r4, #26
 8006d8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d90:	eba3 0309 	sub.w	r3, r3, r9
 8006d94:	4543      	cmp	r3, r8
 8006d96:	f77f af7a 	ble.w	8006c8e <_printf_float+0x242>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	465a      	mov	r2, fp
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	f43f aeac 	beq.w	8006b02 <_printf_float+0xb6>
 8006daa:	f108 0801 	add.w	r8, r8, #1
 8006dae:	e7ec      	b.n	8006d8a <_printf_float+0x33e>
 8006db0:	4642      	mov	r2, r8
 8006db2:	4631      	mov	r1, r6
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b8      	blx	r7
 8006db8:	3001      	adds	r0, #1
 8006dba:	d1c2      	bne.n	8006d42 <_printf_float+0x2f6>
 8006dbc:	e6a1      	b.n	8006b02 <_printf_float+0xb6>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	920a      	str	r2, [sp, #40]	@ 0x28
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	f43f ae9a 	beq.w	8006b02 <_printf_float+0xb6>
 8006dce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dd0:	f10b 0b01 	add.w	fp, fp, #1
 8006dd4:	e7bb      	b.n	8006d4e <_printf_float+0x302>
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b8      	blx	r7
 8006de0:	3001      	adds	r0, #1
 8006de2:	d1c0      	bne.n	8006d66 <_printf_float+0x31a>
 8006de4:	e68d      	b.n	8006b02 <_printf_float+0xb6>
 8006de6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006de8:	464b      	mov	r3, r9
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	4442      	add	r2, r8
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	d1c3      	bne.n	8006d7e <_printf_float+0x332>
 8006df6:	e684      	b.n	8006b02 <_printf_float+0xb6>
 8006df8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006dfc:	f1ba 0f01 	cmp.w	sl, #1
 8006e00:	dc01      	bgt.n	8006e06 <_printf_float+0x3ba>
 8006e02:	07db      	lsls	r3, r3, #31
 8006e04:	d536      	bpl.n	8006e74 <_printf_float+0x428>
 8006e06:	2301      	movs	r3, #1
 8006e08:	4642      	mov	r2, r8
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b8      	blx	r7
 8006e10:	3001      	adds	r0, #1
 8006e12:	f43f ae76 	beq.w	8006b02 <_printf_float+0xb6>
 8006e16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f ae6e 	beq.w	8006b02 <_printf_float+0xb6>
 8006e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e32:	f7f9 fdd1 	bl	80009d8 <__aeabi_dcmpeq>
 8006e36:	b9c0      	cbnz	r0, 8006e6a <_printf_float+0x41e>
 8006e38:	4653      	mov	r3, sl
 8006e3a:	f108 0201 	add.w	r2, r8, #1
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	d10c      	bne.n	8006e62 <_printf_float+0x416>
 8006e48:	e65b      	b.n	8006b02 <_printf_float+0xb6>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	465a      	mov	r2, fp
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	f43f ae54 	beq.w	8006b02 <_printf_float+0xb6>
 8006e5a:	f108 0801 	add.w	r8, r8, #1
 8006e5e:	45d0      	cmp	r8, sl
 8006e60:	dbf3      	blt.n	8006e4a <_printf_float+0x3fe>
 8006e62:	464b      	mov	r3, r9
 8006e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e68:	e6e0      	b.n	8006c2c <_printf_float+0x1e0>
 8006e6a:	f04f 0800 	mov.w	r8, #0
 8006e6e:	f104 0b1a 	add.w	fp, r4, #26
 8006e72:	e7f4      	b.n	8006e5e <_printf_float+0x412>
 8006e74:	2301      	movs	r3, #1
 8006e76:	4642      	mov	r2, r8
 8006e78:	e7e1      	b.n	8006e3e <_printf_float+0x3f2>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	464a      	mov	r2, r9
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	f43f ae3c 	beq.w	8006b02 <_printf_float+0xb6>
 8006e8a:	f108 0801 	add.w	r8, r8, #1
 8006e8e:	68e3      	ldr	r3, [r4, #12]
 8006e90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e92:	1a5b      	subs	r3, r3, r1
 8006e94:	4543      	cmp	r3, r8
 8006e96:	dcf0      	bgt.n	8006e7a <_printf_float+0x42e>
 8006e98:	e6fd      	b.n	8006c96 <_printf_float+0x24a>
 8006e9a:	f04f 0800 	mov.w	r8, #0
 8006e9e:	f104 0919 	add.w	r9, r4, #25
 8006ea2:	e7f4      	b.n	8006e8e <_printf_float+0x442>

08006ea4 <_printf_common>:
 8006ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea8:	4616      	mov	r6, r2
 8006eaa:	4698      	mov	r8, r3
 8006eac:	688a      	ldr	r2, [r1, #8]
 8006eae:	690b      	ldr	r3, [r1, #16]
 8006eb0:	4607      	mov	r7, r0
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	bfb8      	it	lt
 8006eb6:	4613      	movlt	r3, r2
 8006eb8:	6033      	str	r3, [r6, #0]
 8006eba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ec4:	b10a      	cbz	r2, 8006eca <_printf_common+0x26>
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	6033      	str	r3, [r6, #0]
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	0699      	lsls	r1, r3, #26
 8006ece:	bf42      	ittt	mi
 8006ed0:	6833      	ldrmi	r3, [r6, #0]
 8006ed2:	3302      	addmi	r3, #2
 8006ed4:	6033      	strmi	r3, [r6, #0]
 8006ed6:	6825      	ldr	r5, [r4, #0]
 8006ed8:	f015 0506 	ands.w	r5, r5, #6
 8006edc:	d106      	bne.n	8006eec <_printf_common+0x48>
 8006ede:	f104 0a19 	add.w	sl, r4, #25
 8006ee2:	68e3      	ldr	r3, [r4, #12]
 8006ee4:	6832      	ldr	r2, [r6, #0]
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	42ab      	cmp	r3, r5
 8006eea:	dc2b      	bgt.n	8006f44 <_printf_common+0xa0>
 8006eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ef0:	6822      	ldr	r2, [r4, #0]
 8006ef2:	3b00      	subs	r3, #0
 8006ef4:	bf18      	it	ne
 8006ef6:	2301      	movne	r3, #1
 8006ef8:	0692      	lsls	r2, r2, #26
 8006efa:	d430      	bmi.n	8006f5e <_printf_common+0xba>
 8006efc:	4641      	mov	r1, r8
 8006efe:	4638      	mov	r0, r7
 8006f00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f04:	47c8      	blx	r9
 8006f06:	3001      	adds	r0, #1
 8006f08:	d023      	beq.n	8006f52 <_printf_common+0xae>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	6922      	ldr	r2, [r4, #16]
 8006f0e:	f003 0306 	and.w	r3, r3, #6
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	bf14      	ite	ne
 8006f16:	2500      	movne	r5, #0
 8006f18:	6833      	ldreq	r3, [r6, #0]
 8006f1a:	f04f 0600 	mov.w	r6, #0
 8006f1e:	bf08      	it	eq
 8006f20:	68e5      	ldreq	r5, [r4, #12]
 8006f22:	f104 041a 	add.w	r4, r4, #26
 8006f26:	bf08      	it	eq
 8006f28:	1aed      	subeq	r5, r5, r3
 8006f2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006f2e:	bf08      	it	eq
 8006f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f34:	4293      	cmp	r3, r2
 8006f36:	bfc4      	itt	gt
 8006f38:	1a9b      	subgt	r3, r3, r2
 8006f3a:	18ed      	addgt	r5, r5, r3
 8006f3c:	42b5      	cmp	r5, r6
 8006f3e:	d11a      	bne.n	8006f76 <_printf_common+0xd2>
 8006f40:	2000      	movs	r0, #0
 8006f42:	e008      	b.n	8006f56 <_printf_common+0xb2>
 8006f44:	2301      	movs	r3, #1
 8006f46:	4652      	mov	r2, sl
 8006f48:	4641      	mov	r1, r8
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	47c8      	blx	r9
 8006f4e:	3001      	adds	r0, #1
 8006f50:	d103      	bne.n	8006f5a <_printf_common+0xb6>
 8006f52:	f04f 30ff 	mov.w	r0, #4294967295
 8006f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5a:	3501      	adds	r5, #1
 8006f5c:	e7c1      	b.n	8006ee2 <_printf_common+0x3e>
 8006f5e:	2030      	movs	r0, #48	@ 0x30
 8006f60:	18e1      	adds	r1, r4, r3
 8006f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f6c:	4422      	add	r2, r4
 8006f6e:	3302      	adds	r3, #2
 8006f70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f74:	e7c2      	b.n	8006efc <_printf_common+0x58>
 8006f76:	2301      	movs	r3, #1
 8006f78:	4622      	mov	r2, r4
 8006f7a:	4641      	mov	r1, r8
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	47c8      	blx	r9
 8006f80:	3001      	adds	r0, #1
 8006f82:	d0e6      	beq.n	8006f52 <_printf_common+0xae>
 8006f84:	3601      	adds	r6, #1
 8006f86:	e7d9      	b.n	8006f3c <_printf_common+0x98>

08006f88 <_printf_i>:
 8006f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f8c:	7e0f      	ldrb	r7, [r1, #24]
 8006f8e:	4691      	mov	r9, r2
 8006f90:	2f78      	cmp	r7, #120	@ 0x78
 8006f92:	4680      	mov	r8, r0
 8006f94:	460c      	mov	r4, r1
 8006f96:	469a      	mov	sl, r3
 8006f98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f9e:	d807      	bhi.n	8006fb0 <_printf_i+0x28>
 8006fa0:	2f62      	cmp	r7, #98	@ 0x62
 8006fa2:	d80a      	bhi.n	8006fba <_printf_i+0x32>
 8006fa4:	2f00      	cmp	r7, #0
 8006fa6:	f000 80d3 	beq.w	8007150 <_printf_i+0x1c8>
 8006faa:	2f58      	cmp	r7, #88	@ 0x58
 8006fac:	f000 80ba 	beq.w	8007124 <_printf_i+0x19c>
 8006fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fb8:	e03a      	b.n	8007030 <_printf_i+0xa8>
 8006fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fbe:	2b15      	cmp	r3, #21
 8006fc0:	d8f6      	bhi.n	8006fb0 <_printf_i+0x28>
 8006fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8006fc8 <_printf_i+0x40>)
 8006fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fc8:	08007021 	.word	0x08007021
 8006fcc:	08007035 	.word	0x08007035
 8006fd0:	08006fb1 	.word	0x08006fb1
 8006fd4:	08006fb1 	.word	0x08006fb1
 8006fd8:	08006fb1 	.word	0x08006fb1
 8006fdc:	08006fb1 	.word	0x08006fb1
 8006fe0:	08007035 	.word	0x08007035
 8006fe4:	08006fb1 	.word	0x08006fb1
 8006fe8:	08006fb1 	.word	0x08006fb1
 8006fec:	08006fb1 	.word	0x08006fb1
 8006ff0:	08006fb1 	.word	0x08006fb1
 8006ff4:	08007137 	.word	0x08007137
 8006ff8:	0800705f 	.word	0x0800705f
 8006ffc:	080070f1 	.word	0x080070f1
 8007000:	08006fb1 	.word	0x08006fb1
 8007004:	08006fb1 	.word	0x08006fb1
 8007008:	08007159 	.word	0x08007159
 800700c:	08006fb1 	.word	0x08006fb1
 8007010:	0800705f 	.word	0x0800705f
 8007014:	08006fb1 	.word	0x08006fb1
 8007018:	08006fb1 	.word	0x08006fb1
 800701c:	080070f9 	.word	0x080070f9
 8007020:	6833      	ldr	r3, [r6, #0]
 8007022:	1d1a      	adds	r2, r3, #4
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6032      	str	r2, [r6, #0]
 8007028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800702c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007030:	2301      	movs	r3, #1
 8007032:	e09e      	b.n	8007172 <_printf_i+0x1ea>
 8007034:	6833      	ldr	r3, [r6, #0]
 8007036:	6820      	ldr	r0, [r4, #0]
 8007038:	1d19      	adds	r1, r3, #4
 800703a:	6031      	str	r1, [r6, #0]
 800703c:	0606      	lsls	r6, r0, #24
 800703e:	d501      	bpl.n	8007044 <_printf_i+0xbc>
 8007040:	681d      	ldr	r5, [r3, #0]
 8007042:	e003      	b.n	800704c <_printf_i+0xc4>
 8007044:	0645      	lsls	r5, r0, #25
 8007046:	d5fb      	bpl.n	8007040 <_printf_i+0xb8>
 8007048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800704c:	2d00      	cmp	r5, #0
 800704e:	da03      	bge.n	8007058 <_printf_i+0xd0>
 8007050:	232d      	movs	r3, #45	@ 0x2d
 8007052:	426d      	negs	r5, r5
 8007054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007058:	230a      	movs	r3, #10
 800705a:	4859      	ldr	r0, [pc, #356]	@ (80071c0 <_printf_i+0x238>)
 800705c:	e011      	b.n	8007082 <_printf_i+0xfa>
 800705e:	6821      	ldr	r1, [r4, #0]
 8007060:	6833      	ldr	r3, [r6, #0]
 8007062:	0608      	lsls	r0, r1, #24
 8007064:	f853 5b04 	ldr.w	r5, [r3], #4
 8007068:	d402      	bmi.n	8007070 <_printf_i+0xe8>
 800706a:	0649      	lsls	r1, r1, #25
 800706c:	bf48      	it	mi
 800706e:	b2ad      	uxthmi	r5, r5
 8007070:	2f6f      	cmp	r7, #111	@ 0x6f
 8007072:	6033      	str	r3, [r6, #0]
 8007074:	bf14      	ite	ne
 8007076:	230a      	movne	r3, #10
 8007078:	2308      	moveq	r3, #8
 800707a:	4851      	ldr	r0, [pc, #324]	@ (80071c0 <_printf_i+0x238>)
 800707c:	2100      	movs	r1, #0
 800707e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007082:	6866      	ldr	r6, [r4, #4]
 8007084:	2e00      	cmp	r6, #0
 8007086:	bfa8      	it	ge
 8007088:	6821      	ldrge	r1, [r4, #0]
 800708a:	60a6      	str	r6, [r4, #8]
 800708c:	bfa4      	itt	ge
 800708e:	f021 0104 	bicge.w	r1, r1, #4
 8007092:	6021      	strge	r1, [r4, #0]
 8007094:	b90d      	cbnz	r5, 800709a <_printf_i+0x112>
 8007096:	2e00      	cmp	r6, #0
 8007098:	d04b      	beq.n	8007132 <_printf_i+0x1aa>
 800709a:	4616      	mov	r6, r2
 800709c:	fbb5 f1f3 	udiv	r1, r5, r3
 80070a0:	fb03 5711 	mls	r7, r3, r1, r5
 80070a4:	5dc7      	ldrb	r7, [r0, r7]
 80070a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070aa:	462f      	mov	r7, r5
 80070ac:	42bb      	cmp	r3, r7
 80070ae:	460d      	mov	r5, r1
 80070b0:	d9f4      	bls.n	800709c <_printf_i+0x114>
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	d10b      	bne.n	80070ce <_printf_i+0x146>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	07df      	lsls	r7, r3, #31
 80070ba:	d508      	bpl.n	80070ce <_printf_i+0x146>
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	6861      	ldr	r1, [r4, #4]
 80070c0:	4299      	cmp	r1, r3
 80070c2:	bfde      	ittt	le
 80070c4:	2330      	movle	r3, #48	@ 0x30
 80070c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070ce:	1b92      	subs	r2, r2, r6
 80070d0:	6122      	str	r2, [r4, #16]
 80070d2:	464b      	mov	r3, r9
 80070d4:	4621      	mov	r1, r4
 80070d6:	4640      	mov	r0, r8
 80070d8:	f8cd a000 	str.w	sl, [sp]
 80070dc:	aa03      	add	r2, sp, #12
 80070de:	f7ff fee1 	bl	8006ea4 <_printf_common>
 80070e2:	3001      	adds	r0, #1
 80070e4:	d14a      	bne.n	800717c <_printf_i+0x1f4>
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ea:	b004      	add	sp, #16
 80070ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	f043 0320 	orr.w	r3, r3, #32
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	2778      	movs	r7, #120	@ 0x78
 80070fa:	4832      	ldr	r0, [pc, #200]	@ (80071c4 <_printf_i+0x23c>)
 80070fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	6831      	ldr	r1, [r6, #0]
 8007104:	061f      	lsls	r7, r3, #24
 8007106:	f851 5b04 	ldr.w	r5, [r1], #4
 800710a:	d402      	bmi.n	8007112 <_printf_i+0x18a>
 800710c:	065f      	lsls	r7, r3, #25
 800710e:	bf48      	it	mi
 8007110:	b2ad      	uxthmi	r5, r5
 8007112:	6031      	str	r1, [r6, #0]
 8007114:	07d9      	lsls	r1, r3, #31
 8007116:	bf44      	itt	mi
 8007118:	f043 0320 	orrmi.w	r3, r3, #32
 800711c:	6023      	strmi	r3, [r4, #0]
 800711e:	b11d      	cbz	r5, 8007128 <_printf_i+0x1a0>
 8007120:	2310      	movs	r3, #16
 8007122:	e7ab      	b.n	800707c <_printf_i+0xf4>
 8007124:	4826      	ldr	r0, [pc, #152]	@ (80071c0 <_printf_i+0x238>)
 8007126:	e7e9      	b.n	80070fc <_printf_i+0x174>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	f023 0320 	bic.w	r3, r3, #32
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	e7f6      	b.n	8007120 <_printf_i+0x198>
 8007132:	4616      	mov	r6, r2
 8007134:	e7bd      	b.n	80070b2 <_printf_i+0x12a>
 8007136:	6833      	ldr	r3, [r6, #0]
 8007138:	6825      	ldr	r5, [r4, #0]
 800713a:	1d18      	adds	r0, r3, #4
 800713c:	6961      	ldr	r1, [r4, #20]
 800713e:	6030      	str	r0, [r6, #0]
 8007140:	062e      	lsls	r6, r5, #24
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	d501      	bpl.n	800714a <_printf_i+0x1c2>
 8007146:	6019      	str	r1, [r3, #0]
 8007148:	e002      	b.n	8007150 <_printf_i+0x1c8>
 800714a:	0668      	lsls	r0, r5, #25
 800714c:	d5fb      	bpl.n	8007146 <_printf_i+0x1be>
 800714e:	8019      	strh	r1, [r3, #0]
 8007150:	2300      	movs	r3, #0
 8007152:	4616      	mov	r6, r2
 8007154:	6123      	str	r3, [r4, #16]
 8007156:	e7bc      	b.n	80070d2 <_printf_i+0x14a>
 8007158:	6833      	ldr	r3, [r6, #0]
 800715a:	2100      	movs	r1, #0
 800715c:	1d1a      	adds	r2, r3, #4
 800715e:	6032      	str	r2, [r6, #0]
 8007160:	681e      	ldr	r6, [r3, #0]
 8007162:	6862      	ldr	r2, [r4, #4]
 8007164:	4630      	mov	r0, r6
 8007166:	f000 faec 	bl	8007742 <memchr>
 800716a:	b108      	cbz	r0, 8007170 <_printf_i+0x1e8>
 800716c:	1b80      	subs	r0, r0, r6
 800716e:	6060      	str	r0, [r4, #4]
 8007170:	6863      	ldr	r3, [r4, #4]
 8007172:	6123      	str	r3, [r4, #16]
 8007174:	2300      	movs	r3, #0
 8007176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800717a:	e7aa      	b.n	80070d2 <_printf_i+0x14a>
 800717c:	4632      	mov	r2, r6
 800717e:	4649      	mov	r1, r9
 8007180:	4640      	mov	r0, r8
 8007182:	6923      	ldr	r3, [r4, #16]
 8007184:	47d0      	blx	sl
 8007186:	3001      	adds	r0, #1
 8007188:	d0ad      	beq.n	80070e6 <_printf_i+0x15e>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	079b      	lsls	r3, r3, #30
 800718e:	d413      	bmi.n	80071b8 <_printf_i+0x230>
 8007190:	68e0      	ldr	r0, [r4, #12]
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	4298      	cmp	r0, r3
 8007196:	bfb8      	it	lt
 8007198:	4618      	movlt	r0, r3
 800719a:	e7a6      	b.n	80070ea <_printf_i+0x162>
 800719c:	2301      	movs	r3, #1
 800719e:	4632      	mov	r2, r6
 80071a0:	4649      	mov	r1, r9
 80071a2:	4640      	mov	r0, r8
 80071a4:	47d0      	blx	sl
 80071a6:	3001      	adds	r0, #1
 80071a8:	d09d      	beq.n	80070e6 <_printf_i+0x15e>
 80071aa:	3501      	adds	r5, #1
 80071ac:	68e3      	ldr	r3, [r4, #12]
 80071ae:	9903      	ldr	r1, [sp, #12]
 80071b0:	1a5b      	subs	r3, r3, r1
 80071b2:	42ab      	cmp	r3, r5
 80071b4:	dcf2      	bgt.n	800719c <_printf_i+0x214>
 80071b6:	e7eb      	b.n	8007190 <_printf_i+0x208>
 80071b8:	2500      	movs	r5, #0
 80071ba:	f104 0619 	add.w	r6, r4, #25
 80071be:	e7f5      	b.n	80071ac <_printf_i+0x224>
 80071c0:	0800a782 	.word	0x0800a782
 80071c4:	0800a793 	.word	0x0800a793

080071c8 <std>:
 80071c8:	2300      	movs	r3, #0
 80071ca:	b510      	push	{r4, lr}
 80071cc:	4604      	mov	r4, r0
 80071ce:	e9c0 3300 	strd	r3, r3, [r0]
 80071d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071d6:	6083      	str	r3, [r0, #8]
 80071d8:	8181      	strh	r1, [r0, #12]
 80071da:	6643      	str	r3, [r0, #100]	@ 0x64
 80071dc:	81c2      	strh	r2, [r0, #14]
 80071de:	6183      	str	r3, [r0, #24]
 80071e0:	4619      	mov	r1, r3
 80071e2:	2208      	movs	r2, #8
 80071e4:	305c      	adds	r0, #92	@ 0x5c
 80071e6:	f000 fa2d 	bl	8007644 <memset>
 80071ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007220 <std+0x58>)
 80071ec:	6224      	str	r4, [r4, #32]
 80071ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80071f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007224 <std+0x5c>)
 80071f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <std+0x60>)
 80071f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071f8:	4b0c      	ldr	r3, [pc, #48]	@ (800722c <std+0x64>)
 80071fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80071fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007230 <std+0x68>)
 80071fe:	429c      	cmp	r4, r3
 8007200:	d006      	beq.n	8007210 <std+0x48>
 8007202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007206:	4294      	cmp	r4, r2
 8007208:	d002      	beq.n	8007210 <std+0x48>
 800720a:	33d0      	adds	r3, #208	@ 0xd0
 800720c:	429c      	cmp	r4, r3
 800720e:	d105      	bne.n	800721c <std+0x54>
 8007210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007218:	f000 ba90 	b.w	800773c <__retarget_lock_init_recursive>
 800721c:	bd10      	pop	{r4, pc}
 800721e:	bf00      	nop
 8007220:	08007495 	.word	0x08007495
 8007224:	080074b7 	.word	0x080074b7
 8007228:	080074ef 	.word	0x080074ef
 800722c:	08007513 	.word	0x08007513
 8007230:	200004b4 	.word	0x200004b4

08007234 <stdio_exit_handler>:
 8007234:	4a02      	ldr	r2, [pc, #8]	@ (8007240 <stdio_exit_handler+0xc>)
 8007236:	4903      	ldr	r1, [pc, #12]	@ (8007244 <stdio_exit_handler+0x10>)
 8007238:	4803      	ldr	r0, [pc, #12]	@ (8007248 <stdio_exit_handler+0x14>)
 800723a:	f000 b869 	b.w	8007310 <_fwalk_sglue>
 800723e:	bf00      	nop
 8007240:	20000014 	.word	0x20000014
 8007244:	0800932d 	.word	0x0800932d
 8007248:	20000024 	.word	0x20000024

0800724c <cleanup_stdio>:
 800724c:	6841      	ldr	r1, [r0, #4]
 800724e:	4b0c      	ldr	r3, [pc, #48]	@ (8007280 <cleanup_stdio+0x34>)
 8007250:	b510      	push	{r4, lr}
 8007252:	4299      	cmp	r1, r3
 8007254:	4604      	mov	r4, r0
 8007256:	d001      	beq.n	800725c <cleanup_stdio+0x10>
 8007258:	f002 f868 	bl	800932c <_fflush_r>
 800725c:	68a1      	ldr	r1, [r4, #8]
 800725e:	4b09      	ldr	r3, [pc, #36]	@ (8007284 <cleanup_stdio+0x38>)
 8007260:	4299      	cmp	r1, r3
 8007262:	d002      	beq.n	800726a <cleanup_stdio+0x1e>
 8007264:	4620      	mov	r0, r4
 8007266:	f002 f861 	bl	800932c <_fflush_r>
 800726a:	68e1      	ldr	r1, [r4, #12]
 800726c:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <cleanup_stdio+0x3c>)
 800726e:	4299      	cmp	r1, r3
 8007270:	d004      	beq.n	800727c <cleanup_stdio+0x30>
 8007272:	4620      	mov	r0, r4
 8007274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007278:	f002 b858 	b.w	800932c <_fflush_r>
 800727c:	bd10      	pop	{r4, pc}
 800727e:	bf00      	nop
 8007280:	200004b4 	.word	0x200004b4
 8007284:	2000051c 	.word	0x2000051c
 8007288:	20000584 	.word	0x20000584

0800728c <global_stdio_init.part.0>:
 800728c:	b510      	push	{r4, lr}
 800728e:	4b0b      	ldr	r3, [pc, #44]	@ (80072bc <global_stdio_init.part.0+0x30>)
 8007290:	4c0b      	ldr	r4, [pc, #44]	@ (80072c0 <global_stdio_init.part.0+0x34>)
 8007292:	4a0c      	ldr	r2, [pc, #48]	@ (80072c4 <global_stdio_init.part.0+0x38>)
 8007294:	4620      	mov	r0, r4
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	2104      	movs	r1, #4
 800729a:	2200      	movs	r2, #0
 800729c:	f7ff ff94 	bl	80071c8 <std>
 80072a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072a4:	2201      	movs	r2, #1
 80072a6:	2109      	movs	r1, #9
 80072a8:	f7ff ff8e 	bl	80071c8 <std>
 80072ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072b0:	2202      	movs	r2, #2
 80072b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b6:	2112      	movs	r1, #18
 80072b8:	f7ff bf86 	b.w	80071c8 <std>
 80072bc:	200005ec 	.word	0x200005ec
 80072c0:	200004b4 	.word	0x200004b4
 80072c4:	08007235 	.word	0x08007235

080072c8 <__sfp_lock_acquire>:
 80072c8:	4801      	ldr	r0, [pc, #4]	@ (80072d0 <__sfp_lock_acquire+0x8>)
 80072ca:	f000 ba38 	b.w	800773e <__retarget_lock_acquire_recursive>
 80072ce:	bf00      	nop
 80072d0:	200005f5 	.word	0x200005f5

080072d4 <__sfp_lock_release>:
 80072d4:	4801      	ldr	r0, [pc, #4]	@ (80072dc <__sfp_lock_release+0x8>)
 80072d6:	f000 ba33 	b.w	8007740 <__retarget_lock_release_recursive>
 80072da:	bf00      	nop
 80072dc:	200005f5 	.word	0x200005f5

080072e0 <__sinit>:
 80072e0:	b510      	push	{r4, lr}
 80072e2:	4604      	mov	r4, r0
 80072e4:	f7ff fff0 	bl	80072c8 <__sfp_lock_acquire>
 80072e8:	6a23      	ldr	r3, [r4, #32]
 80072ea:	b11b      	cbz	r3, 80072f4 <__sinit+0x14>
 80072ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f0:	f7ff bff0 	b.w	80072d4 <__sfp_lock_release>
 80072f4:	4b04      	ldr	r3, [pc, #16]	@ (8007308 <__sinit+0x28>)
 80072f6:	6223      	str	r3, [r4, #32]
 80072f8:	4b04      	ldr	r3, [pc, #16]	@ (800730c <__sinit+0x2c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1f5      	bne.n	80072ec <__sinit+0xc>
 8007300:	f7ff ffc4 	bl	800728c <global_stdio_init.part.0>
 8007304:	e7f2      	b.n	80072ec <__sinit+0xc>
 8007306:	bf00      	nop
 8007308:	0800724d 	.word	0x0800724d
 800730c:	200005ec 	.word	0x200005ec

08007310 <_fwalk_sglue>:
 8007310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007314:	4607      	mov	r7, r0
 8007316:	4688      	mov	r8, r1
 8007318:	4614      	mov	r4, r2
 800731a:	2600      	movs	r6, #0
 800731c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007320:	f1b9 0901 	subs.w	r9, r9, #1
 8007324:	d505      	bpl.n	8007332 <_fwalk_sglue+0x22>
 8007326:	6824      	ldr	r4, [r4, #0]
 8007328:	2c00      	cmp	r4, #0
 800732a:	d1f7      	bne.n	800731c <_fwalk_sglue+0xc>
 800732c:	4630      	mov	r0, r6
 800732e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d907      	bls.n	8007348 <_fwalk_sglue+0x38>
 8007338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800733c:	3301      	adds	r3, #1
 800733e:	d003      	beq.n	8007348 <_fwalk_sglue+0x38>
 8007340:	4629      	mov	r1, r5
 8007342:	4638      	mov	r0, r7
 8007344:	47c0      	blx	r8
 8007346:	4306      	orrs	r6, r0
 8007348:	3568      	adds	r5, #104	@ 0x68
 800734a:	e7e9      	b.n	8007320 <_fwalk_sglue+0x10>

0800734c <iprintf>:
 800734c:	b40f      	push	{r0, r1, r2, r3}
 800734e:	b507      	push	{r0, r1, r2, lr}
 8007350:	4906      	ldr	r1, [pc, #24]	@ (800736c <iprintf+0x20>)
 8007352:	ab04      	add	r3, sp, #16
 8007354:	6808      	ldr	r0, [r1, #0]
 8007356:	f853 2b04 	ldr.w	r2, [r3], #4
 800735a:	6881      	ldr	r1, [r0, #8]
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	f001 fe4d 	bl	8008ffc <_vfiprintf_r>
 8007362:	b003      	add	sp, #12
 8007364:	f85d eb04 	ldr.w	lr, [sp], #4
 8007368:	b004      	add	sp, #16
 800736a:	4770      	bx	lr
 800736c:	20000020 	.word	0x20000020

08007370 <_puts_r>:
 8007370:	6a03      	ldr	r3, [r0, #32]
 8007372:	b570      	push	{r4, r5, r6, lr}
 8007374:	4605      	mov	r5, r0
 8007376:	460e      	mov	r6, r1
 8007378:	6884      	ldr	r4, [r0, #8]
 800737a:	b90b      	cbnz	r3, 8007380 <_puts_r+0x10>
 800737c:	f7ff ffb0 	bl	80072e0 <__sinit>
 8007380:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007382:	07db      	lsls	r3, r3, #31
 8007384:	d405      	bmi.n	8007392 <_puts_r+0x22>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	0598      	lsls	r0, r3, #22
 800738a:	d402      	bmi.n	8007392 <_puts_r+0x22>
 800738c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800738e:	f000 f9d6 	bl	800773e <__retarget_lock_acquire_recursive>
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	0719      	lsls	r1, r3, #28
 8007396:	d502      	bpl.n	800739e <_puts_r+0x2e>
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d135      	bne.n	800740a <_puts_r+0x9a>
 800739e:	4621      	mov	r1, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 f8f9 	bl	8007598 <__swsetup_r>
 80073a6:	b380      	cbz	r0, 800740a <_puts_r+0x9a>
 80073a8:	f04f 35ff 	mov.w	r5, #4294967295
 80073ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073ae:	07da      	lsls	r2, r3, #31
 80073b0:	d405      	bmi.n	80073be <_puts_r+0x4e>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	059b      	lsls	r3, r3, #22
 80073b6:	d402      	bmi.n	80073be <_puts_r+0x4e>
 80073b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073ba:	f000 f9c1 	bl	8007740 <__retarget_lock_release_recursive>
 80073be:	4628      	mov	r0, r5
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	da04      	bge.n	80073d0 <_puts_r+0x60>
 80073c6:	69a2      	ldr	r2, [r4, #24]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	dc17      	bgt.n	80073fc <_puts_r+0x8c>
 80073cc:	290a      	cmp	r1, #10
 80073ce:	d015      	beq.n	80073fc <_puts_r+0x8c>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	6022      	str	r2, [r4, #0]
 80073d6:	7019      	strb	r1, [r3, #0]
 80073d8:	68a3      	ldr	r3, [r4, #8]
 80073da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073de:	3b01      	subs	r3, #1
 80073e0:	60a3      	str	r3, [r4, #8]
 80073e2:	2900      	cmp	r1, #0
 80073e4:	d1ed      	bne.n	80073c2 <_puts_r+0x52>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da11      	bge.n	800740e <_puts_r+0x9e>
 80073ea:	4622      	mov	r2, r4
 80073ec:	210a      	movs	r1, #10
 80073ee:	4628      	mov	r0, r5
 80073f0:	f000 f893 	bl	800751a <__swbuf_r>
 80073f4:	3001      	adds	r0, #1
 80073f6:	d0d7      	beq.n	80073a8 <_puts_r+0x38>
 80073f8:	250a      	movs	r5, #10
 80073fa:	e7d7      	b.n	80073ac <_puts_r+0x3c>
 80073fc:	4622      	mov	r2, r4
 80073fe:	4628      	mov	r0, r5
 8007400:	f000 f88b 	bl	800751a <__swbuf_r>
 8007404:	3001      	adds	r0, #1
 8007406:	d1e7      	bne.n	80073d8 <_puts_r+0x68>
 8007408:	e7ce      	b.n	80073a8 <_puts_r+0x38>
 800740a:	3e01      	subs	r6, #1
 800740c:	e7e4      	b.n	80073d8 <_puts_r+0x68>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	6022      	str	r2, [r4, #0]
 8007414:	220a      	movs	r2, #10
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	e7ee      	b.n	80073f8 <_puts_r+0x88>
	...

0800741c <puts>:
 800741c:	4b02      	ldr	r3, [pc, #8]	@ (8007428 <puts+0xc>)
 800741e:	4601      	mov	r1, r0
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	f7ff bfa5 	b.w	8007370 <_puts_r>
 8007426:	bf00      	nop
 8007428:	20000020 	.word	0x20000020

0800742c <sniprintf>:
 800742c:	b40c      	push	{r2, r3}
 800742e:	b530      	push	{r4, r5, lr}
 8007430:	4b17      	ldr	r3, [pc, #92]	@ (8007490 <sniprintf+0x64>)
 8007432:	1e0c      	subs	r4, r1, #0
 8007434:	681d      	ldr	r5, [r3, #0]
 8007436:	b09d      	sub	sp, #116	@ 0x74
 8007438:	da08      	bge.n	800744c <sniprintf+0x20>
 800743a:	238b      	movs	r3, #139	@ 0x8b
 800743c:	f04f 30ff 	mov.w	r0, #4294967295
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	b01d      	add	sp, #116	@ 0x74
 8007444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007448:	b002      	add	sp, #8
 800744a:	4770      	bx	lr
 800744c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007450:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007454:	bf0c      	ite	eq
 8007456:	4623      	moveq	r3, r4
 8007458:	f104 33ff 	addne.w	r3, r4, #4294967295
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	9307      	str	r3, [sp, #28]
 8007460:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007464:	9002      	str	r0, [sp, #8]
 8007466:	9006      	str	r0, [sp, #24]
 8007468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800746c:	4628      	mov	r0, r5
 800746e:	ab21      	add	r3, sp, #132	@ 0x84
 8007470:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007472:	a902      	add	r1, sp, #8
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	f001 fc9d 	bl	8008db4 <_svfiprintf_r>
 800747a:	1c43      	adds	r3, r0, #1
 800747c:	bfbc      	itt	lt
 800747e:	238b      	movlt	r3, #139	@ 0x8b
 8007480:	602b      	strlt	r3, [r5, #0]
 8007482:	2c00      	cmp	r4, #0
 8007484:	d0dd      	beq.n	8007442 <sniprintf+0x16>
 8007486:	2200      	movs	r2, #0
 8007488:	9b02      	ldr	r3, [sp, #8]
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	e7d9      	b.n	8007442 <sniprintf+0x16>
 800748e:	bf00      	nop
 8007490:	20000020 	.word	0x20000020

08007494 <__sread>:
 8007494:	b510      	push	{r4, lr}
 8007496:	460c      	mov	r4, r1
 8007498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800749c:	f000 f900 	bl	80076a0 <_read_r>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	bfab      	itete	ge
 80074a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074a6:	89a3      	ldrhlt	r3, [r4, #12]
 80074a8:	181b      	addge	r3, r3, r0
 80074aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074ae:	bfac      	ite	ge
 80074b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074b2:	81a3      	strhlt	r3, [r4, #12]
 80074b4:	bd10      	pop	{r4, pc}

080074b6 <__swrite>:
 80074b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ba:	461f      	mov	r7, r3
 80074bc:	898b      	ldrh	r3, [r1, #12]
 80074be:	4605      	mov	r5, r0
 80074c0:	05db      	lsls	r3, r3, #23
 80074c2:	460c      	mov	r4, r1
 80074c4:	4616      	mov	r6, r2
 80074c6:	d505      	bpl.n	80074d4 <__swrite+0x1e>
 80074c8:	2302      	movs	r3, #2
 80074ca:	2200      	movs	r2, #0
 80074cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d0:	f000 f8d4 	bl	800767c <_lseek_r>
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	4632      	mov	r2, r6
 80074d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	4628      	mov	r0, r5
 80074e0:	463b      	mov	r3, r7
 80074e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ea:	f000 b8eb 	b.w	80076c4 <_write_r>

080074ee <__sseek>:
 80074ee:	b510      	push	{r4, lr}
 80074f0:	460c      	mov	r4, r1
 80074f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f6:	f000 f8c1 	bl	800767c <_lseek_r>
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	bf15      	itete	ne
 8007500:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007502:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007506:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800750a:	81a3      	strheq	r3, [r4, #12]
 800750c:	bf18      	it	ne
 800750e:	81a3      	strhne	r3, [r4, #12]
 8007510:	bd10      	pop	{r4, pc}

08007512 <__sclose>:
 8007512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007516:	f000 b8a1 	b.w	800765c <_close_r>

0800751a <__swbuf_r>:
 800751a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751c:	460e      	mov	r6, r1
 800751e:	4614      	mov	r4, r2
 8007520:	4605      	mov	r5, r0
 8007522:	b118      	cbz	r0, 800752c <__swbuf_r+0x12>
 8007524:	6a03      	ldr	r3, [r0, #32]
 8007526:	b90b      	cbnz	r3, 800752c <__swbuf_r+0x12>
 8007528:	f7ff feda 	bl	80072e0 <__sinit>
 800752c:	69a3      	ldr	r3, [r4, #24]
 800752e:	60a3      	str	r3, [r4, #8]
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	071a      	lsls	r2, r3, #28
 8007534:	d501      	bpl.n	800753a <__swbuf_r+0x20>
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	b943      	cbnz	r3, 800754c <__swbuf_r+0x32>
 800753a:	4621      	mov	r1, r4
 800753c:	4628      	mov	r0, r5
 800753e:	f000 f82b 	bl	8007598 <__swsetup_r>
 8007542:	b118      	cbz	r0, 800754c <__swbuf_r+0x32>
 8007544:	f04f 37ff 	mov.w	r7, #4294967295
 8007548:	4638      	mov	r0, r7
 800754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	6922      	ldr	r2, [r4, #16]
 8007550:	b2f6      	uxtb	r6, r6
 8007552:	1a98      	subs	r0, r3, r2
 8007554:	6963      	ldr	r3, [r4, #20]
 8007556:	4637      	mov	r7, r6
 8007558:	4283      	cmp	r3, r0
 800755a:	dc05      	bgt.n	8007568 <__swbuf_r+0x4e>
 800755c:	4621      	mov	r1, r4
 800755e:	4628      	mov	r0, r5
 8007560:	f001 fee4 	bl	800932c <_fflush_r>
 8007564:	2800      	cmp	r0, #0
 8007566:	d1ed      	bne.n	8007544 <__swbuf_r+0x2a>
 8007568:	68a3      	ldr	r3, [r4, #8]
 800756a:	3b01      	subs	r3, #1
 800756c:	60a3      	str	r3, [r4, #8]
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	701e      	strb	r6, [r3, #0]
 8007576:	6962      	ldr	r2, [r4, #20]
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	429a      	cmp	r2, r3
 800757c:	d004      	beq.n	8007588 <__swbuf_r+0x6e>
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	07db      	lsls	r3, r3, #31
 8007582:	d5e1      	bpl.n	8007548 <__swbuf_r+0x2e>
 8007584:	2e0a      	cmp	r6, #10
 8007586:	d1df      	bne.n	8007548 <__swbuf_r+0x2e>
 8007588:	4621      	mov	r1, r4
 800758a:	4628      	mov	r0, r5
 800758c:	f001 fece 	bl	800932c <_fflush_r>
 8007590:	2800      	cmp	r0, #0
 8007592:	d0d9      	beq.n	8007548 <__swbuf_r+0x2e>
 8007594:	e7d6      	b.n	8007544 <__swbuf_r+0x2a>
	...

08007598 <__swsetup_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4b29      	ldr	r3, [pc, #164]	@ (8007640 <__swsetup_r+0xa8>)
 800759c:	4605      	mov	r5, r0
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	460c      	mov	r4, r1
 80075a2:	b118      	cbz	r0, 80075ac <__swsetup_r+0x14>
 80075a4:	6a03      	ldr	r3, [r0, #32]
 80075a6:	b90b      	cbnz	r3, 80075ac <__swsetup_r+0x14>
 80075a8:	f7ff fe9a 	bl	80072e0 <__sinit>
 80075ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b0:	0719      	lsls	r1, r3, #28
 80075b2:	d422      	bmi.n	80075fa <__swsetup_r+0x62>
 80075b4:	06da      	lsls	r2, r3, #27
 80075b6:	d407      	bmi.n	80075c8 <__swsetup_r+0x30>
 80075b8:	2209      	movs	r2, #9
 80075ba:	602a      	str	r2, [r5, #0]
 80075bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295
 80075c4:	81a3      	strh	r3, [r4, #12]
 80075c6:	e033      	b.n	8007630 <__swsetup_r+0x98>
 80075c8:	0758      	lsls	r0, r3, #29
 80075ca:	d512      	bpl.n	80075f2 <__swsetup_r+0x5a>
 80075cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075ce:	b141      	cbz	r1, 80075e2 <__swsetup_r+0x4a>
 80075d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075d4:	4299      	cmp	r1, r3
 80075d6:	d002      	beq.n	80075de <__swsetup_r+0x46>
 80075d8:	4628      	mov	r0, r5
 80075da:	f000 ff11 	bl	8008400 <_free_r>
 80075de:	2300      	movs	r3, #0
 80075e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	2300      	movs	r3, #0
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	f043 0308 	orr.w	r3, r3, #8
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	b94b      	cbnz	r3, 8007612 <__swsetup_r+0x7a>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007608:	d003      	beq.n	8007612 <__swsetup_r+0x7a>
 800760a:	4621      	mov	r1, r4
 800760c:	4628      	mov	r0, r5
 800760e:	f001 feda 	bl	80093c6 <__smakebuf_r>
 8007612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007616:	f013 0201 	ands.w	r2, r3, #1
 800761a:	d00a      	beq.n	8007632 <__swsetup_r+0x9a>
 800761c:	2200      	movs	r2, #0
 800761e:	60a2      	str	r2, [r4, #8]
 8007620:	6962      	ldr	r2, [r4, #20]
 8007622:	4252      	negs	r2, r2
 8007624:	61a2      	str	r2, [r4, #24]
 8007626:	6922      	ldr	r2, [r4, #16]
 8007628:	b942      	cbnz	r2, 800763c <__swsetup_r+0xa4>
 800762a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800762e:	d1c5      	bne.n	80075bc <__swsetup_r+0x24>
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	0799      	lsls	r1, r3, #30
 8007634:	bf58      	it	pl
 8007636:	6962      	ldrpl	r2, [r4, #20]
 8007638:	60a2      	str	r2, [r4, #8]
 800763a:	e7f4      	b.n	8007626 <__swsetup_r+0x8e>
 800763c:	2000      	movs	r0, #0
 800763e:	e7f7      	b.n	8007630 <__swsetup_r+0x98>
 8007640:	20000020 	.word	0x20000020

08007644 <memset>:
 8007644:	4603      	mov	r3, r0
 8007646:	4402      	add	r2, r0
 8007648:	4293      	cmp	r3, r2
 800764a:	d100      	bne.n	800764e <memset+0xa>
 800764c:	4770      	bx	lr
 800764e:	f803 1b01 	strb.w	r1, [r3], #1
 8007652:	e7f9      	b.n	8007648 <memset+0x4>

08007654 <_localeconv_r>:
 8007654:	4800      	ldr	r0, [pc, #0]	@ (8007658 <_localeconv_r+0x4>)
 8007656:	4770      	bx	lr
 8007658:	20000160 	.word	0x20000160

0800765c <_close_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	2300      	movs	r3, #0
 8007660:	4d05      	ldr	r5, [pc, #20]	@ (8007678 <_close_r+0x1c>)
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	f7fc ff73 	bl	8004552 <_close>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_close_r+0x1a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_close_r+0x1a>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	200005f0 	.word	0x200005f0

0800767c <_lseek_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	4611      	mov	r1, r2
 8007684:	2200      	movs	r2, #0
 8007686:	4d05      	ldr	r5, [pc, #20]	@ (800769c <_lseek_r+0x20>)
 8007688:	602a      	str	r2, [r5, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	f7fc ff85 	bl	800459a <_lseek>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_lseek_r+0x1e>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	b103      	cbz	r3, 800769a <_lseek_r+0x1e>
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	200005f0 	.word	0x200005f0

080076a0 <_read_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4604      	mov	r4, r0
 80076a4:	4608      	mov	r0, r1
 80076a6:	4611      	mov	r1, r2
 80076a8:	2200      	movs	r2, #0
 80076aa:	4d05      	ldr	r5, [pc, #20]	@ (80076c0 <_read_r+0x20>)
 80076ac:	602a      	str	r2, [r5, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	f7fc ff32 	bl	8004518 <_read>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_read_r+0x1e>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_read_r+0x1e>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	200005f0 	.word	0x200005f0

080076c4 <_write_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	4604      	mov	r4, r0
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	2200      	movs	r2, #0
 80076ce:	4d05      	ldr	r5, [pc, #20]	@ (80076e4 <_write_r+0x20>)
 80076d0:	602a      	str	r2, [r5, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f7fc f812 	bl	80036fc <_write>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d102      	bne.n	80076e2 <_write_r+0x1e>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	b103      	cbz	r3, 80076e2 <_write_r+0x1e>
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	200005f0 	.word	0x200005f0

080076e8 <__errno>:
 80076e8:	4b01      	ldr	r3, [pc, #4]	@ (80076f0 <__errno+0x8>)
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20000020 	.word	0x20000020

080076f4 <__libc_init_array>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	2600      	movs	r6, #0
 80076f8:	4d0c      	ldr	r5, [pc, #48]	@ (800772c <__libc_init_array+0x38>)
 80076fa:	4c0d      	ldr	r4, [pc, #52]	@ (8007730 <__libc_init_array+0x3c>)
 80076fc:	1b64      	subs	r4, r4, r5
 80076fe:	10a4      	asrs	r4, r4, #2
 8007700:	42a6      	cmp	r6, r4
 8007702:	d109      	bne.n	8007718 <__libc_init_array+0x24>
 8007704:	f002 feec 	bl	800a4e0 <_init>
 8007708:	2600      	movs	r6, #0
 800770a:	4d0a      	ldr	r5, [pc, #40]	@ (8007734 <__libc_init_array+0x40>)
 800770c:	4c0a      	ldr	r4, [pc, #40]	@ (8007738 <__libc_init_array+0x44>)
 800770e:	1b64      	subs	r4, r4, r5
 8007710:	10a4      	asrs	r4, r4, #2
 8007712:	42a6      	cmp	r6, r4
 8007714:	d105      	bne.n	8007722 <__libc_init_array+0x2e>
 8007716:	bd70      	pop	{r4, r5, r6, pc}
 8007718:	f855 3b04 	ldr.w	r3, [r5], #4
 800771c:	4798      	blx	r3
 800771e:	3601      	adds	r6, #1
 8007720:	e7ee      	b.n	8007700 <__libc_init_array+0xc>
 8007722:	f855 3b04 	ldr.w	r3, [r5], #4
 8007726:	4798      	blx	r3
 8007728:	3601      	adds	r6, #1
 800772a:	e7f2      	b.n	8007712 <__libc_init_array+0x1e>
 800772c:	0800ab18 	.word	0x0800ab18
 8007730:	0800ab18 	.word	0x0800ab18
 8007734:	0800ab18 	.word	0x0800ab18
 8007738:	0800ab1c 	.word	0x0800ab1c

0800773c <__retarget_lock_init_recursive>:
 800773c:	4770      	bx	lr

0800773e <__retarget_lock_acquire_recursive>:
 800773e:	4770      	bx	lr

08007740 <__retarget_lock_release_recursive>:
 8007740:	4770      	bx	lr

08007742 <memchr>:
 8007742:	4603      	mov	r3, r0
 8007744:	b510      	push	{r4, lr}
 8007746:	b2c9      	uxtb	r1, r1
 8007748:	4402      	add	r2, r0
 800774a:	4293      	cmp	r3, r2
 800774c:	4618      	mov	r0, r3
 800774e:	d101      	bne.n	8007754 <memchr+0x12>
 8007750:	2000      	movs	r0, #0
 8007752:	e003      	b.n	800775c <memchr+0x1a>
 8007754:	7804      	ldrb	r4, [r0, #0]
 8007756:	3301      	adds	r3, #1
 8007758:	428c      	cmp	r4, r1
 800775a:	d1f6      	bne.n	800774a <memchr+0x8>
 800775c:	bd10      	pop	{r4, pc}

0800775e <quorem>:
 800775e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007762:	6903      	ldr	r3, [r0, #16]
 8007764:	690c      	ldr	r4, [r1, #16]
 8007766:	4607      	mov	r7, r0
 8007768:	42a3      	cmp	r3, r4
 800776a:	db7e      	blt.n	800786a <quorem+0x10c>
 800776c:	3c01      	subs	r4, #1
 800776e:	00a3      	lsls	r3, r4, #2
 8007770:	f100 0514 	add.w	r5, r0, #20
 8007774:	f101 0814 	add.w	r8, r1, #20
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007788:	3301      	adds	r3, #1
 800778a:	429a      	cmp	r2, r3
 800778c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007790:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007794:	d32e      	bcc.n	80077f4 <quorem+0x96>
 8007796:	f04f 0a00 	mov.w	sl, #0
 800779a:	46c4      	mov	ip, r8
 800779c:	46ae      	mov	lr, r5
 800779e:	46d3      	mov	fp, sl
 80077a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077a4:	b298      	uxth	r0, r3
 80077a6:	fb06 a000 	mla	r0, r6, r0, sl
 80077aa:	0c1b      	lsrs	r3, r3, #16
 80077ac:	0c02      	lsrs	r2, r0, #16
 80077ae:	fb06 2303 	mla	r3, r6, r3, r2
 80077b2:	f8de 2000 	ldr.w	r2, [lr]
 80077b6:	b280      	uxth	r0, r0
 80077b8:	b292      	uxth	r2, r2
 80077ba:	1a12      	subs	r2, r2, r0
 80077bc:	445a      	add	r2, fp
 80077be:	f8de 0000 	ldr.w	r0, [lr]
 80077c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80077cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80077d0:	b292      	uxth	r2, r2
 80077d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80077d6:	45e1      	cmp	r9, ip
 80077d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80077dc:	f84e 2b04 	str.w	r2, [lr], #4
 80077e0:	d2de      	bcs.n	80077a0 <quorem+0x42>
 80077e2:	9b00      	ldr	r3, [sp, #0]
 80077e4:	58eb      	ldr	r3, [r5, r3]
 80077e6:	b92b      	cbnz	r3, 80077f4 <quorem+0x96>
 80077e8:	9b01      	ldr	r3, [sp, #4]
 80077ea:	3b04      	subs	r3, #4
 80077ec:	429d      	cmp	r5, r3
 80077ee:	461a      	mov	r2, r3
 80077f0:	d32f      	bcc.n	8007852 <quorem+0xf4>
 80077f2:	613c      	str	r4, [r7, #16]
 80077f4:	4638      	mov	r0, r7
 80077f6:	f001 f979 	bl	8008aec <__mcmp>
 80077fa:	2800      	cmp	r0, #0
 80077fc:	db25      	blt.n	800784a <quorem+0xec>
 80077fe:	4629      	mov	r1, r5
 8007800:	2000      	movs	r0, #0
 8007802:	f858 2b04 	ldr.w	r2, [r8], #4
 8007806:	f8d1 c000 	ldr.w	ip, [r1]
 800780a:	fa1f fe82 	uxth.w	lr, r2
 800780e:	fa1f f38c 	uxth.w	r3, ip
 8007812:	eba3 030e 	sub.w	r3, r3, lr
 8007816:	4403      	add	r3, r0
 8007818:	0c12      	lsrs	r2, r2, #16
 800781a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800781e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007822:	b29b      	uxth	r3, r3
 8007824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007828:	45c1      	cmp	r9, r8
 800782a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800782e:	f841 3b04 	str.w	r3, [r1], #4
 8007832:	d2e6      	bcs.n	8007802 <quorem+0xa4>
 8007834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007838:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800783c:	b922      	cbnz	r2, 8007848 <quorem+0xea>
 800783e:	3b04      	subs	r3, #4
 8007840:	429d      	cmp	r5, r3
 8007842:	461a      	mov	r2, r3
 8007844:	d30b      	bcc.n	800785e <quorem+0x100>
 8007846:	613c      	str	r4, [r7, #16]
 8007848:	3601      	adds	r6, #1
 800784a:	4630      	mov	r0, r6
 800784c:	b003      	add	sp, #12
 800784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007852:	6812      	ldr	r2, [r2, #0]
 8007854:	3b04      	subs	r3, #4
 8007856:	2a00      	cmp	r2, #0
 8007858:	d1cb      	bne.n	80077f2 <quorem+0x94>
 800785a:	3c01      	subs	r4, #1
 800785c:	e7c6      	b.n	80077ec <quorem+0x8e>
 800785e:	6812      	ldr	r2, [r2, #0]
 8007860:	3b04      	subs	r3, #4
 8007862:	2a00      	cmp	r2, #0
 8007864:	d1ef      	bne.n	8007846 <quorem+0xe8>
 8007866:	3c01      	subs	r4, #1
 8007868:	e7ea      	b.n	8007840 <quorem+0xe2>
 800786a:	2000      	movs	r0, #0
 800786c:	e7ee      	b.n	800784c <quorem+0xee>
	...

08007870 <_dtoa_r>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	4614      	mov	r4, r2
 8007876:	461d      	mov	r5, r3
 8007878:	69c7      	ldr	r7, [r0, #28]
 800787a:	b097      	sub	sp, #92	@ 0x5c
 800787c:	4683      	mov	fp, r0
 800787e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007882:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007884:	b97f      	cbnz	r7, 80078a6 <_dtoa_r+0x36>
 8007886:	2010      	movs	r0, #16
 8007888:	f000 fe02 	bl	8008490 <malloc>
 800788c:	4602      	mov	r2, r0
 800788e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007892:	b920      	cbnz	r0, 800789e <_dtoa_r+0x2e>
 8007894:	21ef      	movs	r1, #239	@ 0xef
 8007896:	4ba8      	ldr	r3, [pc, #672]	@ (8007b38 <_dtoa_r+0x2c8>)
 8007898:	48a8      	ldr	r0, [pc, #672]	@ (8007b3c <_dtoa_r+0x2cc>)
 800789a:	f001 fe2b 	bl	80094f4 <__assert_func>
 800789e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078a2:	6007      	str	r7, [r0, #0]
 80078a4:	60c7      	str	r7, [r0, #12]
 80078a6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078aa:	6819      	ldr	r1, [r3, #0]
 80078ac:	b159      	cbz	r1, 80078c6 <_dtoa_r+0x56>
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	2301      	movs	r3, #1
 80078b2:	4093      	lsls	r3, r2
 80078b4:	604a      	str	r2, [r1, #4]
 80078b6:	608b      	str	r3, [r1, #8]
 80078b8:	4658      	mov	r0, fp
 80078ba:	f000 fedf 	bl	800867c <_Bfree>
 80078be:	2200      	movs	r2, #0
 80078c0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	1e2b      	subs	r3, r5, #0
 80078c8:	bfaf      	iteee	ge
 80078ca:	2300      	movge	r3, #0
 80078cc:	2201      	movlt	r2, #1
 80078ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80078d2:	9303      	strlt	r3, [sp, #12]
 80078d4:	bfa8      	it	ge
 80078d6:	6033      	strge	r3, [r6, #0]
 80078d8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80078dc:	4b98      	ldr	r3, [pc, #608]	@ (8007b40 <_dtoa_r+0x2d0>)
 80078de:	bfb8      	it	lt
 80078e0:	6032      	strlt	r2, [r6, #0]
 80078e2:	ea33 0308 	bics.w	r3, r3, r8
 80078e6:	d112      	bne.n	800790e <_dtoa_r+0x9e>
 80078e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80078ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80078f4:	4323      	orrs	r3, r4
 80078f6:	f000 8550 	beq.w	800839a <_dtoa_r+0xb2a>
 80078fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078fc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007b44 <_dtoa_r+0x2d4>
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 8552 	beq.w	80083aa <_dtoa_r+0xb3a>
 8007906:	f10a 0303 	add.w	r3, sl, #3
 800790a:	f000 bd4c 	b.w	80083a6 <_dtoa_r+0xb36>
 800790e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007912:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	f7f9 f85b 	bl	80009d8 <__aeabi_dcmpeq>
 8007922:	4607      	mov	r7, r0
 8007924:	b158      	cbz	r0, 800793e <_dtoa_r+0xce>
 8007926:	2301      	movs	r3, #1
 8007928:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800792e:	b113      	cbz	r3, 8007936 <_dtoa_r+0xc6>
 8007930:	4b85      	ldr	r3, [pc, #532]	@ (8007b48 <_dtoa_r+0x2d8>)
 8007932:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007b4c <_dtoa_r+0x2dc>
 800793a:	f000 bd36 	b.w	80083aa <_dtoa_r+0xb3a>
 800793e:	ab14      	add	r3, sp, #80	@ 0x50
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	ab15      	add	r3, sp, #84	@ 0x54
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	4658      	mov	r0, fp
 8007948:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800794c:	f001 f97e 	bl	8008c4c <__d2b>
 8007950:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007954:	4681      	mov	r9, r0
 8007956:	2e00      	cmp	r6, #0
 8007958:	d077      	beq.n	8007a4a <_dtoa_r+0x1da>
 800795a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800795e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007960:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007968:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800796c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007970:	9712      	str	r7, [sp, #72]	@ 0x48
 8007972:	4619      	mov	r1, r3
 8007974:	2200      	movs	r2, #0
 8007976:	4b76      	ldr	r3, [pc, #472]	@ (8007b50 <_dtoa_r+0x2e0>)
 8007978:	f7f8 fc0e 	bl	8000198 <__aeabi_dsub>
 800797c:	a368      	add	r3, pc, #416	@ (adr r3, 8007b20 <_dtoa_r+0x2b0>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f7f8 fdc1 	bl	8000508 <__aeabi_dmul>
 8007986:	a368      	add	r3, pc, #416	@ (adr r3, 8007b28 <_dtoa_r+0x2b8>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f7f8 fc06 	bl	800019c <__adddf3>
 8007990:	4604      	mov	r4, r0
 8007992:	4630      	mov	r0, r6
 8007994:	460d      	mov	r5, r1
 8007996:	f7f8 fd4d 	bl	8000434 <__aeabi_i2d>
 800799a:	a365      	add	r3, pc, #404	@ (adr r3, 8007b30 <_dtoa_r+0x2c0>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	f7f8 fdb2 	bl	8000508 <__aeabi_dmul>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4620      	mov	r0, r4
 80079aa:	4629      	mov	r1, r5
 80079ac:	f7f8 fbf6 	bl	800019c <__adddf3>
 80079b0:	4604      	mov	r4, r0
 80079b2:	460d      	mov	r5, r1
 80079b4:	f7f9 f858 	bl	8000a68 <__aeabi_d2iz>
 80079b8:	2200      	movs	r2, #0
 80079ba:	4607      	mov	r7, r0
 80079bc:	2300      	movs	r3, #0
 80079be:	4620      	mov	r0, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7f9 f813 	bl	80009ec <__aeabi_dcmplt>
 80079c6:	b140      	cbz	r0, 80079da <_dtoa_r+0x16a>
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7f8 fd33 	bl	8000434 <__aeabi_i2d>
 80079ce:	4622      	mov	r2, r4
 80079d0:	462b      	mov	r3, r5
 80079d2:	f7f9 f801 	bl	80009d8 <__aeabi_dcmpeq>
 80079d6:	b900      	cbnz	r0, 80079da <_dtoa_r+0x16a>
 80079d8:	3f01      	subs	r7, #1
 80079da:	2f16      	cmp	r7, #22
 80079dc:	d853      	bhi.n	8007a86 <_dtoa_r+0x216>
 80079de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007b54 <_dtoa_r+0x2e4>)
 80079e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f7f8 fffe 	bl	80009ec <__aeabi_dcmplt>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d04a      	beq.n	8007a8a <_dtoa_r+0x21a>
 80079f4:	2300      	movs	r3, #0
 80079f6:	3f01      	subs	r7, #1
 80079f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80079fc:	1b9b      	subs	r3, r3, r6
 80079fe:	1e5a      	subs	r2, r3, #1
 8007a00:	bf46      	itte	mi
 8007a02:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a06:	2300      	movmi	r3, #0
 8007a08:	f04f 0800 	movpl.w	r8, #0
 8007a0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a0e:	bf48      	it	mi
 8007a10:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007a12:	2f00      	cmp	r7, #0
 8007a14:	db3b      	blt.n	8007a8e <_dtoa_r+0x21e>
 8007a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a18:	970e      	str	r7, [sp, #56]	@ 0x38
 8007a1a:	443b      	add	r3, r7
 8007a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a1e:	2300      	movs	r3, #0
 8007a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a24:	2b09      	cmp	r3, #9
 8007a26:	d866      	bhi.n	8007af6 <_dtoa_r+0x286>
 8007a28:	2b05      	cmp	r3, #5
 8007a2a:	bfc4      	itt	gt
 8007a2c:	3b04      	subgt	r3, #4
 8007a2e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007a30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a32:	bfc8      	it	gt
 8007a34:	2400      	movgt	r4, #0
 8007a36:	f1a3 0302 	sub.w	r3, r3, #2
 8007a3a:	bfd8      	it	le
 8007a3c:	2401      	movle	r4, #1
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d864      	bhi.n	8007b0c <_dtoa_r+0x29c>
 8007a42:	e8df f003 	tbb	[pc, r3]
 8007a46:	382b      	.short	0x382b
 8007a48:	5636      	.short	0x5636
 8007a4a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007a4e:	441e      	add	r6, r3
 8007a50:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a54:	2b20      	cmp	r3, #32
 8007a56:	bfc1      	itttt	gt
 8007a58:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007a60:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a64:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007a68:	bfd6      	itet	le
 8007a6a:	f1c3 0320 	rsble	r3, r3, #32
 8007a6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007a72:	fa04 f003 	lslle.w	r0, r4, r3
 8007a76:	f7f8 fccd 	bl	8000414 <__aeabi_ui2d>
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007a80:	3e01      	subs	r6, #1
 8007a82:	9212      	str	r2, [sp, #72]	@ 0x48
 8007a84:	e775      	b.n	8007972 <_dtoa_r+0x102>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7b6      	b.n	80079f8 <_dtoa_r+0x188>
 8007a8a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007a8c:	e7b5      	b.n	80079fa <_dtoa_r+0x18a>
 8007a8e:	427b      	negs	r3, r7
 8007a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a92:	2300      	movs	r3, #0
 8007a94:	eba8 0807 	sub.w	r8, r8, r7
 8007a98:	930e      	str	r3, [sp, #56]	@ 0x38
 8007a9a:	e7c2      	b.n	8007a22 <_dtoa_r+0x1b2>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aa0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	dc35      	bgt.n	8007b12 <_dtoa_r+0x2a2>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007aae:	9221      	str	r2, [sp, #132]	@ 0x84
 8007ab0:	e00b      	b.n	8007aca <_dtoa_r+0x25a>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e7f3      	b.n	8007a9e <_dtoa_r+0x22e>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007aba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007abc:	18fb      	adds	r3, r7, r3
 8007abe:	9308      	str	r3, [sp, #32]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	9307      	str	r3, [sp, #28]
 8007ac6:	bfb8      	it	lt
 8007ac8:	2301      	movlt	r3, #1
 8007aca:	2100      	movs	r1, #0
 8007acc:	2204      	movs	r2, #4
 8007ace:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ad2:	f102 0514 	add.w	r5, r2, #20
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	d91f      	bls.n	8007b1a <_dtoa_r+0x2aa>
 8007ada:	6041      	str	r1, [r0, #4]
 8007adc:	4658      	mov	r0, fp
 8007ade:	f000 fd8d 	bl	80085fc <_Balloc>
 8007ae2:	4682      	mov	sl, r0
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d139      	bne.n	8007b5c <_dtoa_r+0x2ec>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	f240 11af 	movw	r1, #431	@ 0x1af
 8007aee:	4b1a      	ldr	r3, [pc, #104]	@ (8007b58 <_dtoa_r+0x2e8>)
 8007af0:	e6d2      	b.n	8007898 <_dtoa_r+0x28>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e7e0      	b.n	8007ab8 <_dtoa_r+0x248>
 8007af6:	2401      	movs	r4, #1
 8007af8:	2300      	movs	r3, #0
 8007afa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007afc:	9320      	str	r3, [sp, #128]	@ 0x80
 8007afe:	f04f 33ff 	mov.w	r3, #4294967295
 8007b02:	2200      	movs	r2, #0
 8007b04:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007b08:	2312      	movs	r3, #18
 8007b0a:	e7d0      	b.n	8007aae <_dtoa_r+0x23e>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b10:	e7f5      	b.n	8007afe <_dtoa_r+0x28e>
 8007b12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b14:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007b18:	e7d7      	b.n	8007aca <_dtoa_r+0x25a>
 8007b1a:	3101      	adds	r1, #1
 8007b1c:	0052      	lsls	r2, r2, #1
 8007b1e:	e7d8      	b.n	8007ad2 <_dtoa_r+0x262>
 8007b20:	636f4361 	.word	0x636f4361
 8007b24:	3fd287a7 	.word	0x3fd287a7
 8007b28:	8b60c8b3 	.word	0x8b60c8b3
 8007b2c:	3fc68a28 	.word	0x3fc68a28
 8007b30:	509f79fb 	.word	0x509f79fb
 8007b34:	3fd34413 	.word	0x3fd34413
 8007b38:	0800a7b1 	.word	0x0800a7b1
 8007b3c:	0800a7c8 	.word	0x0800a7c8
 8007b40:	7ff00000 	.word	0x7ff00000
 8007b44:	0800a7ad 	.word	0x0800a7ad
 8007b48:	0800a781 	.word	0x0800a781
 8007b4c:	0800a780 	.word	0x0800a780
 8007b50:	3ff80000 	.word	0x3ff80000
 8007b54:	0800a8c0 	.word	0x0800a8c0
 8007b58:	0800a820 	.word	0x0800a820
 8007b5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b60:	6018      	str	r0, [r3, #0]
 8007b62:	9b07      	ldr	r3, [sp, #28]
 8007b64:	2b0e      	cmp	r3, #14
 8007b66:	f200 80a4 	bhi.w	8007cb2 <_dtoa_r+0x442>
 8007b6a:	2c00      	cmp	r4, #0
 8007b6c:	f000 80a1 	beq.w	8007cb2 <_dtoa_r+0x442>
 8007b70:	2f00      	cmp	r7, #0
 8007b72:	dd33      	ble.n	8007bdc <_dtoa_r+0x36c>
 8007b74:	4b86      	ldr	r3, [pc, #536]	@ (8007d90 <_dtoa_r+0x520>)
 8007b76:	f007 020f 	and.w	r2, r7, #15
 8007b7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b7e:	05f8      	lsls	r0, r7, #23
 8007b80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b84:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b8c:	d516      	bpl.n	8007bbc <_dtoa_r+0x34c>
 8007b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b92:	4b80      	ldr	r3, [pc, #512]	@ (8007d94 <_dtoa_r+0x524>)
 8007b94:	2603      	movs	r6, #3
 8007b96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b9a:	f7f8 fddf 	bl	800075c <__aeabi_ddiv>
 8007b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba2:	f004 040f 	and.w	r4, r4, #15
 8007ba6:	4d7b      	ldr	r5, [pc, #492]	@ (8007d94 <_dtoa_r+0x524>)
 8007ba8:	b954      	cbnz	r4, 8007bc0 <_dtoa_r+0x350>
 8007baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bb2:	f7f8 fdd3 	bl	800075c <__aeabi_ddiv>
 8007bb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bba:	e028      	b.n	8007c0e <_dtoa_r+0x39e>
 8007bbc:	2602      	movs	r6, #2
 8007bbe:	e7f2      	b.n	8007ba6 <_dtoa_r+0x336>
 8007bc0:	07e1      	lsls	r1, r4, #31
 8007bc2:	d508      	bpl.n	8007bd6 <_dtoa_r+0x366>
 8007bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bcc:	f7f8 fc9c 	bl	8000508 <__aeabi_dmul>
 8007bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bd4:	3601      	adds	r6, #1
 8007bd6:	1064      	asrs	r4, r4, #1
 8007bd8:	3508      	adds	r5, #8
 8007bda:	e7e5      	b.n	8007ba8 <_dtoa_r+0x338>
 8007bdc:	f000 80d2 	beq.w	8007d84 <_dtoa_r+0x514>
 8007be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007be4:	427c      	negs	r4, r7
 8007be6:	4b6a      	ldr	r3, [pc, #424]	@ (8007d90 <_dtoa_r+0x520>)
 8007be8:	f004 020f 	and.w	r2, r4, #15
 8007bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f7f8 fc88 	bl	8000508 <__aeabi_dmul>
 8007bf8:	2602      	movs	r6, #2
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c00:	4d64      	ldr	r5, [pc, #400]	@ (8007d94 <_dtoa_r+0x524>)
 8007c02:	1124      	asrs	r4, r4, #4
 8007c04:	2c00      	cmp	r4, #0
 8007c06:	f040 80b2 	bne.w	8007d6e <_dtoa_r+0x4fe>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1d3      	bne.n	8007bb6 <_dtoa_r+0x346>
 8007c0e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80b7 	beq.w	8007d88 <_dtoa_r+0x518>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4b5d      	ldr	r3, [pc, #372]	@ (8007d98 <_dtoa_r+0x528>)
 8007c22:	f7f8 fee3 	bl	80009ec <__aeabi_dcmplt>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f000 80ae 	beq.w	8007d88 <_dtoa_r+0x518>
 8007c2c:	9b07      	ldr	r3, [sp, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 80aa 	beq.w	8007d88 <_dtoa_r+0x518>
 8007c34:	9b08      	ldr	r3, [sp, #32]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dd37      	ble.n	8007caa <_dtoa_r+0x43a>
 8007c3a:	1e7b      	subs	r3, r7, #1
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	9304      	str	r3, [sp, #16]
 8007c40:	2200      	movs	r2, #0
 8007c42:	4629      	mov	r1, r5
 8007c44:	4b55      	ldr	r3, [pc, #340]	@ (8007d9c <_dtoa_r+0x52c>)
 8007c46:	f7f8 fc5f 	bl	8000508 <__aeabi_dmul>
 8007c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c4e:	9c08      	ldr	r4, [sp, #32]
 8007c50:	3601      	adds	r6, #1
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7f8 fbee 	bl	8000434 <__aeabi_i2d>
 8007c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c5c:	f7f8 fc54 	bl	8000508 <__aeabi_dmul>
 8007c60:	2200      	movs	r2, #0
 8007c62:	4b4f      	ldr	r3, [pc, #316]	@ (8007da0 <_dtoa_r+0x530>)
 8007c64:	f7f8 fa9a 	bl	800019c <__adddf3>
 8007c68:	4605      	mov	r5, r0
 8007c6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007c6e:	2c00      	cmp	r4, #0
 8007c70:	f040 809a 	bne.w	8007da8 <_dtoa_r+0x538>
 8007c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8007da4 <_dtoa_r+0x534>)
 8007c7c:	f7f8 fa8c 	bl	8000198 <__aeabi_dsub>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c88:	462a      	mov	r2, r5
 8007c8a:	4633      	mov	r3, r6
 8007c8c:	f7f8 fecc 	bl	8000a28 <__aeabi_dcmpgt>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	f040 828e 	bne.w	80081b2 <_dtoa_r+0x942>
 8007c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ca0:	f7f8 fea4 	bl	80009ec <__aeabi_dcmplt>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	f040 8127 	bne.w	8007ef8 <_dtoa_r+0x688>
 8007caa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007cae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007cb2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f2c0 8163 	blt.w	8007f80 <_dtoa_r+0x710>
 8007cba:	2f0e      	cmp	r7, #14
 8007cbc:	f300 8160 	bgt.w	8007f80 <_dtoa_r+0x710>
 8007cc0:	4b33      	ldr	r3, [pc, #204]	@ (8007d90 <_dtoa_r+0x520>)
 8007cc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007cce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	da03      	bge.n	8007cdc <_dtoa_r+0x46c>
 8007cd4:	9b07      	ldr	r3, [sp, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f340 8100 	ble.w	8007edc <_dtoa_r+0x66c>
 8007cdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ce0:	4656      	mov	r6, sl
 8007ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	4629      	mov	r1, r5
 8007cea:	f7f8 fd37 	bl	800075c <__aeabi_ddiv>
 8007cee:	f7f8 febb 	bl	8000a68 <__aeabi_d2iz>
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	f7f8 fb9e 	bl	8000434 <__aeabi_i2d>
 8007cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cfc:	f7f8 fc04 	bl	8000508 <__aeabi_dmul>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 fa46 	bl	8000198 <__aeabi_dsub>
 8007d0c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d10:	9d07      	ldr	r5, [sp, #28]
 8007d12:	f806 4b01 	strb.w	r4, [r6], #1
 8007d16:	eba6 040a 	sub.w	r4, r6, sl
 8007d1a:	42a5      	cmp	r5, r4
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	f040 8116 	bne.w	8007f50 <_dtoa_r+0x6e0>
 8007d24:	f7f8 fa3a 	bl	800019c <__adddf3>
 8007d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	460d      	mov	r5, r1
 8007d30:	f7f8 fe7a 	bl	8000a28 <__aeabi_dcmpgt>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	f040 80f8 	bne.w	8007f2a <_dtoa_r+0x6ba>
 8007d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fe49 	bl	80009d8 <__aeabi_dcmpeq>
 8007d46:	b118      	cbz	r0, 8007d50 <_dtoa_r+0x4e0>
 8007d48:	f018 0f01 	tst.w	r8, #1
 8007d4c:	f040 80ed 	bne.w	8007f2a <_dtoa_r+0x6ba>
 8007d50:	4649      	mov	r1, r9
 8007d52:	4658      	mov	r0, fp
 8007d54:	f000 fc92 	bl	800867c <_Bfree>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	7033      	strb	r3, [r6, #0]
 8007d5c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007d5e:	3701      	adds	r7, #1
 8007d60:	601f      	str	r7, [r3, #0]
 8007d62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8320 	beq.w	80083aa <_dtoa_r+0xb3a>
 8007d6a:	601e      	str	r6, [r3, #0]
 8007d6c:	e31d      	b.n	80083aa <_dtoa_r+0xb3a>
 8007d6e:	07e2      	lsls	r2, r4, #31
 8007d70:	d505      	bpl.n	8007d7e <_dtoa_r+0x50e>
 8007d72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d76:	f7f8 fbc7 	bl	8000508 <__aeabi_dmul>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	3601      	adds	r6, #1
 8007d7e:	1064      	asrs	r4, r4, #1
 8007d80:	3508      	adds	r5, #8
 8007d82:	e73f      	b.n	8007c04 <_dtoa_r+0x394>
 8007d84:	2602      	movs	r6, #2
 8007d86:	e742      	b.n	8007c0e <_dtoa_r+0x39e>
 8007d88:	9c07      	ldr	r4, [sp, #28]
 8007d8a:	9704      	str	r7, [sp, #16]
 8007d8c:	e761      	b.n	8007c52 <_dtoa_r+0x3e2>
 8007d8e:	bf00      	nop
 8007d90:	0800a8c0 	.word	0x0800a8c0
 8007d94:	0800a898 	.word	0x0800a898
 8007d98:	3ff00000 	.word	0x3ff00000
 8007d9c:	40240000 	.word	0x40240000
 8007da0:	401c0000 	.word	0x401c0000
 8007da4:	40140000 	.word	0x40140000
 8007da8:	4b70      	ldr	r3, [pc, #448]	@ (8007f6c <_dtoa_r+0x6fc>)
 8007daa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007dac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007db0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007db4:	4454      	add	r4, sl
 8007db6:	2900      	cmp	r1, #0
 8007db8:	d045      	beq.n	8007e46 <_dtoa_r+0x5d6>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	496c      	ldr	r1, [pc, #432]	@ (8007f70 <_dtoa_r+0x700>)
 8007dbe:	f7f8 fccd 	bl	800075c <__aeabi_ddiv>
 8007dc2:	4633      	mov	r3, r6
 8007dc4:	462a      	mov	r2, r5
 8007dc6:	f7f8 f9e7 	bl	8000198 <__aeabi_dsub>
 8007dca:	4656      	mov	r6, sl
 8007dcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd4:	f7f8 fe48 	bl	8000a68 <__aeabi_d2iz>
 8007dd8:	4605      	mov	r5, r0
 8007dda:	f7f8 fb2b 	bl	8000434 <__aeabi_i2d>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de6:	f7f8 f9d7 	bl	8000198 <__aeabi_dsub>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	3530      	adds	r5, #48	@ 0x30
 8007df0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007df4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007df8:	f806 5b01 	strb.w	r5, [r6], #1
 8007dfc:	f7f8 fdf6 	bl	80009ec <__aeabi_dcmplt>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d163      	bne.n	8007ecc <_dtoa_r+0x65c>
 8007e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e08:	2000      	movs	r0, #0
 8007e0a:	495a      	ldr	r1, [pc, #360]	@ (8007f74 <_dtoa_r+0x704>)
 8007e0c:	f7f8 f9c4 	bl	8000198 <__aeabi_dsub>
 8007e10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e14:	f7f8 fdea 	bl	80009ec <__aeabi_dcmplt>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	f040 8087 	bne.w	8007f2c <_dtoa_r+0x6bc>
 8007e1e:	42a6      	cmp	r6, r4
 8007e20:	f43f af43 	beq.w	8007caa <_dtoa_r+0x43a>
 8007e24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e28:	2200      	movs	r2, #0
 8007e2a:	4b53      	ldr	r3, [pc, #332]	@ (8007f78 <_dtoa_r+0x708>)
 8007e2c:	f7f8 fb6c 	bl	8000508 <__aeabi_dmul>
 8007e30:	2200      	movs	r2, #0
 8007e32:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8007f78 <_dtoa_r+0x708>)
 8007e3c:	f7f8 fb64 	bl	8000508 <__aeabi_dmul>
 8007e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e44:	e7c4      	b.n	8007dd0 <_dtoa_r+0x560>
 8007e46:	4631      	mov	r1, r6
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f7f8 fb5d 	bl	8000508 <__aeabi_dmul>
 8007e4e:	4656      	mov	r6, sl
 8007e50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e54:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e5a:	f7f8 fe05 	bl	8000a68 <__aeabi_d2iz>
 8007e5e:	4605      	mov	r5, r0
 8007e60:	f7f8 fae8 	bl	8000434 <__aeabi_i2d>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e6c:	f7f8 f994 	bl	8000198 <__aeabi_dsub>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	3530      	adds	r5, #48	@ 0x30
 8007e76:	f806 5b01 	strb.w	r5, [r6], #1
 8007e7a:	42a6      	cmp	r6, r4
 8007e7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e80:	f04f 0200 	mov.w	r2, #0
 8007e84:	d124      	bne.n	8007ed0 <_dtoa_r+0x660>
 8007e86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e8a:	4b39      	ldr	r3, [pc, #228]	@ (8007f70 <_dtoa_r+0x700>)
 8007e8c:	f7f8 f986 	bl	800019c <__adddf3>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e98:	f7f8 fdc6 	bl	8000a28 <__aeabi_dcmpgt>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d145      	bne.n	8007f2c <_dtoa_r+0x6bc>
 8007ea0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	4932      	ldr	r1, [pc, #200]	@ (8007f70 <_dtoa_r+0x700>)
 8007ea8:	f7f8 f976 	bl	8000198 <__aeabi_dsub>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb4:	f7f8 fd9a 	bl	80009ec <__aeabi_dcmplt>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	f43f aef6 	beq.w	8007caa <_dtoa_r+0x43a>
 8007ebe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007ec0:	1e73      	subs	r3, r6, #1
 8007ec2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ec4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ec8:	2b30      	cmp	r3, #48	@ 0x30
 8007eca:	d0f8      	beq.n	8007ebe <_dtoa_r+0x64e>
 8007ecc:	9f04      	ldr	r7, [sp, #16]
 8007ece:	e73f      	b.n	8007d50 <_dtoa_r+0x4e0>
 8007ed0:	4b29      	ldr	r3, [pc, #164]	@ (8007f78 <_dtoa_r+0x708>)
 8007ed2:	f7f8 fb19 	bl	8000508 <__aeabi_dmul>
 8007ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eda:	e7bc      	b.n	8007e56 <_dtoa_r+0x5e6>
 8007edc:	d10c      	bne.n	8007ef8 <_dtoa_r+0x688>
 8007ede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4b25      	ldr	r3, [pc, #148]	@ (8007f7c <_dtoa_r+0x70c>)
 8007ee6:	f7f8 fb0f 	bl	8000508 <__aeabi_dmul>
 8007eea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007eee:	f7f8 fd91 	bl	8000a14 <__aeabi_dcmpge>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f000 815b 	beq.w	80081ae <_dtoa_r+0x93e>
 8007ef8:	2400      	movs	r4, #0
 8007efa:	4625      	mov	r5, r4
 8007efc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007efe:	4656      	mov	r6, sl
 8007f00:	43db      	mvns	r3, r3
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	2700      	movs	r7, #0
 8007f06:	4621      	mov	r1, r4
 8007f08:	4658      	mov	r0, fp
 8007f0a:	f000 fbb7 	bl	800867c <_Bfree>
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	d0dc      	beq.n	8007ecc <_dtoa_r+0x65c>
 8007f12:	b12f      	cbz	r7, 8007f20 <_dtoa_r+0x6b0>
 8007f14:	42af      	cmp	r7, r5
 8007f16:	d003      	beq.n	8007f20 <_dtoa_r+0x6b0>
 8007f18:	4639      	mov	r1, r7
 8007f1a:	4658      	mov	r0, fp
 8007f1c:	f000 fbae 	bl	800867c <_Bfree>
 8007f20:	4629      	mov	r1, r5
 8007f22:	4658      	mov	r0, fp
 8007f24:	f000 fbaa 	bl	800867c <_Bfree>
 8007f28:	e7d0      	b.n	8007ecc <_dtoa_r+0x65c>
 8007f2a:	9704      	str	r7, [sp, #16]
 8007f2c:	4633      	mov	r3, r6
 8007f2e:	461e      	mov	r6, r3
 8007f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f34:	2a39      	cmp	r2, #57	@ 0x39
 8007f36:	d107      	bne.n	8007f48 <_dtoa_r+0x6d8>
 8007f38:	459a      	cmp	sl, r3
 8007f3a:	d1f8      	bne.n	8007f2e <_dtoa_r+0x6be>
 8007f3c:	9a04      	ldr	r2, [sp, #16]
 8007f3e:	3201      	adds	r2, #1
 8007f40:	9204      	str	r2, [sp, #16]
 8007f42:	2230      	movs	r2, #48	@ 0x30
 8007f44:	f88a 2000 	strb.w	r2, [sl]
 8007f48:	781a      	ldrb	r2, [r3, #0]
 8007f4a:	3201      	adds	r2, #1
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	e7bd      	b.n	8007ecc <_dtoa_r+0x65c>
 8007f50:	2200      	movs	r2, #0
 8007f52:	4b09      	ldr	r3, [pc, #36]	@ (8007f78 <_dtoa_r+0x708>)
 8007f54:	f7f8 fad8 	bl	8000508 <__aeabi_dmul>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	460d      	mov	r5, r1
 8007f60:	f7f8 fd3a 	bl	80009d8 <__aeabi_dcmpeq>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	f43f aebc 	beq.w	8007ce2 <_dtoa_r+0x472>
 8007f6a:	e6f1      	b.n	8007d50 <_dtoa_r+0x4e0>
 8007f6c:	0800a8c0 	.word	0x0800a8c0
 8007f70:	3fe00000 	.word	0x3fe00000
 8007f74:	3ff00000 	.word	0x3ff00000
 8007f78:	40240000 	.word	0x40240000
 8007f7c:	40140000 	.word	0x40140000
 8007f80:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007f82:	2a00      	cmp	r2, #0
 8007f84:	f000 80db 	beq.w	800813e <_dtoa_r+0x8ce>
 8007f88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f8a:	2a01      	cmp	r2, #1
 8007f8c:	f300 80bf 	bgt.w	800810e <_dtoa_r+0x89e>
 8007f90:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007f92:	2a00      	cmp	r2, #0
 8007f94:	f000 80b7 	beq.w	8008106 <_dtoa_r+0x896>
 8007f98:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f9c:	4646      	mov	r6, r8
 8007f9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	441a      	add	r2, r3
 8007fa6:	4658      	mov	r0, fp
 8007fa8:	4498      	add	r8, r3
 8007faa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fac:	f000 fc1a 	bl	80087e4 <__i2b>
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	b15e      	cbz	r6, 8007fcc <_dtoa_r+0x75c>
 8007fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd08      	ble.n	8007fcc <_dtoa_r+0x75c>
 8007fba:	42b3      	cmp	r3, r6
 8007fbc:	bfa8      	it	ge
 8007fbe:	4633      	movge	r3, r6
 8007fc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fc2:	eba8 0803 	sub.w	r8, r8, r3
 8007fc6:	1af6      	subs	r6, r6, r3
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fce:	b1f3      	cbz	r3, 800800e <_dtoa_r+0x79e>
 8007fd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 80b7 	beq.w	8008146 <_dtoa_r+0x8d6>
 8007fd8:	b18c      	cbz	r4, 8007ffe <_dtoa_r+0x78e>
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4622      	mov	r2, r4
 8007fde:	4658      	mov	r0, fp
 8007fe0:	f000 fcbe 	bl	8008960 <__pow5mult>
 8007fe4:	464a      	mov	r2, r9
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	4605      	mov	r5, r0
 8007fea:	4658      	mov	r0, fp
 8007fec:	f000 fc10 	bl	8008810 <__multiply>
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	9004      	str	r0, [sp, #16]
 8007ff4:	4658      	mov	r0, fp
 8007ff6:	f000 fb41 	bl	800867c <_Bfree>
 8007ffa:	9b04      	ldr	r3, [sp, #16]
 8007ffc:	4699      	mov	r9, r3
 8007ffe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008000:	1b1a      	subs	r2, r3, r4
 8008002:	d004      	beq.n	800800e <_dtoa_r+0x79e>
 8008004:	4649      	mov	r1, r9
 8008006:	4658      	mov	r0, fp
 8008008:	f000 fcaa 	bl	8008960 <__pow5mult>
 800800c:	4681      	mov	r9, r0
 800800e:	2101      	movs	r1, #1
 8008010:	4658      	mov	r0, fp
 8008012:	f000 fbe7 	bl	80087e4 <__i2b>
 8008016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008018:	4604      	mov	r4, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 81c9 	beq.w	80083b2 <_dtoa_r+0xb42>
 8008020:	461a      	mov	r2, r3
 8008022:	4601      	mov	r1, r0
 8008024:	4658      	mov	r0, fp
 8008026:	f000 fc9b 	bl	8008960 <__pow5mult>
 800802a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800802c:	4604      	mov	r4, r0
 800802e:	2b01      	cmp	r3, #1
 8008030:	f300 808f 	bgt.w	8008152 <_dtoa_r+0x8e2>
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	f040 8087 	bne.w	800814a <_dtoa_r+0x8da>
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008042:	2b00      	cmp	r3, #0
 8008044:	f040 8083 	bne.w	800814e <_dtoa_r+0x8de>
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800804e:	0d1b      	lsrs	r3, r3, #20
 8008050:	051b      	lsls	r3, r3, #20
 8008052:	b12b      	cbz	r3, 8008060 <_dtoa_r+0x7f0>
 8008054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008056:	f108 0801 	add.w	r8, r8, #1
 800805a:	3301      	adds	r3, #1
 800805c:	9309      	str	r3, [sp, #36]	@ 0x24
 800805e:	2301      	movs	r3, #1
 8008060:	930a      	str	r3, [sp, #40]	@ 0x28
 8008062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 81aa 	beq.w	80083be <_dtoa_r+0xb4e>
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008070:	6918      	ldr	r0, [r3, #16]
 8008072:	f000 fb6b 	bl	800874c <__hi0bits>
 8008076:	f1c0 0020 	rsb	r0, r0, #32
 800807a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800807c:	4418      	add	r0, r3
 800807e:	f010 001f 	ands.w	r0, r0, #31
 8008082:	d071      	beq.n	8008168 <_dtoa_r+0x8f8>
 8008084:	f1c0 0320 	rsb	r3, r0, #32
 8008088:	2b04      	cmp	r3, #4
 800808a:	dd65      	ble.n	8008158 <_dtoa_r+0x8e8>
 800808c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800808e:	f1c0 001c 	rsb	r0, r0, #28
 8008092:	4403      	add	r3, r0
 8008094:	4480      	add	r8, r0
 8008096:	4406      	add	r6, r0
 8008098:	9309      	str	r3, [sp, #36]	@ 0x24
 800809a:	f1b8 0f00 	cmp.w	r8, #0
 800809e:	dd05      	ble.n	80080ac <_dtoa_r+0x83c>
 80080a0:	4649      	mov	r1, r9
 80080a2:	4642      	mov	r2, r8
 80080a4:	4658      	mov	r0, fp
 80080a6:	f000 fcb5 	bl	8008a14 <__lshift>
 80080aa:	4681      	mov	r9, r0
 80080ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	dd05      	ble.n	80080be <_dtoa_r+0x84e>
 80080b2:	4621      	mov	r1, r4
 80080b4:	461a      	mov	r2, r3
 80080b6:	4658      	mov	r0, fp
 80080b8:	f000 fcac 	bl	8008a14 <__lshift>
 80080bc:	4604      	mov	r4, r0
 80080be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d053      	beq.n	800816c <_dtoa_r+0x8fc>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4648      	mov	r0, r9
 80080c8:	f000 fd10 	bl	8008aec <__mcmp>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	da4d      	bge.n	800816c <_dtoa_r+0x8fc>
 80080d0:	1e7b      	subs	r3, r7, #1
 80080d2:	4649      	mov	r1, r9
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	220a      	movs	r2, #10
 80080d8:	2300      	movs	r3, #0
 80080da:	4658      	mov	r0, fp
 80080dc:	f000 faf0 	bl	80086c0 <__multadd>
 80080e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080e2:	4681      	mov	r9, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 816c 	beq.w	80083c2 <_dtoa_r+0xb52>
 80080ea:	2300      	movs	r3, #0
 80080ec:	4629      	mov	r1, r5
 80080ee:	220a      	movs	r2, #10
 80080f0:	4658      	mov	r0, fp
 80080f2:	f000 fae5 	bl	80086c0 <__multadd>
 80080f6:	9b08      	ldr	r3, [sp, #32]
 80080f8:	4605      	mov	r5, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	dc61      	bgt.n	80081c2 <_dtoa_r+0x952>
 80080fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008100:	2b02      	cmp	r3, #2
 8008102:	dc3b      	bgt.n	800817c <_dtoa_r+0x90c>
 8008104:	e05d      	b.n	80081c2 <_dtoa_r+0x952>
 8008106:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008108:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800810c:	e746      	b.n	8007f9c <_dtoa_r+0x72c>
 800810e:	9b07      	ldr	r3, [sp, #28]
 8008110:	1e5c      	subs	r4, r3, #1
 8008112:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008114:	42a3      	cmp	r3, r4
 8008116:	bfbf      	itttt	lt
 8008118:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800811a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800811c:	1ae3      	sublt	r3, r4, r3
 800811e:	18d2      	addlt	r2, r2, r3
 8008120:	bfa8      	it	ge
 8008122:	1b1c      	subge	r4, r3, r4
 8008124:	9b07      	ldr	r3, [sp, #28]
 8008126:	bfbe      	ittt	lt
 8008128:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800812a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800812c:	2400      	movlt	r4, #0
 800812e:	2b00      	cmp	r3, #0
 8008130:	bfb5      	itete	lt
 8008132:	eba8 0603 	sublt.w	r6, r8, r3
 8008136:	4646      	movge	r6, r8
 8008138:	2300      	movlt	r3, #0
 800813a:	9b07      	ldrge	r3, [sp, #28]
 800813c:	e730      	b.n	8007fa0 <_dtoa_r+0x730>
 800813e:	4646      	mov	r6, r8
 8008140:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008142:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008144:	e735      	b.n	8007fb2 <_dtoa_r+0x742>
 8008146:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008148:	e75c      	b.n	8008004 <_dtoa_r+0x794>
 800814a:	2300      	movs	r3, #0
 800814c:	e788      	b.n	8008060 <_dtoa_r+0x7f0>
 800814e:	9b02      	ldr	r3, [sp, #8]
 8008150:	e786      	b.n	8008060 <_dtoa_r+0x7f0>
 8008152:	2300      	movs	r3, #0
 8008154:	930a      	str	r3, [sp, #40]	@ 0x28
 8008156:	e788      	b.n	800806a <_dtoa_r+0x7fa>
 8008158:	d09f      	beq.n	800809a <_dtoa_r+0x82a>
 800815a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800815c:	331c      	adds	r3, #28
 800815e:	441a      	add	r2, r3
 8008160:	4498      	add	r8, r3
 8008162:	441e      	add	r6, r3
 8008164:	9209      	str	r2, [sp, #36]	@ 0x24
 8008166:	e798      	b.n	800809a <_dtoa_r+0x82a>
 8008168:	4603      	mov	r3, r0
 800816a:	e7f6      	b.n	800815a <_dtoa_r+0x8ea>
 800816c:	9b07      	ldr	r3, [sp, #28]
 800816e:	9704      	str	r7, [sp, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	dc20      	bgt.n	80081b6 <_dtoa_r+0x946>
 8008174:	9308      	str	r3, [sp, #32]
 8008176:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008178:	2b02      	cmp	r3, #2
 800817a:	dd1e      	ble.n	80081ba <_dtoa_r+0x94a>
 800817c:	9b08      	ldr	r3, [sp, #32]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f47f aebc 	bne.w	8007efc <_dtoa_r+0x68c>
 8008184:	4621      	mov	r1, r4
 8008186:	2205      	movs	r2, #5
 8008188:	4658      	mov	r0, fp
 800818a:	f000 fa99 	bl	80086c0 <__multadd>
 800818e:	4601      	mov	r1, r0
 8008190:	4604      	mov	r4, r0
 8008192:	4648      	mov	r0, r9
 8008194:	f000 fcaa 	bl	8008aec <__mcmp>
 8008198:	2800      	cmp	r0, #0
 800819a:	f77f aeaf 	ble.w	8007efc <_dtoa_r+0x68c>
 800819e:	2331      	movs	r3, #49	@ 0x31
 80081a0:	4656      	mov	r6, sl
 80081a2:	f806 3b01 	strb.w	r3, [r6], #1
 80081a6:	9b04      	ldr	r3, [sp, #16]
 80081a8:	3301      	adds	r3, #1
 80081aa:	9304      	str	r3, [sp, #16]
 80081ac:	e6aa      	b.n	8007f04 <_dtoa_r+0x694>
 80081ae:	9c07      	ldr	r4, [sp, #28]
 80081b0:	9704      	str	r7, [sp, #16]
 80081b2:	4625      	mov	r5, r4
 80081b4:	e7f3      	b.n	800819e <_dtoa_r+0x92e>
 80081b6:	9b07      	ldr	r3, [sp, #28]
 80081b8:	9308      	str	r3, [sp, #32]
 80081ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8104 	beq.w	80083ca <_dtoa_r+0xb5a>
 80081c2:	2e00      	cmp	r6, #0
 80081c4:	dd05      	ble.n	80081d2 <_dtoa_r+0x962>
 80081c6:	4629      	mov	r1, r5
 80081c8:	4632      	mov	r2, r6
 80081ca:	4658      	mov	r0, fp
 80081cc:	f000 fc22 	bl	8008a14 <__lshift>
 80081d0:	4605      	mov	r5, r0
 80081d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d05a      	beq.n	800828e <_dtoa_r+0xa1e>
 80081d8:	4658      	mov	r0, fp
 80081da:	6869      	ldr	r1, [r5, #4]
 80081dc:	f000 fa0e 	bl	80085fc <_Balloc>
 80081e0:	4606      	mov	r6, r0
 80081e2:	b928      	cbnz	r0, 80081f0 <_dtoa_r+0x980>
 80081e4:	4602      	mov	r2, r0
 80081e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80081ea:	4b83      	ldr	r3, [pc, #524]	@ (80083f8 <_dtoa_r+0xb88>)
 80081ec:	f7ff bb54 	b.w	8007898 <_dtoa_r+0x28>
 80081f0:	692a      	ldr	r2, [r5, #16]
 80081f2:	f105 010c 	add.w	r1, r5, #12
 80081f6:	3202      	adds	r2, #2
 80081f8:	0092      	lsls	r2, r2, #2
 80081fa:	300c      	adds	r0, #12
 80081fc:	f001 f96c 	bl	80094d8 <memcpy>
 8008200:	2201      	movs	r2, #1
 8008202:	4631      	mov	r1, r6
 8008204:	4658      	mov	r0, fp
 8008206:	f000 fc05 	bl	8008a14 <__lshift>
 800820a:	462f      	mov	r7, r5
 800820c:	4605      	mov	r5, r0
 800820e:	f10a 0301 	add.w	r3, sl, #1
 8008212:	9307      	str	r3, [sp, #28]
 8008214:	9b08      	ldr	r3, [sp, #32]
 8008216:	4453      	add	r3, sl
 8008218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	930a      	str	r3, [sp, #40]	@ 0x28
 8008222:	9b07      	ldr	r3, [sp, #28]
 8008224:	4621      	mov	r1, r4
 8008226:	3b01      	subs	r3, #1
 8008228:	4648      	mov	r0, r9
 800822a:	9302      	str	r3, [sp, #8]
 800822c:	f7ff fa97 	bl	800775e <quorem>
 8008230:	4639      	mov	r1, r7
 8008232:	9008      	str	r0, [sp, #32]
 8008234:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008238:	4648      	mov	r0, r9
 800823a:	f000 fc57 	bl	8008aec <__mcmp>
 800823e:	462a      	mov	r2, r5
 8008240:	9009      	str	r0, [sp, #36]	@ 0x24
 8008242:	4621      	mov	r1, r4
 8008244:	4658      	mov	r0, fp
 8008246:	f000 fc6d 	bl	8008b24 <__mdiff>
 800824a:	68c2      	ldr	r2, [r0, #12]
 800824c:	4606      	mov	r6, r0
 800824e:	bb02      	cbnz	r2, 8008292 <_dtoa_r+0xa22>
 8008250:	4601      	mov	r1, r0
 8008252:	4648      	mov	r0, r9
 8008254:	f000 fc4a 	bl	8008aec <__mcmp>
 8008258:	4602      	mov	r2, r0
 800825a:	4631      	mov	r1, r6
 800825c:	4658      	mov	r0, fp
 800825e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008260:	f000 fa0c 	bl	800867c <_Bfree>
 8008264:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008266:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008268:	9e07      	ldr	r6, [sp, #28]
 800826a:	ea43 0102 	orr.w	r1, r3, r2
 800826e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008270:	4319      	orrs	r1, r3
 8008272:	d110      	bne.n	8008296 <_dtoa_r+0xa26>
 8008274:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008278:	d029      	beq.n	80082ce <_dtoa_r+0xa5e>
 800827a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	dd02      	ble.n	8008286 <_dtoa_r+0xa16>
 8008280:	9b08      	ldr	r3, [sp, #32]
 8008282:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008286:	9b02      	ldr	r3, [sp, #8]
 8008288:	f883 8000 	strb.w	r8, [r3]
 800828c:	e63b      	b.n	8007f06 <_dtoa_r+0x696>
 800828e:	4628      	mov	r0, r5
 8008290:	e7bb      	b.n	800820a <_dtoa_r+0x99a>
 8008292:	2201      	movs	r2, #1
 8008294:	e7e1      	b.n	800825a <_dtoa_r+0x9ea>
 8008296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	db04      	blt.n	80082a6 <_dtoa_r+0xa36>
 800829c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800829e:	430b      	orrs	r3, r1
 80082a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082a2:	430b      	orrs	r3, r1
 80082a4:	d120      	bne.n	80082e8 <_dtoa_r+0xa78>
 80082a6:	2a00      	cmp	r2, #0
 80082a8:	dded      	ble.n	8008286 <_dtoa_r+0xa16>
 80082aa:	4649      	mov	r1, r9
 80082ac:	2201      	movs	r2, #1
 80082ae:	4658      	mov	r0, fp
 80082b0:	f000 fbb0 	bl	8008a14 <__lshift>
 80082b4:	4621      	mov	r1, r4
 80082b6:	4681      	mov	r9, r0
 80082b8:	f000 fc18 	bl	8008aec <__mcmp>
 80082bc:	2800      	cmp	r0, #0
 80082be:	dc03      	bgt.n	80082c8 <_dtoa_r+0xa58>
 80082c0:	d1e1      	bne.n	8008286 <_dtoa_r+0xa16>
 80082c2:	f018 0f01 	tst.w	r8, #1
 80082c6:	d0de      	beq.n	8008286 <_dtoa_r+0xa16>
 80082c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082cc:	d1d8      	bne.n	8008280 <_dtoa_r+0xa10>
 80082ce:	2339      	movs	r3, #57	@ 0x39
 80082d0:	9a02      	ldr	r2, [sp, #8]
 80082d2:	7013      	strb	r3, [r2, #0]
 80082d4:	4633      	mov	r3, r6
 80082d6:	461e      	mov	r6, r3
 80082d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80082dc:	3b01      	subs	r3, #1
 80082de:	2a39      	cmp	r2, #57	@ 0x39
 80082e0:	d052      	beq.n	8008388 <_dtoa_r+0xb18>
 80082e2:	3201      	adds	r2, #1
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	e60e      	b.n	8007f06 <_dtoa_r+0x696>
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	dd07      	ble.n	80082fc <_dtoa_r+0xa8c>
 80082ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082f0:	d0ed      	beq.n	80082ce <_dtoa_r+0xa5e>
 80082f2:	9a02      	ldr	r2, [sp, #8]
 80082f4:	f108 0301 	add.w	r3, r8, #1
 80082f8:	7013      	strb	r3, [r2, #0]
 80082fa:	e604      	b.n	8007f06 <_dtoa_r+0x696>
 80082fc:	9b07      	ldr	r3, [sp, #28]
 80082fe:	9a07      	ldr	r2, [sp, #28]
 8008300:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008304:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008306:	4293      	cmp	r3, r2
 8008308:	d028      	beq.n	800835c <_dtoa_r+0xaec>
 800830a:	4649      	mov	r1, r9
 800830c:	2300      	movs	r3, #0
 800830e:	220a      	movs	r2, #10
 8008310:	4658      	mov	r0, fp
 8008312:	f000 f9d5 	bl	80086c0 <__multadd>
 8008316:	42af      	cmp	r7, r5
 8008318:	4681      	mov	r9, r0
 800831a:	f04f 0300 	mov.w	r3, #0
 800831e:	f04f 020a 	mov.w	r2, #10
 8008322:	4639      	mov	r1, r7
 8008324:	4658      	mov	r0, fp
 8008326:	d107      	bne.n	8008338 <_dtoa_r+0xac8>
 8008328:	f000 f9ca 	bl	80086c0 <__multadd>
 800832c:	4607      	mov	r7, r0
 800832e:	4605      	mov	r5, r0
 8008330:	9b07      	ldr	r3, [sp, #28]
 8008332:	3301      	adds	r3, #1
 8008334:	9307      	str	r3, [sp, #28]
 8008336:	e774      	b.n	8008222 <_dtoa_r+0x9b2>
 8008338:	f000 f9c2 	bl	80086c0 <__multadd>
 800833c:	4629      	mov	r1, r5
 800833e:	4607      	mov	r7, r0
 8008340:	2300      	movs	r3, #0
 8008342:	220a      	movs	r2, #10
 8008344:	4658      	mov	r0, fp
 8008346:	f000 f9bb 	bl	80086c0 <__multadd>
 800834a:	4605      	mov	r5, r0
 800834c:	e7f0      	b.n	8008330 <_dtoa_r+0xac0>
 800834e:	9b08      	ldr	r3, [sp, #32]
 8008350:	2700      	movs	r7, #0
 8008352:	2b00      	cmp	r3, #0
 8008354:	bfcc      	ite	gt
 8008356:	461e      	movgt	r6, r3
 8008358:	2601      	movle	r6, #1
 800835a:	4456      	add	r6, sl
 800835c:	4649      	mov	r1, r9
 800835e:	2201      	movs	r2, #1
 8008360:	4658      	mov	r0, fp
 8008362:	f000 fb57 	bl	8008a14 <__lshift>
 8008366:	4621      	mov	r1, r4
 8008368:	4681      	mov	r9, r0
 800836a:	f000 fbbf 	bl	8008aec <__mcmp>
 800836e:	2800      	cmp	r0, #0
 8008370:	dcb0      	bgt.n	80082d4 <_dtoa_r+0xa64>
 8008372:	d102      	bne.n	800837a <_dtoa_r+0xb0a>
 8008374:	f018 0f01 	tst.w	r8, #1
 8008378:	d1ac      	bne.n	80082d4 <_dtoa_r+0xa64>
 800837a:	4633      	mov	r3, r6
 800837c:	461e      	mov	r6, r3
 800837e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008382:	2a30      	cmp	r2, #48	@ 0x30
 8008384:	d0fa      	beq.n	800837c <_dtoa_r+0xb0c>
 8008386:	e5be      	b.n	8007f06 <_dtoa_r+0x696>
 8008388:	459a      	cmp	sl, r3
 800838a:	d1a4      	bne.n	80082d6 <_dtoa_r+0xa66>
 800838c:	9b04      	ldr	r3, [sp, #16]
 800838e:	3301      	adds	r3, #1
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	2331      	movs	r3, #49	@ 0x31
 8008394:	f88a 3000 	strb.w	r3, [sl]
 8008398:	e5b5      	b.n	8007f06 <_dtoa_r+0x696>
 800839a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800839c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80083fc <_dtoa_r+0xb8c>
 80083a0:	b11b      	cbz	r3, 80083aa <_dtoa_r+0xb3a>
 80083a2:	f10a 0308 	add.w	r3, sl, #8
 80083a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80083a8:	6013      	str	r3, [r2, #0]
 80083aa:	4650      	mov	r0, sl
 80083ac:	b017      	add	sp, #92	@ 0x5c
 80083ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	f77f ae3d 	ble.w	8008034 <_dtoa_r+0x7c4>
 80083ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80083be:	2001      	movs	r0, #1
 80083c0:	e65b      	b.n	800807a <_dtoa_r+0x80a>
 80083c2:	9b08      	ldr	r3, [sp, #32]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f77f aed6 	ble.w	8008176 <_dtoa_r+0x906>
 80083ca:	4656      	mov	r6, sl
 80083cc:	4621      	mov	r1, r4
 80083ce:	4648      	mov	r0, r9
 80083d0:	f7ff f9c5 	bl	800775e <quorem>
 80083d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083d8:	9b08      	ldr	r3, [sp, #32]
 80083da:	f806 8b01 	strb.w	r8, [r6], #1
 80083de:	eba6 020a 	sub.w	r2, r6, sl
 80083e2:	4293      	cmp	r3, r2
 80083e4:	ddb3      	ble.n	800834e <_dtoa_r+0xade>
 80083e6:	4649      	mov	r1, r9
 80083e8:	2300      	movs	r3, #0
 80083ea:	220a      	movs	r2, #10
 80083ec:	4658      	mov	r0, fp
 80083ee:	f000 f967 	bl	80086c0 <__multadd>
 80083f2:	4681      	mov	r9, r0
 80083f4:	e7ea      	b.n	80083cc <_dtoa_r+0xb5c>
 80083f6:	bf00      	nop
 80083f8:	0800a820 	.word	0x0800a820
 80083fc:	0800a7a4 	.word	0x0800a7a4

08008400 <_free_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4605      	mov	r5, r0
 8008404:	2900      	cmp	r1, #0
 8008406:	d040      	beq.n	800848a <_free_r+0x8a>
 8008408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800840c:	1f0c      	subs	r4, r1, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	bfb8      	it	lt
 8008412:	18e4      	addlt	r4, r4, r3
 8008414:	f000 f8e6 	bl	80085e4 <__malloc_lock>
 8008418:	4a1c      	ldr	r2, [pc, #112]	@ (800848c <_free_r+0x8c>)
 800841a:	6813      	ldr	r3, [r2, #0]
 800841c:	b933      	cbnz	r3, 800842c <_free_r+0x2c>
 800841e:	6063      	str	r3, [r4, #4]
 8008420:	6014      	str	r4, [r2, #0]
 8008422:	4628      	mov	r0, r5
 8008424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008428:	f000 b8e2 	b.w	80085f0 <__malloc_unlock>
 800842c:	42a3      	cmp	r3, r4
 800842e:	d908      	bls.n	8008442 <_free_r+0x42>
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	1821      	adds	r1, r4, r0
 8008434:	428b      	cmp	r3, r1
 8008436:	bf01      	itttt	eq
 8008438:	6819      	ldreq	r1, [r3, #0]
 800843a:	685b      	ldreq	r3, [r3, #4]
 800843c:	1809      	addeq	r1, r1, r0
 800843e:	6021      	streq	r1, [r4, #0]
 8008440:	e7ed      	b.n	800841e <_free_r+0x1e>
 8008442:	461a      	mov	r2, r3
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	b10b      	cbz	r3, 800844c <_free_r+0x4c>
 8008448:	42a3      	cmp	r3, r4
 800844a:	d9fa      	bls.n	8008442 <_free_r+0x42>
 800844c:	6811      	ldr	r1, [r2, #0]
 800844e:	1850      	adds	r0, r2, r1
 8008450:	42a0      	cmp	r0, r4
 8008452:	d10b      	bne.n	800846c <_free_r+0x6c>
 8008454:	6820      	ldr	r0, [r4, #0]
 8008456:	4401      	add	r1, r0
 8008458:	1850      	adds	r0, r2, r1
 800845a:	4283      	cmp	r3, r0
 800845c:	6011      	str	r1, [r2, #0]
 800845e:	d1e0      	bne.n	8008422 <_free_r+0x22>
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	4408      	add	r0, r1
 8008466:	6010      	str	r0, [r2, #0]
 8008468:	6053      	str	r3, [r2, #4]
 800846a:	e7da      	b.n	8008422 <_free_r+0x22>
 800846c:	d902      	bls.n	8008474 <_free_r+0x74>
 800846e:	230c      	movs	r3, #12
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	e7d6      	b.n	8008422 <_free_r+0x22>
 8008474:	6820      	ldr	r0, [r4, #0]
 8008476:	1821      	adds	r1, r4, r0
 8008478:	428b      	cmp	r3, r1
 800847a:	bf01      	itttt	eq
 800847c:	6819      	ldreq	r1, [r3, #0]
 800847e:	685b      	ldreq	r3, [r3, #4]
 8008480:	1809      	addeq	r1, r1, r0
 8008482:	6021      	streq	r1, [r4, #0]
 8008484:	6063      	str	r3, [r4, #4]
 8008486:	6054      	str	r4, [r2, #4]
 8008488:	e7cb      	b.n	8008422 <_free_r+0x22>
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	200005fc 	.word	0x200005fc

08008490 <malloc>:
 8008490:	4b02      	ldr	r3, [pc, #8]	@ (800849c <malloc+0xc>)
 8008492:	4601      	mov	r1, r0
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	f000 b825 	b.w	80084e4 <_malloc_r>
 800849a:	bf00      	nop
 800849c:	20000020 	.word	0x20000020

080084a0 <sbrk_aligned>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	4e0f      	ldr	r6, [pc, #60]	@ (80084e0 <sbrk_aligned+0x40>)
 80084a4:	460c      	mov	r4, r1
 80084a6:	6831      	ldr	r1, [r6, #0]
 80084a8:	4605      	mov	r5, r0
 80084aa:	b911      	cbnz	r1, 80084b2 <sbrk_aligned+0x12>
 80084ac:	f001 f804 	bl	80094b8 <_sbrk_r>
 80084b0:	6030      	str	r0, [r6, #0]
 80084b2:	4621      	mov	r1, r4
 80084b4:	4628      	mov	r0, r5
 80084b6:	f000 ffff 	bl	80094b8 <_sbrk_r>
 80084ba:	1c43      	adds	r3, r0, #1
 80084bc:	d103      	bne.n	80084c6 <sbrk_aligned+0x26>
 80084be:	f04f 34ff 	mov.w	r4, #4294967295
 80084c2:	4620      	mov	r0, r4
 80084c4:	bd70      	pop	{r4, r5, r6, pc}
 80084c6:	1cc4      	adds	r4, r0, #3
 80084c8:	f024 0403 	bic.w	r4, r4, #3
 80084cc:	42a0      	cmp	r0, r4
 80084ce:	d0f8      	beq.n	80084c2 <sbrk_aligned+0x22>
 80084d0:	1a21      	subs	r1, r4, r0
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 fff0 	bl	80094b8 <_sbrk_r>
 80084d8:	3001      	adds	r0, #1
 80084da:	d1f2      	bne.n	80084c2 <sbrk_aligned+0x22>
 80084dc:	e7ef      	b.n	80084be <sbrk_aligned+0x1e>
 80084de:	bf00      	nop
 80084e0:	200005f8 	.word	0x200005f8

080084e4 <_malloc_r>:
 80084e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e8:	1ccd      	adds	r5, r1, #3
 80084ea:	f025 0503 	bic.w	r5, r5, #3
 80084ee:	3508      	adds	r5, #8
 80084f0:	2d0c      	cmp	r5, #12
 80084f2:	bf38      	it	cc
 80084f4:	250c      	movcc	r5, #12
 80084f6:	2d00      	cmp	r5, #0
 80084f8:	4606      	mov	r6, r0
 80084fa:	db01      	blt.n	8008500 <_malloc_r+0x1c>
 80084fc:	42a9      	cmp	r1, r5
 80084fe:	d904      	bls.n	800850a <_malloc_r+0x26>
 8008500:	230c      	movs	r3, #12
 8008502:	6033      	str	r3, [r6, #0]
 8008504:	2000      	movs	r0, #0
 8008506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800850a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085e0 <_malloc_r+0xfc>
 800850e:	f000 f869 	bl	80085e4 <__malloc_lock>
 8008512:	f8d8 3000 	ldr.w	r3, [r8]
 8008516:	461c      	mov	r4, r3
 8008518:	bb44      	cbnz	r4, 800856c <_malloc_r+0x88>
 800851a:	4629      	mov	r1, r5
 800851c:	4630      	mov	r0, r6
 800851e:	f7ff ffbf 	bl	80084a0 <sbrk_aligned>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	4604      	mov	r4, r0
 8008526:	d158      	bne.n	80085da <_malloc_r+0xf6>
 8008528:	f8d8 4000 	ldr.w	r4, [r8]
 800852c:	4627      	mov	r7, r4
 800852e:	2f00      	cmp	r7, #0
 8008530:	d143      	bne.n	80085ba <_malloc_r+0xd6>
 8008532:	2c00      	cmp	r4, #0
 8008534:	d04b      	beq.n	80085ce <_malloc_r+0xea>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	4639      	mov	r1, r7
 800853a:	4630      	mov	r0, r6
 800853c:	eb04 0903 	add.w	r9, r4, r3
 8008540:	f000 ffba 	bl	80094b8 <_sbrk_r>
 8008544:	4581      	cmp	r9, r0
 8008546:	d142      	bne.n	80085ce <_malloc_r+0xea>
 8008548:	6821      	ldr	r1, [r4, #0]
 800854a:	4630      	mov	r0, r6
 800854c:	1a6d      	subs	r5, r5, r1
 800854e:	4629      	mov	r1, r5
 8008550:	f7ff ffa6 	bl	80084a0 <sbrk_aligned>
 8008554:	3001      	adds	r0, #1
 8008556:	d03a      	beq.n	80085ce <_malloc_r+0xea>
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	442b      	add	r3, r5
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	f8d8 3000 	ldr.w	r3, [r8]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	bb62      	cbnz	r2, 80085c0 <_malloc_r+0xdc>
 8008566:	f8c8 7000 	str.w	r7, [r8]
 800856a:	e00f      	b.n	800858c <_malloc_r+0xa8>
 800856c:	6822      	ldr	r2, [r4, #0]
 800856e:	1b52      	subs	r2, r2, r5
 8008570:	d420      	bmi.n	80085b4 <_malloc_r+0xd0>
 8008572:	2a0b      	cmp	r2, #11
 8008574:	d917      	bls.n	80085a6 <_malloc_r+0xc2>
 8008576:	1961      	adds	r1, r4, r5
 8008578:	42a3      	cmp	r3, r4
 800857a:	6025      	str	r5, [r4, #0]
 800857c:	bf18      	it	ne
 800857e:	6059      	strne	r1, [r3, #4]
 8008580:	6863      	ldr	r3, [r4, #4]
 8008582:	bf08      	it	eq
 8008584:	f8c8 1000 	streq.w	r1, [r8]
 8008588:	5162      	str	r2, [r4, r5]
 800858a:	604b      	str	r3, [r1, #4]
 800858c:	4630      	mov	r0, r6
 800858e:	f000 f82f 	bl	80085f0 <__malloc_unlock>
 8008592:	f104 000b 	add.w	r0, r4, #11
 8008596:	1d23      	adds	r3, r4, #4
 8008598:	f020 0007 	bic.w	r0, r0, #7
 800859c:	1ac2      	subs	r2, r0, r3
 800859e:	bf1c      	itt	ne
 80085a0:	1a1b      	subne	r3, r3, r0
 80085a2:	50a3      	strne	r3, [r4, r2]
 80085a4:	e7af      	b.n	8008506 <_malloc_r+0x22>
 80085a6:	6862      	ldr	r2, [r4, #4]
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	bf0c      	ite	eq
 80085ac:	f8c8 2000 	streq.w	r2, [r8]
 80085b0:	605a      	strne	r2, [r3, #4]
 80085b2:	e7eb      	b.n	800858c <_malloc_r+0xa8>
 80085b4:	4623      	mov	r3, r4
 80085b6:	6864      	ldr	r4, [r4, #4]
 80085b8:	e7ae      	b.n	8008518 <_malloc_r+0x34>
 80085ba:	463c      	mov	r4, r7
 80085bc:	687f      	ldr	r7, [r7, #4]
 80085be:	e7b6      	b.n	800852e <_malloc_r+0x4a>
 80085c0:	461a      	mov	r2, r3
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	d1fb      	bne.n	80085c0 <_malloc_r+0xdc>
 80085c8:	2300      	movs	r3, #0
 80085ca:	6053      	str	r3, [r2, #4]
 80085cc:	e7de      	b.n	800858c <_malloc_r+0xa8>
 80085ce:	230c      	movs	r3, #12
 80085d0:	4630      	mov	r0, r6
 80085d2:	6033      	str	r3, [r6, #0]
 80085d4:	f000 f80c 	bl	80085f0 <__malloc_unlock>
 80085d8:	e794      	b.n	8008504 <_malloc_r+0x20>
 80085da:	6005      	str	r5, [r0, #0]
 80085dc:	e7d6      	b.n	800858c <_malloc_r+0xa8>
 80085de:	bf00      	nop
 80085e0:	200005fc 	.word	0x200005fc

080085e4 <__malloc_lock>:
 80085e4:	4801      	ldr	r0, [pc, #4]	@ (80085ec <__malloc_lock+0x8>)
 80085e6:	f7ff b8aa 	b.w	800773e <__retarget_lock_acquire_recursive>
 80085ea:	bf00      	nop
 80085ec:	200005f4 	.word	0x200005f4

080085f0 <__malloc_unlock>:
 80085f0:	4801      	ldr	r0, [pc, #4]	@ (80085f8 <__malloc_unlock+0x8>)
 80085f2:	f7ff b8a5 	b.w	8007740 <__retarget_lock_release_recursive>
 80085f6:	bf00      	nop
 80085f8:	200005f4 	.word	0x200005f4

080085fc <_Balloc>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	69c6      	ldr	r6, [r0, #28]
 8008600:	4604      	mov	r4, r0
 8008602:	460d      	mov	r5, r1
 8008604:	b976      	cbnz	r6, 8008624 <_Balloc+0x28>
 8008606:	2010      	movs	r0, #16
 8008608:	f7ff ff42 	bl	8008490 <malloc>
 800860c:	4602      	mov	r2, r0
 800860e:	61e0      	str	r0, [r4, #28]
 8008610:	b920      	cbnz	r0, 800861c <_Balloc+0x20>
 8008612:	216b      	movs	r1, #107	@ 0x6b
 8008614:	4b17      	ldr	r3, [pc, #92]	@ (8008674 <_Balloc+0x78>)
 8008616:	4818      	ldr	r0, [pc, #96]	@ (8008678 <_Balloc+0x7c>)
 8008618:	f000 ff6c 	bl	80094f4 <__assert_func>
 800861c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008620:	6006      	str	r6, [r0, #0]
 8008622:	60c6      	str	r6, [r0, #12]
 8008624:	69e6      	ldr	r6, [r4, #28]
 8008626:	68f3      	ldr	r3, [r6, #12]
 8008628:	b183      	cbz	r3, 800864c <_Balloc+0x50>
 800862a:	69e3      	ldr	r3, [r4, #28]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008632:	b9b8      	cbnz	r0, 8008664 <_Balloc+0x68>
 8008634:	2101      	movs	r1, #1
 8008636:	fa01 f605 	lsl.w	r6, r1, r5
 800863a:	1d72      	adds	r2, r6, #5
 800863c:	4620      	mov	r0, r4
 800863e:	0092      	lsls	r2, r2, #2
 8008640:	f000 ff76 	bl	8009530 <_calloc_r>
 8008644:	b160      	cbz	r0, 8008660 <_Balloc+0x64>
 8008646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800864a:	e00e      	b.n	800866a <_Balloc+0x6e>
 800864c:	2221      	movs	r2, #33	@ 0x21
 800864e:	2104      	movs	r1, #4
 8008650:	4620      	mov	r0, r4
 8008652:	f000 ff6d 	bl	8009530 <_calloc_r>
 8008656:	69e3      	ldr	r3, [r4, #28]
 8008658:	60f0      	str	r0, [r6, #12]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e4      	bne.n	800862a <_Balloc+0x2e>
 8008660:	2000      	movs	r0, #0
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	6802      	ldr	r2, [r0, #0]
 8008666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800866a:	2300      	movs	r3, #0
 800866c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008670:	e7f7      	b.n	8008662 <_Balloc+0x66>
 8008672:	bf00      	nop
 8008674:	0800a7b1 	.word	0x0800a7b1
 8008678:	0800a831 	.word	0x0800a831

0800867c <_Bfree>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	69c6      	ldr	r6, [r0, #28]
 8008680:	4605      	mov	r5, r0
 8008682:	460c      	mov	r4, r1
 8008684:	b976      	cbnz	r6, 80086a4 <_Bfree+0x28>
 8008686:	2010      	movs	r0, #16
 8008688:	f7ff ff02 	bl	8008490 <malloc>
 800868c:	4602      	mov	r2, r0
 800868e:	61e8      	str	r0, [r5, #28]
 8008690:	b920      	cbnz	r0, 800869c <_Bfree+0x20>
 8008692:	218f      	movs	r1, #143	@ 0x8f
 8008694:	4b08      	ldr	r3, [pc, #32]	@ (80086b8 <_Bfree+0x3c>)
 8008696:	4809      	ldr	r0, [pc, #36]	@ (80086bc <_Bfree+0x40>)
 8008698:	f000 ff2c 	bl	80094f4 <__assert_func>
 800869c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a0:	6006      	str	r6, [r0, #0]
 80086a2:	60c6      	str	r6, [r0, #12]
 80086a4:	b13c      	cbz	r4, 80086b6 <_Bfree+0x3a>
 80086a6:	69eb      	ldr	r3, [r5, #28]
 80086a8:	6862      	ldr	r2, [r4, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086b0:	6021      	str	r1, [r4, #0]
 80086b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	0800a7b1 	.word	0x0800a7b1
 80086bc:	0800a831 	.word	0x0800a831

080086c0 <__multadd>:
 80086c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c4:	4607      	mov	r7, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	461e      	mov	r6, r3
 80086ca:	2000      	movs	r0, #0
 80086cc:	690d      	ldr	r5, [r1, #16]
 80086ce:	f101 0c14 	add.w	ip, r1, #20
 80086d2:	f8dc 3000 	ldr.w	r3, [ip]
 80086d6:	3001      	adds	r0, #1
 80086d8:	b299      	uxth	r1, r3
 80086da:	fb02 6101 	mla	r1, r2, r1, r6
 80086de:	0c1e      	lsrs	r6, r3, #16
 80086e0:	0c0b      	lsrs	r3, r1, #16
 80086e2:	fb02 3306 	mla	r3, r2, r6, r3
 80086e6:	b289      	uxth	r1, r1
 80086e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086ec:	4285      	cmp	r5, r0
 80086ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086f2:	f84c 1b04 	str.w	r1, [ip], #4
 80086f6:	dcec      	bgt.n	80086d2 <__multadd+0x12>
 80086f8:	b30e      	cbz	r6, 800873e <__multadd+0x7e>
 80086fa:	68a3      	ldr	r3, [r4, #8]
 80086fc:	42ab      	cmp	r3, r5
 80086fe:	dc19      	bgt.n	8008734 <__multadd+0x74>
 8008700:	6861      	ldr	r1, [r4, #4]
 8008702:	4638      	mov	r0, r7
 8008704:	3101      	adds	r1, #1
 8008706:	f7ff ff79 	bl	80085fc <_Balloc>
 800870a:	4680      	mov	r8, r0
 800870c:	b928      	cbnz	r0, 800871a <__multadd+0x5a>
 800870e:	4602      	mov	r2, r0
 8008710:	21ba      	movs	r1, #186	@ 0xba
 8008712:	4b0c      	ldr	r3, [pc, #48]	@ (8008744 <__multadd+0x84>)
 8008714:	480c      	ldr	r0, [pc, #48]	@ (8008748 <__multadd+0x88>)
 8008716:	f000 feed 	bl	80094f4 <__assert_func>
 800871a:	6922      	ldr	r2, [r4, #16]
 800871c:	f104 010c 	add.w	r1, r4, #12
 8008720:	3202      	adds	r2, #2
 8008722:	0092      	lsls	r2, r2, #2
 8008724:	300c      	adds	r0, #12
 8008726:	f000 fed7 	bl	80094d8 <memcpy>
 800872a:	4621      	mov	r1, r4
 800872c:	4638      	mov	r0, r7
 800872e:	f7ff ffa5 	bl	800867c <_Bfree>
 8008732:	4644      	mov	r4, r8
 8008734:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008738:	3501      	adds	r5, #1
 800873a:	615e      	str	r6, [r3, #20]
 800873c:	6125      	str	r5, [r4, #16]
 800873e:	4620      	mov	r0, r4
 8008740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008744:	0800a820 	.word	0x0800a820
 8008748:	0800a831 	.word	0x0800a831

0800874c <__hi0bits>:
 800874c:	4603      	mov	r3, r0
 800874e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008752:	bf3a      	itte	cc
 8008754:	0403      	lslcc	r3, r0, #16
 8008756:	2010      	movcc	r0, #16
 8008758:	2000      	movcs	r0, #0
 800875a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800875e:	bf3c      	itt	cc
 8008760:	021b      	lslcc	r3, r3, #8
 8008762:	3008      	addcc	r0, #8
 8008764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008768:	bf3c      	itt	cc
 800876a:	011b      	lslcc	r3, r3, #4
 800876c:	3004      	addcc	r0, #4
 800876e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008772:	bf3c      	itt	cc
 8008774:	009b      	lslcc	r3, r3, #2
 8008776:	3002      	addcc	r0, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	db05      	blt.n	8008788 <__hi0bits+0x3c>
 800877c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008780:	f100 0001 	add.w	r0, r0, #1
 8008784:	bf08      	it	eq
 8008786:	2020      	moveq	r0, #32
 8008788:	4770      	bx	lr

0800878a <__lo0bits>:
 800878a:	6803      	ldr	r3, [r0, #0]
 800878c:	4602      	mov	r2, r0
 800878e:	f013 0007 	ands.w	r0, r3, #7
 8008792:	d00b      	beq.n	80087ac <__lo0bits+0x22>
 8008794:	07d9      	lsls	r1, r3, #31
 8008796:	d421      	bmi.n	80087dc <__lo0bits+0x52>
 8008798:	0798      	lsls	r0, r3, #30
 800879a:	bf49      	itett	mi
 800879c:	085b      	lsrmi	r3, r3, #1
 800879e:	089b      	lsrpl	r3, r3, #2
 80087a0:	2001      	movmi	r0, #1
 80087a2:	6013      	strmi	r3, [r2, #0]
 80087a4:	bf5c      	itt	pl
 80087a6:	2002      	movpl	r0, #2
 80087a8:	6013      	strpl	r3, [r2, #0]
 80087aa:	4770      	bx	lr
 80087ac:	b299      	uxth	r1, r3
 80087ae:	b909      	cbnz	r1, 80087b4 <__lo0bits+0x2a>
 80087b0:	2010      	movs	r0, #16
 80087b2:	0c1b      	lsrs	r3, r3, #16
 80087b4:	b2d9      	uxtb	r1, r3
 80087b6:	b909      	cbnz	r1, 80087bc <__lo0bits+0x32>
 80087b8:	3008      	adds	r0, #8
 80087ba:	0a1b      	lsrs	r3, r3, #8
 80087bc:	0719      	lsls	r1, r3, #28
 80087be:	bf04      	itt	eq
 80087c0:	091b      	lsreq	r3, r3, #4
 80087c2:	3004      	addeq	r0, #4
 80087c4:	0799      	lsls	r1, r3, #30
 80087c6:	bf04      	itt	eq
 80087c8:	089b      	lsreq	r3, r3, #2
 80087ca:	3002      	addeq	r0, #2
 80087cc:	07d9      	lsls	r1, r3, #31
 80087ce:	d403      	bmi.n	80087d8 <__lo0bits+0x4e>
 80087d0:	085b      	lsrs	r3, r3, #1
 80087d2:	f100 0001 	add.w	r0, r0, #1
 80087d6:	d003      	beq.n	80087e0 <__lo0bits+0x56>
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	4770      	bx	lr
 80087dc:	2000      	movs	r0, #0
 80087de:	4770      	bx	lr
 80087e0:	2020      	movs	r0, #32
 80087e2:	4770      	bx	lr

080087e4 <__i2b>:
 80087e4:	b510      	push	{r4, lr}
 80087e6:	460c      	mov	r4, r1
 80087e8:	2101      	movs	r1, #1
 80087ea:	f7ff ff07 	bl	80085fc <_Balloc>
 80087ee:	4602      	mov	r2, r0
 80087f0:	b928      	cbnz	r0, 80087fe <__i2b+0x1a>
 80087f2:	f240 1145 	movw	r1, #325	@ 0x145
 80087f6:	4b04      	ldr	r3, [pc, #16]	@ (8008808 <__i2b+0x24>)
 80087f8:	4804      	ldr	r0, [pc, #16]	@ (800880c <__i2b+0x28>)
 80087fa:	f000 fe7b 	bl	80094f4 <__assert_func>
 80087fe:	2301      	movs	r3, #1
 8008800:	6144      	str	r4, [r0, #20]
 8008802:	6103      	str	r3, [r0, #16]
 8008804:	bd10      	pop	{r4, pc}
 8008806:	bf00      	nop
 8008808:	0800a820 	.word	0x0800a820
 800880c:	0800a831 	.word	0x0800a831

08008810 <__multiply>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	4614      	mov	r4, r2
 8008816:	690a      	ldr	r2, [r1, #16]
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	460f      	mov	r7, r1
 800881c:	429a      	cmp	r2, r3
 800881e:	bfa2      	ittt	ge
 8008820:	4623      	movge	r3, r4
 8008822:	460c      	movge	r4, r1
 8008824:	461f      	movge	r7, r3
 8008826:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800882a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800882e:	68a3      	ldr	r3, [r4, #8]
 8008830:	6861      	ldr	r1, [r4, #4]
 8008832:	eb0a 0609 	add.w	r6, sl, r9
 8008836:	42b3      	cmp	r3, r6
 8008838:	b085      	sub	sp, #20
 800883a:	bfb8      	it	lt
 800883c:	3101      	addlt	r1, #1
 800883e:	f7ff fedd 	bl	80085fc <_Balloc>
 8008842:	b930      	cbnz	r0, 8008852 <__multiply+0x42>
 8008844:	4602      	mov	r2, r0
 8008846:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800884a:	4b43      	ldr	r3, [pc, #268]	@ (8008958 <__multiply+0x148>)
 800884c:	4843      	ldr	r0, [pc, #268]	@ (800895c <__multiply+0x14c>)
 800884e:	f000 fe51 	bl	80094f4 <__assert_func>
 8008852:	f100 0514 	add.w	r5, r0, #20
 8008856:	462b      	mov	r3, r5
 8008858:	2200      	movs	r2, #0
 800885a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800885e:	4543      	cmp	r3, r8
 8008860:	d321      	bcc.n	80088a6 <__multiply+0x96>
 8008862:	f107 0114 	add.w	r1, r7, #20
 8008866:	f104 0214 	add.w	r2, r4, #20
 800886a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800886e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008872:	9302      	str	r3, [sp, #8]
 8008874:	1b13      	subs	r3, r2, r4
 8008876:	3b15      	subs	r3, #21
 8008878:	f023 0303 	bic.w	r3, r3, #3
 800887c:	3304      	adds	r3, #4
 800887e:	f104 0715 	add.w	r7, r4, #21
 8008882:	42ba      	cmp	r2, r7
 8008884:	bf38      	it	cc
 8008886:	2304      	movcc	r3, #4
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	9b02      	ldr	r3, [sp, #8]
 800888c:	9103      	str	r1, [sp, #12]
 800888e:	428b      	cmp	r3, r1
 8008890:	d80c      	bhi.n	80088ac <__multiply+0x9c>
 8008892:	2e00      	cmp	r6, #0
 8008894:	dd03      	ble.n	800889e <__multiply+0x8e>
 8008896:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800889a:	2b00      	cmp	r3, #0
 800889c:	d05a      	beq.n	8008954 <__multiply+0x144>
 800889e:	6106      	str	r6, [r0, #16]
 80088a0:	b005      	add	sp, #20
 80088a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a6:	f843 2b04 	str.w	r2, [r3], #4
 80088aa:	e7d8      	b.n	800885e <__multiply+0x4e>
 80088ac:	f8b1 a000 	ldrh.w	sl, [r1]
 80088b0:	f1ba 0f00 	cmp.w	sl, #0
 80088b4:	d023      	beq.n	80088fe <__multiply+0xee>
 80088b6:	46a9      	mov	r9, r5
 80088b8:	f04f 0c00 	mov.w	ip, #0
 80088bc:	f104 0e14 	add.w	lr, r4, #20
 80088c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088c4:	f8d9 3000 	ldr.w	r3, [r9]
 80088c8:	fa1f fb87 	uxth.w	fp, r7
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	fb0a 330b 	mla	r3, sl, fp, r3
 80088d2:	4463      	add	r3, ip
 80088d4:	f8d9 c000 	ldr.w	ip, [r9]
 80088d8:	0c3f      	lsrs	r7, r7, #16
 80088da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80088de:	fb0a c707 	mla	r7, sl, r7, ip
 80088e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088ec:	4572      	cmp	r2, lr
 80088ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088f2:	f849 3b04 	str.w	r3, [r9], #4
 80088f6:	d8e3      	bhi.n	80088c0 <__multiply+0xb0>
 80088f8:	9b01      	ldr	r3, [sp, #4]
 80088fa:	f845 c003 	str.w	ip, [r5, r3]
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	3104      	adds	r1, #4
 8008902:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008906:	f1b9 0f00 	cmp.w	r9, #0
 800890a:	d021      	beq.n	8008950 <__multiply+0x140>
 800890c:	46ae      	mov	lr, r5
 800890e:	f04f 0a00 	mov.w	sl, #0
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	f104 0c14 	add.w	ip, r4, #20
 8008918:	f8bc b000 	ldrh.w	fp, [ip]
 800891c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008920:	b29b      	uxth	r3, r3
 8008922:	fb09 770b 	mla	r7, r9, fp, r7
 8008926:	4457      	add	r7, sl
 8008928:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800892c:	f84e 3b04 	str.w	r3, [lr], #4
 8008930:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008934:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008938:	f8be 3000 	ldrh.w	r3, [lr]
 800893c:	4562      	cmp	r2, ip
 800893e:	fb09 330a 	mla	r3, r9, sl, r3
 8008942:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008946:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800894a:	d8e5      	bhi.n	8008918 <__multiply+0x108>
 800894c:	9f01      	ldr	r7, [sp, #4]
 800894e:	51eb      	str	r3, [r5, r7]
 8008950:	3504      	adds	r5, #4
 8008952:	e79a      	b.n	800888a <__multiply+0x7a>
 8008954:	3e01      	subs	r6, #1
 8008956:	e79c      	b.n	8008892 <__multiply+0x82>
 8008958:	0800a820 	.word	0x0800a820
 800895c:	0800a831 	.word	0x0800a831

08008960 <__pow5mult>:
 8008960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008964:	4615      	mov	r5, r2
 8008966:	f012 0203 	ands.w	r2, r2, #3
 800896a:	4607      	mov	r7, r0
 800896c:	460e      	mov	r6, r1
 800896e:	d007      	beq.n	8008980 <__pow5mult+0x20>
 8008970:	4c25      	ldr	r4, [pc, #148]	@ (8008a08 <__pow5mult+0xa8>)
 8008972:	3a01      	subs	r2, #1
 8008974:	2300      	movs	r3, #0
 8008976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800897a:	f7ff fea1 	bl	80086c0 <__multadd>
 800897e:	4606      	mov	r6, r0
 8008980:	10ad      	asrs	r5, r5, #2
 8008982:	d03d      	beq.n	8008a00 <__pow5mult+0xa0>
 8008984:	69fc      	ldr	r4, [r7, #28]
 8008986:	b97c      	cbnz	r4, 80089a8 <__pow5mult+0x48>
 8008988:	2010      	movs	r0, #16
 800898a:	f7ff fd81 	bl	8008490 <malloc>
 800898e:	4602      	mov	r2, r0
 8008990:	61f8      	str	r0, [r7, #28]
 8008992:	b928      	cbnz	r0, 80089a0 <__pow5mult+0x40>
 8008994:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008998:	4b1c      	ldr	r3, [pc, #112]	@ (8008a0c <__pow5mult+0xac>)
 800899a:	481d      	ldr	r0, [pc, #116]	@ (8008a10 <__pow5mult+0xb0>)
 800899c:	f000 fdaa 	bl	80094f4 <__assert_func>
 80089a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089a4:	6004      	str	r4, [r0, #0]
 80089a6:	60c4      	str	r4, [r0, #12]
 80089a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80089ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089b0:	b94c      	cbnz	r4, 80089c6 <__pow5mult+0x66>
 80089b2:	f240 2171 	movw	r1, #625	@ 0x271
 80089b6:	4638      	mov	r0, r7
 80089b8:	f7ff ff14 	bl	80087e4 <__i2b>
 80089bc:	2300      	movs	r3, #0
 80089be:	4604      	mov	r4, r0
 80089c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80089c4:	6003      	str	r3, [r0, #0]
 80089c6:	f04f 0900 	mov.w	r9, #0
 80089ca:	07eb      	lsls	r3, r5, #31
 80089cc:	d50a      	bpl.n	80089e4 <__pow5mult+0x84>
 80089ce:	4631      	mov	r1, r6
 80089d0:	4622      	mov	r2, r4
 80089d2:	4638      	mov	r0, r7
 80089d4:	f7ff ff1c 	bl	8008810 <__multiply>
 80089d8:	4680      	mov	r8, r0
 80089da:	4631      	mov	r1, r6
 80089dc:	4638      	mov	r0, r7
 80089de:	f7ff fe4d 	bl	800867c <_Bfree>
 80089e2:	4646      	mov	r6, r8
 80089e4:	106d      	asrs	r5, r5, #1
 80089e6:	d00b      	beq.n	8008a00 <__pow5mult+0xa0>
 80089e8:	6820      	ldr	r0, [r4, #0]
 80089ea:	b938      	cbnz	r0, 80089fc <__pow5mult+0x9c>
 80089ec:	4622      	mov	r2, r4
 80089ee:	4621      	mov	r1, r4
 80089f0:	4638      	mov	r0, r7
 80089f2:	f7ff ff0d 	bl	8008810 <__multiply>
 80089f6:	6020      	str	r0, [r4, #0]
 80089f8:	f8c0 9000 	str.w	r9, [r0]
 80089fc:	4604      	mov	r4, r0
 80089fe:	e7e4      	b.n	80089ca <__pow5mult+0x6a>
 8008a00:	4630      	mov	r0, r6
 8008a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a06:	bf00      	nop
 8008a08:	0800a88c 	.word	0x0800a88c
 8008a0c:	0800a7b1 	.word	0x0800a7b1
 8008a10:	0800a831 	.word	0x0800a831

08008a14 <__lshift>:
 8008a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	4691      	mov	r9, r2
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	6849      	ldr	r1, [r1, #4]
 8008a22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a26:	68a3      	ldr	r3, [r4, #8]
 8008a28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a2c:	f108 0601 	add.w	r6, r8, #1
 8008a30:	42b3      	cmp	r3, r6
 8008a32:	db0b      	blt.n	8008a4c <__lshift+0x38>
 8008a34:	4638      	mov	r0, r7
 8008a36:	f7ff fde1 	bl	80085fc <_Balloc>
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	b948      	cbnz	r0, 8008a52 <__lshift+0x3e>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a44:	4b27      	ldr	r3, [pc, #156]	@ (8008ae4 <__lshift+0xd0>)
 8008a46:	4828      	ldr	r0, [pc, #160]	@ (8008ae8 <__lshift+0xd4>)
 8008a48:	f000 fd54 	bl	80094f4 <__assert_func>
 8008a4c:	3101      	adds	r1, #1
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	e7ee      	b.n	8008a30 <__lshift+0x1c>
 8008a52:	2300      	movs	r3, #0
 8008a54:	f100 0114 	add.w	r1, r0, #20
 8008a58:	f100 0210 	add.w	r2, r0, #16
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	4553      	cmp	r3, sl
 8008a60:	db33      	blt.n	8008aca <__lshift+0xb6>
 8008a62:	6920      	ldr	r0, [r4, #16]
 8008a64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a68:	f104 0314 	add.w	r3, r4, #20
 8008a6c:	f019 091f 	ands.w	r9, r9, #31
 8008a70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a78:	d02b      	beq.n	8008ad2 <__lshift+0xbe>
 8008a7a:	468a      	mov	sl, r1
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f1c9 0e20 	rsb	lr, r9, #32
 8008a82:	6818      	ldr	r0, [r3, #0]
 8008a84:	fa00 f009 	lsl.w	r0, r0, r9
 8008a88:	4310      	orrs	r0, r2
 8008a8a:	f84a 0b04 	str.w	r0, [sl], #4
 8008a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a92:	459c      	cmp	ip, r3
 8008a94:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a98:	d8f3      	bhi.n	8008a82 <__lshift+0x6e>
 8008a9a:	ebac 0304 	sub.w	r3, ip, r4
 8008a9e:	3b15      	subs	r3, #21
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	f104 0015 	add.w	r0, r4, #21
 8008aaa:	4584      	cmp	ip, r0
 8008aac:	bf38      	it	cc
 8008aae:	2304      	movcc	r3, #4
 8008ab0:	50ca      	str	r2, [r1, r3]
 8008ab2:	b10a      	cbz	r2, 8008ab8 <__lshift+0xa4>
 8008ab4:	f108 0602 	add.w	r6, r8, #2
 8008ab8:	3e01      	subs	r6, #1
 8008aba:	4638      	mov	r0, r7
 8008abc:	4621      	mov	r1, r4
 8008abe:	612e      	str	r6, [r5, #16]
 8008ac0:	f7ff fddc 	bl	800867c <_Bfree>
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aca:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ace:	3301      	adds	r3, #1
 8008ad0:	e7c5      	b.n	8008a5e <__lshift+0x4a>
 8008ad2:	3904      	subs	r1, #4
 8008ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad8:	459c      	cmp	ip, r3
 8008ada:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ade:	d8f9      	bhi.n	8008ad4 <__lshift+0xc0>
 8008ae0:	e7ea      	b.n	8008ab8 <__lshift+0xa4>
 8008ae2:	bf00      	nop
 8008ae4:	0800a820 	.word	0x0800a820
 8008ae8:	0800a831 	.word	0x0800a831

08008aec <__mcmp>:
 8008aec:	4603      	mov	r3, r0
 8008aee:	690a      	ldr	r2, [r1, #16]
 8008af0:	6900      	ldr	r0, [r0, #16]
 8008af2:	b530      	push	{r4, r5, lr}
 8008af4:	1a80      	subs	r0, r0, r2
 8008af6:	d10e      	bne.n	8008b16 <__mcmp+0x2a>
 8008af8:	3314      	adds	r3, #20
 8008afa:	3114      	adds	r1, #20
 8008afc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b0c:	4295      	cmp	r5, r2
 8008b0e:	d003      	beq.n	8008b18 <__mcmp+0x2c>
 8008b10:	d205      	bcs.n	8008b1e <__mcmp+0x32>
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	bd30      	pop	{r4, r5, pc}
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	d3f3      	bcc.n	8008b04 <__mcmp+0x18>
 8008b1c:	e7fb      	b.n	8008b16 <__mcmp+0x2a>
 8008b1e:	2001      	movs	r0, #1
 8008b20:	e7f9      	b.n	8008b16 <__mcmp+0x2a>
	...

08008b24 <__mdiff>:
 8008b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	4689      	mov	r9, r1
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4648      	mov	r0, r9
 8008b30:	4614      	mov	r4, r2
 8008b32:	f7ff ffdb 	bl	8008aec <__mcmp>
 8008b36:	1e05      	subs	r5, r0, #0
 8008b38:	d112      	bne.n	8008b60 <__mdiff+0x3c>
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f7ff fd5d 	bl	80085fc <_Balloc>
 8008b42:	4602      	mov	r2, r0
 8008b44:	b928      	cbnz	r0, 8008b52 <__mdiff+0x2e>
 8008b46:	f240 2137 	movw	r1, #567	@ 0x237
 8008b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8008c44 <__mdiff+0x120>)
 8008b4c:	483e      	ldr	r0, [pc, #248]	@ (8008c48 <__mdiff+0x124>)
 8008b4e:	f000 fcd1 	bl	80094f4 <__assert_func>
 8008b52:	2301      	movs	r3, #1
 8008b54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b58:	4610      	mov	r0, r2
 8008b5a:	b003      	add	sp, #12
 8008b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b60:	bfbc      	itt	lt
 8008b62:	464b      	movlt	r3, r9
 8008b64:	46a1      	movlt	r9, r4
 8008b66:	4630      	mov	r0, r6
 8008b68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b6c:	bfba      	itte	lt
 8008b6e:	461c      	movlt	r4, r3
 8008b70:	2501      	movlt	r5, #1
 8008b72:	2500      	movge	r5, #0
 8008b74:	f7ff fd42 	bl	80085fc <_Balloc>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	b918      	cbnz	r0, 8008b84 <__mdiff+0x60>
 8008b7c:	f240 2145 	movw	r1, #581	@ 0x245
 8008b80:	4b30      	ldr	r3, [pc, #192]	@ (8008c44 <__mdiff+0x120>)
 8008b82:	e7e3      	b.n	8008b4c <__mdiff+0x28>
 8008b84:	f100 0b14 	add.w	fp, r0, #20
 8008b88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b8c:	f109 0310 	add.w	r3, r9, #16
 8008b90:	60c5      	str	r5, [r0, #12]
 8008b92:	f04f 0c00 	mov.w	ip, #0
 8008b96:	f109 0514 	add.w	r5, r9, #20
 8008b9a:	46d9      	mov	r9, fp
 8008b9c:	6926      	ldr	r6, [r4, #16]
 8008b9e:	f104 0e14 	add.w	lr, r4, #20
 8008ba2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ba6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008baa:	9301      	str	r3, [sp, #4]
 8008bac:	9b01      	ldr	r3, [sp, #4]
 8008bae:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008bb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008bb6:	b281      	uxth	r1, r0
 8008bb8:	9301      	str	r3, [sp, #4]
 8008bba:	fa1f f38a 	uxth.w	r3, sl
 8008bbe:	1a5b      	subs	r3, r3, r1
 8008bc0:	0c00      	lsrs	r0, r0, #16
 8008bc2:	4463      	add	r3, ip
 8008bc4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008bc8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bd2:	4576      	cmp	r6, lr
 8008bd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bd8:	f849 3b04 	str.w	r3, [r9], #4
 8008bdc:	d8e6      	bhi.n	8008bac <__mdiff+0x88>
 8008bde:	1b33      	subs	r3, r6, r4
 8008be0:	3b15      	subs	r3, #21
 8008be2:	f023 0303 	bic.w	r3, r3, #3
 8008be6:	3415      	adds	r4, #21
 8008be8:	3304      	adds	r3, #4
 8008bea:	42a6      	cmp	r6, r4
 8008bec:	bf38      	it	cc
 8008bee:	2304      	movcc	r3, #4
 8008bf0:	441d      	add	r5, r3
 8008bf2:	445b      	add	r3, fp
 8008bf4:	461e      	mov	r6, r3
 8008bf6:	462c      	mov	r4, r5
 8008bf8:	4544      	cmp	r4, r8
 8008bfa:	d30e      	bcc.n	8008c1a <__mdiff+0xf6>
 8008bfc:	f108 0103 	add.w	r1, r8, #3
 8008c00:	1b49      	subs	r1, r1, r5
 8008c02:	f021 0103 	bic.w	r1, r1, #3
 8008c06:	3d03      	subs	r5, #3
 8008c08:	45a8      	cmp	r8, r5
 8008c0a:	bf38      	it	cc
 8008c0c:	2100      	movcc	r1, #0
 8008c0e:	440b      	add	r3, r1
 8008c10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c14:	b199      	cbz	r1, 8008c3e <__mdiff+0x11a>
 8008c16:	6117      	str	r7, [r2, #16]
 8008c18:	e79e      	b.n	8008b58 <__mdiff+0x34>
 8008c1a:	46e6      	mov	lr, ip
 8008c1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c20:	fa1f fc81 	uxth.w	ip, r1
 8008c24:	44f4      	add	ip, lr
 8008c26:	0c08      	lsrs	r0, r1, #16
 8008c28:	4471      	add	r1, lr
 8008c2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c2e:	b289      	uxth	r1, r1
 8008c30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c38:	f846 1b04 	str.w	r1, [r6], #4
 8008c3c:	e7dc      	b.n	8008bf8 <__mdiff+0xd4>
 8008c3e:	3f01      	subs	r7, #1
 8008c40:	e7e6      	b.n	8008c10 <__mdiff+0xec>
 8008c42:	bf00      	nop
 8008c44:	0800a820 	.word	0x0800a820
 8008c48:	0800a831 	.word	0x0800a831

08008c4c <__d2b>:
 8008c4c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008c50:	2101      	movs	r1, #1
 8008c52:	4690      	mov	r8, r2
 8008c54:	4699      	mov	r9, r3
 8008c56:	9e08      	ldr	r6, [sp, #32]
 8008c58:	f7ff fcd0 	bl	80085fc <_Balloc>
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	b930      	cbnz	r0, 8008c6e <__d2b+0x22>
 8008c60:	4602      	mov	r2, r0
 8008c62:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c66:	4b23      	ldr	r3, [pc, #140]	@ (8008cf4 <__d2b+0xa8>)
 8008c68:	4823      	ldr	r0, [pc, #140]	@ (8008cf8 <__d2b+0xac>)
 8008c6a:	f000 fc43 	bl	80094f4 <__assert_func>
 8008c6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c76:	b10d      	cbz	r5, 8008c7c <__d2b+0x30>
 8008c78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	f1b8 0300 	subs.w	r3, r8, #0
 8008c82:	d024      	beq.n	8008cce <__d2b+0x82>
 8008c84:	4668      	mov	r0, sp
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	f7ff fd7f 	bl	800878a <__lo0bits>
 8008c8c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c90:	b1d8      	cbz	r0, 8008cca <__d2b+0x7e>
 8008c92:	f1c0 0320 	rsb	r3, r0, #32
 8008c96:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9a:	430b      	orrs	r3, r1
 8008c9c:	40c2      	lsrs	r2, r0
 8008c9e:	6163      	str	r3, [r4, #20]
 8008ca0:	9201      	str	r2, [sp, #4]
 8008ca2:	9b01      	ldr	r3, [sp, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bf0c      	ite	eq
 8008ca8:	2201      	moveq	r2, #1
 8008caa:	2202      	movne	r2, #2
 8008cac:	61a3      	str	r3, [r4, #24]
 8008cae:	6122      	str	r2, [r4, #16]
 8008cb0:	b1ad      	cbz	r5, 8008cde <__d2b+0x92>
 8008cb2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008cb6:	4405      	add	r5, r0
 8008cb8:	6035      	str	r5, [r6, #0]
 8008cba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc0:	6018      	str	r0, [r3, #0]
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	b002      	add	sp, #8
 8008cc6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008cca:	6161      	str	r1, [r4, #20]
 8008ccc:	e7e9      	b.n	8008ca2 <__d2b+0x56>
 8008cce:	a801      	add	r0, sp, #4
 8008cd0:	f7ff fd5b 	bl	800878a <__lo0bits>
 8008cd4:	9b01      	ldr	r3, [sp, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	6163      	str	r3, [r4, #20]
 8008cda:	3020      	adds	r0, #32
 8008cdc:	e7e7      	b.n	8008cae <__d2b+0x62>
 8008cde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ce2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ce6:	6030      	str	r0, [r6, #0]
 8008ce8:	6918      	ldr	r0, [r3, #16]
 8008cea:	f7ff fd2f 	bl	800874c <__hi0bits>
 8008cee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cf2:	e7e4      	b.n	8008cbe <__d2b+0x72>
 8008cf4:	0800a820 	.word	0x0800a820
 8008cf8:	0800a831 	.word	0x0800a831

08008cfc <__ssputs_r>:
 8008cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	461f      	mov	r7, r3
 8008d02:	688e      	ldr	r6, [r1, #8]
 8008d04:	4682      	mov	sl, r0
 8008d06:	42be      	cmp	r6, r7
 8008d08:	460c      	mov	r4, r1
 8008d0a:	4690      	mov	r8, r2
 8008d0c:	680b      	ldr	r3, [r1, #0]
 8008d0e:	d82d      	bhi.n	8008d6c <__ssputs_r+0x70>
 8008d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d18:	d026      	beq.n	8008d68 <__ssputs_r+0x6c>
 8008d1a:	6965      	ldr	r5, [r4, #20]
 8008d1c:	6909      	ldr	r1, [r1, #16]
 8008d1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d22:	eba3 0901 	sub.w	r9, r3, r1
 8008d26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d2a:	1c7b      	adds	r3, r7, #1
 8008d2c:	444b      	add	r3, r9
 8008d2e:	106d      	asrs	r5, r5, #1
 8008d30:	429d      	cmp	r5, r3
 8008d32:	bf38      	it	cc
 8008d34:	461d      	movcc	r5, r3
 8008d36:	0553      	lsls	r3, r2, #21
 8008d38:	d527      	bpl.n	8008d8a <__ssputs_r+0x8e>
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	f7ff fbd2 	bl	80084e4 <_malloc_r>
 8008d40:	4606      	mov	r6, r0
 8008d42:	b360      	cbz	r0, 8008d9e <__ssputs_r+0xa2>
 8008d44:	464a      	mov	r2, r9
 8008d46:	6921      	ldr	r1, [r4, #16]
 8008d48:	f000 fbc6 	bl	80094d8 <memcpy>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	6126      	str	r6, [r4, #16]
 8008d5a:	444e      	add	r6, r9
 8008d5c:	6026      	str	r6, [r4, #0]
 8008d5e:	463e      	mov	r6, r7
 8008d60:	6165      	str	r5, [r4, #20]
 8008d62:	eba5 0509 	sub.w	r5, r5, r9
 8008d66:	60a5      	str	r5, [r4, #8]
 8008d68:	42be      	cmp	r6, r7
 8008d6a:	d900      	bls.n	8008d6e <__ssputs_r+0x72>
 8008d6c:	463e      	mov	r6, r7
 8008d6e:	4632      	mov	r2, r6
 8008d70:	4641      	mov	r1, r8
 8008d72:	6820      	ldr	r0, [r4, #0]
 8008d74:	f000 fb63 	bl	800943e <memmove>
 8008d78:	2000      	movs	r0, #0
 8008d7a:	68a3      	ldr	r3, [r4, #8]
 8008d7c:	1b9b      	subs	r3, r3, r6
 8008d7e:	60a3      	str	r3, [r4, #8]
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	4433      	add	r3, r6
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	f000 fbf6 	bl	800957c <_realloc_r>
 8008d90:	4606      	mov	r6, r0
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d1e0      	bne.n	8008d58 <__ssputs_r+0x5c>
 8008d96:	4650      	mov	r0, sl
 8008d98:	6921      	ldr	r1, [r4, #16]
 8008d9a:	f7ff fb31 	bl	8008400 <_free_r>
 8008d9e:	230c      	movs	r3, #12
 8008da0:	f8ca 3000 	str.w	r3, [sl]
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	f04f 30ff 	mov.w	r0, #4294967295
 8008daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	e7e9      	b.n	8008d86 <__ssputs_r+0x8a>
	...

08008db4 <_svfiprintf_r>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	4698      	mov	r8, r3
 8008dba:	898b      	ldrh	r3, [r1, #12]
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	061b      	lsls	r3, r3, #24
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	4614      	mov	r4, r2
 8008dc4:	b09d      	sub	sp, #116	@ 0x74
 8008dc6:	d510      	bpl.n	8008dea <_svfiprintf_r+0x36>
 8008dc8:	690b      	ldr	r3, [r1, #16]
 8008dca:	b973      	cbnz	r3, 8008dea <_svfiprintf_r+0x36>
 8008dcc:	2140      	movs	r1, #64	@ 0x40
 8008dce:	f7ff fb89 	bl	80084e4 <_malloc_r>
 8008dd2:	6028      	str	r0, [r5, #0]
 8008dd4:	6128      	str	r0, [r5, #16]
 8008dd6:	b930      	cbnz	r0, 8008de6 <_svfiprintf_r+0x32>
 8008dd8:	230c      	movs	r3, #12
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8008de0:	b01d      	add	sp, #116	@ 0x74
 8008de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de6:	2340      	movs	r3, #64	@ 0x40
 8008de8:	616b      	str	r3, [r5, #20]
 8008dea:	2300      	movs	r3, #0
 8008dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dee:	2320      	movs	r3, #32
 8008df0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008df4:	2330      	movs	r3, #48	@ 0x30
 8008df6:	f04f 0901 	mov.w	r9, #1
 8008dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dfe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008f98 <_svfiprintf_r+0x1e4>
 8008e02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e06:	4623      	mov	r3, r4
 8008e08:	469a      	mov	sl, r3
 8008e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e0e:	b10a      	cbz	r2, 8008e14 <_svfiprintf_r+0x60>
 8008e10:	2a25      	cmp	r2, #37	@ 0x25
 8008e12:	d1f9      	bne.n	8008e08 <_svfiprintf_r+0x54>
 8008e14:	ebba 0b04 	subs.w	fp, sl, r4
 8008e18:	d00b      	beq.n	8008e32 <_svfiprintf_r+0x7e>
 8008e1a:	465b      	mov	r3, fp
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	4629      	mov	r1, r5
 8008e20:	4638      	mov	r0, r7
 8008e22:	f7ff ff6b 	bl	8008cfc <__ssputs_r>
 8008e26:	3001      	adds	r0, #1
 8008e28:	f000 80a7 	beq.w	8008f7a <_svfiprintf_r+0x1c6>
 8008e2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e2e:	445a      	add	r2, fp
 8008e30:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e32:	f89a 3000 	ldrb.w	r3, [sl]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 809f 	beq.w	8008f7a <_svfiprintf_r+0x1c6>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e46:	f10a 0a01 	add.w	sl, sl, #1
 8008e4a:	9304      	str	r3, [sp, #16]
 8008e4c:	9307      	str	r3, [sp, #28]
 8008e4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e52:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e54:	4654      	mov	r4, sl
 8008e56:	2205      	movs	r2, #5
 8008e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5c:	484e      	ldr	r0, [pc, #312]	@ (8008f98 <_svfiprintf_r+0x1e4>)
 8008e5e:	f7fe fc70 	bl	8007742 <memchr>
 8008e62:	9a04      	ldr	r2, [sp, #16]
 8008e64:	b9d8      	cbnz	r0, 8008e9e <_svfiprintf_r+0xea>
 8008e66:	06d0      	lsls	r0, r2, #27
 8008e68:	bf44      	itt	mi
 8008e6a:	2320      	movmi	r3, #32
 8008e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e70:	0711      	lsls	r1, r2, #28
 8008e72:	bf44      	itt	mi
 8008e74:	232b      	movmi	r3, #43	@ 0x2b
 8008e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e80:	d015      	beq.n	8008eae <_svfiprintf_r+0xfa>
 8008e82:	4654      	mov	r4, sl
 8008e84:	2000      	movs	r0, #0
 8008e86:	f04f 0c0a 	mov.w	ip, #10
 8008e8a:	9a07      	ldr	r2, [sp, #28]
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e92:	3b30      	subs	r3, #48	@ 0x30
 8008e94:	2b09      	cmp	r3, #9
 8008e96:	d94b      	bls.n	8008f30 <_svfiprintf_r+0x17c>
 8008e98:	b1b0      	cbz	r0, 8008ec8 <_svfiprintf_r+0x114>
 8008e9a:	9207      	str	r2, [sp, #28]
 8008e9c:	e014      	b.n	8008ec8 <_svfiprintf_r+0x114>
 8008e9e:	eba0 0308 	sub.w	r3, r0, r8
 8008ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	46a2      	mov	sl, r4
 8008eaa:	9304      	str	r3, [sp, #16]
 8008eac:	e7d2      	b.n	8008e54 <_svfiprintf_r+0xa0>
 8008eae:	9b03      	ldr	r3, [sp, #12]
 8008eb0:	1d19      	adds	r1, r3, #4
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	9103      	str	r1, [sp, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	bfbb      	ittet	lt
 8008eba:	425b      	neglt	r3, r3
 8008ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8008ec0:	9307      	strge	r3, [sp, #28]
 8008ec2:	9307      	strlt	r3, [sp, #28]
 8008ec4:	bfb8      	it	lt
 8008ec6:	9204      	strlt	r2, [sp, #16]
 8008ec8:	7823      	ldrb	r3, [r4, #0]
 8008eca:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ecc:	d10a      	bne.n	8008ee4 <_svfiprintf_r+0x130>
 8008ece:	7863      	ldrb	r3, [r4, #1]
 8008ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ed2:	d132      	bne.n	8008f3a <_svfiprintf_r+0x186>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	3402      	adds	r4, #2
 8008ed8:	1d1a      	adds	r2, r3, #4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	9203      	str	r2, [sp, #12]
 8008ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ee2:	9305      	str	r3, [sp, #20]
 8008ee4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008f9c <_svfiprintf_r+0x1e8>
 8008ee8:	2203      	movs	r2, #3
 8008eea:	4650      	mov	r0, sl
 8008eec:	7821      	ldrb	r1, [r4, #0]
 8008eee:	f7fe fc28 	bl	8007742 <memchr>
 8008ef2:	b138      	cbz	r0, 8008f04 <_svfiprintf_r+0x150>
 8008ef4:	2240      	movs	r2, #64	@ 0x40
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	eba0 000a 	sub.w	r0, r0, sl
 8008efc:	4082      	lsls	r2, r0
 8008efe:	4313      	orrs	r3, r2
 8008f00:	3401      	adds	r4, #1
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f08:	2206      	movs	r2, #6
 8008f0a:	4825      	ldr	r0, [pc, #148]	@ (8008fa0 <_svfiprintf_r+0x1ec>)
 8008f0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f10:	f7fe fc17 	bl	8007742 <memchr>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d036      	beq.n	8008f86 <_svfiprintf_r+0x1d2>
 8008f18:	4b22      	ldr	r3, [pc, #136]	@ (8008fa4 <_svfiprintf_r+0x1f0>)
 8008f1a:	bb1b      	cbnz	r3, 8008f64 <_svfiprintf_r+0x1b0>
 8008f1c:	9b03      	ldr	r3, [sp, #12]
 8008f1e:	3307      	adds	r3, #7
 8008f20:	f023 0307 	bic.w	r3, r3, #7
 8008f24:	3308      	adds	r3, #8
 8008f26:	9303      	str	r3, [sp, #12]
 8008f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f2a:	4433      	add	r3, r6
 8008f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f2e:	e76a      	b.n	8008e06 <_svfiprintf_r+0x52>
 8008f30:	460c      	mov	r4, r1
 8008f32:	2001      	movs	r0, #1
 8008f34:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f38:	e7a8      	b.n	8008e8c <_svfiprintf_r+0xd8>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f04f 0c0a 	mov.w	ip, #10
 8008f40:	4619      	mov	r1, r3
 8008f42:	3401      	adds	r4, #1
 8008f44:	9305      	str	r3, [sp, #20]
 8008f46:	4620      	mov	r0, r4
 8008f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f4c:	3a30      	subs	r2, #48	@ 0x30
 8008f4e:	2a09      	cmp	r2, #9
 8008f50:	d903      	bls.n	8008f5a <_svfiprintf_r+0x1a6>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0c6      	beq.n	8008ee4 <_svfiprintf_r+0x130>
 8008f56:	9105      	str	r1, [sp, #20]
 8008f58:	e7c4      	b.n	8008ee4 <_svfiprintf_r+0x130>
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f62:	e7f0      	b.n	8008f46 <_svfiprintf_r+0x192>
 8008f64:	ab03      	add	r3, sp, #12
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	462a      	mov	r2, r5
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa8 <_svfiprintf_r+0x1f4>)
 8008f6e:	a904      	add	r1, sp, #16
 8008f70:	f7fd fd6c 	bl	8006a4c <_printf_float>
 8008f74:	1c42      	adds	r2, r0, #1
 8008f76:	4606      	mov	r6, r0
 8008f78:	d1d6      	bne.n	8008f28 <_svfiprintf_r+0x174>
 8008f7a:	89ab      	ldrh	r3, [r5, #12]
 8008f7c:	065b      	lsls	r3, r3, #25
 8008f7e:	f53f af2d 	bmi.w	8008ddc <_svfiprintf_r+0x28>
 8008f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f84:	e72c      	b.n	8008de0 <_svfiprintf_r+0x2c>
 8008f86:	ab03      	add	r3, sp, #12
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	462a      	mov	r2, r5
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	4b06      	ldr	r3, [pc, #24]	@ (8008fa8 <_svfiprintf_r+0x1f4>)
 8008f90:	a904      	add	r1, sp, #16
 8008f92:	f7fd fff9 	bl	8006f88 <_printf_i>
 8008f96:	e7ed      	b.n	8008f74 <_svfiprintf_r+0x1c0>
 8008f98:	0800a988 	.word	0x0800a988
 8008f9c:	0800a98e 	.word	0x0800a98e
 8008fa0:	0800a992 	.word	0x0800a992
 8008fa4:	08006a4d 	.word	0x08006a4d
 8008fa8:	08008cfd 	.word	0x08008cfd

08008fac <__sfputc_r>:
 8008fac:	6893      	ldr	r3, [r2, #8]
 8008fae:	b410      	push	{r4}
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	6093      	str	r3, [r2, #8]
 8008fb6:	da07      	bge.n	8008fc8 <__sfputc_r+0x1c>
 8008fb8:	6994      	ldr	r4, [r2, #24]
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	db01      	blt.n	8008fc2 <__sfputc_r+0x16>
 8008fbe:	290a      	cmp	r1, #10
 8008fc0:	d102      	bne.n	8008fc8 <__sfputc_r+0x1c>
 8008fc2:	bc10      	pop	{r4}
 8008fc4:	f7fe baa9 	b.w	800751a <__swbuf_r>
 8008fc8:	6813      	ldr	r3, [r2, #0]
 8008fca:	1c58      	adds	r0, r3, #1
 8008fcc:	6010      	str	r0, [r2, #0]
 8008fce:	7019      	strb	r1, [r3, #0]
 8008fd0:	4608      	mov	r0, r1
 8008fd2:	bc10      	pop	{r4}
 8008fd4:	4770      	bx	lr

08008fd6 <__sfputs_r>:
 8008fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd8:	4606      	mov	r6, r0
 8008fda:	460f      	mov	r7, r1
 8008fdc:	4614      	mov	r4, r2
 8008fde:	18d5      	adds	r5, r2, r3
 8008fe0:	42ac      	cmp	r4, r5
 8008fe2:	d101      	bne.n	8008fe8 <__sfputs_r+0x12>
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e007      	b.n	8008ff8 <__sfputs_r+0x22>
 8008fe8:	463a      	mov	r2, r7
 8008fea:	4630      	mov	r0, r6
 8008fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff0:	f7ff ffdc 	bl	8008fac <__sfputc_r>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d1f3      	bne.n	8008fe0 <__sfputs_r+0xa>
 8008ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ffc <_vfiprintf_r>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	460d      	mov	r5, r1
 8009002:	4614      	mov	r4, r2
 8009004:	4698      	mov	r8, r3
 8009006:	4606      	mov	r6, r0
 8009008:	b09d      	sub	sp, #116	@ 0x74
 800900a:	b118      	cbz	r0, 8009014 <_vfiprintf_r+0x18>
 800900c:	6a03      	ldr	r3, [r0, #32]
 800900e:	b90b      	cbnz	r3, 8009014 <_vfiprintf_r+0x18>
 8009010:	f7fe f966 	bl	80072e0 <__sinit>
 8009014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009016:	07d9      	lsls	r1, r3, #31
 8009018:	d405      	bmi.n	8009026 <_vfiprintf_r+0x2a>
 800901a:	89ab      	ldrh	r3, [r5, #12]
 800901c:	059a      	lsls	r2, r3, #22
 800901e:	d402      	bmi.n	8009026 <_vfiprintf_r+0x2a>
 8009020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009022:	f7fe fb8c 	bl	800773e <__retarget_lock_acquire_recursive>
 8009026:	89ab      	ldrh	r3, [r5, #12]
 8009028:	071b      	lsls	r3, r3, #28
 800902a:	d501      	bpl.n	8009030 <_vfiprintf_r+0x34>
 800902c:	692b      	ldr	r3, [r5, #16]
 800902e:	b99b      	cbnz	r3, 8009058 <_vfiprintf_r+0x5c>
 8009030:	4629      	mov	r1, r5
 8009032:	4630      	mov	r0, r6
 8009034:	f7fe fab0 	bl	8007598 <__swsetup_r>
 8009038:	b170      	cbz	r0, 8009058 <_vfiprintf_r+0x5c>
 800903a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800903c:	07dc      	lsls	r4, r3, #31
 800903e:	d504      	bpl.n	800904a <_vfiprintf_r+0x4e>
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	b01d      	add	sp, #116	@ 0x74
 8009046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904a:	89ab      	ldrh	r3, [r5, #12]
 800904c:	0598      	lsls	r0, r3, #22
 800904e:	d4f7      	bmi.n	8009040 <_vfiprintf_r+0x44>
 8009050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009052:	f7fe fb75 	bl	8007740 <__retarget_lock_release_recursive>
 8009056:	e7f3      	b.n	8009040 <_vfiprintf_r+0x44>
 8009058:	2300      	movs	r3, #0
 800905a:	9309      	str	r3, [sp, #36]	@ 0x24
 800905c:	2320      	movs	r3, #32
 800905e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009062:	2330      	movs	r3, #48	@ 0x30
 8009064:	f04f 0901 	mov.w	r9, #1
 8009068:	f8cd 800c 	str.w	r8, [sp, #12]
 800906c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009218 <_vfiprintf_r+0x21c>
 8009070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009074:	4623      	mov	r3, r4
 8009076:	469a      	mov	sl, r3
 8009078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800907c:	b10a      	cbz	r2, 8009082 <_vfiprintf_r+0x86>
 800907e:	2a25      	cmp	r2, #37	@ 0x25
 8009080:	d1f9      	bne.n	8009076 <_vfiprintf_r+0x7a>
 8009082:	ebba 0b04 	subs.w	fp, sl, r4
 8009086:	d00b      	beq.n	80090a0 <_vfiprintf_r+0xa4>
 8009088:	465b      	mov	r3, fp
 800908a:	4622      	mov	r2, r4
 800908c:	4629      	mov	r1, r5
 800908e:	4630      	mov	r0, r6
 8009090:	f7ff ffa1 	bl	8008fd6 <__sfputs_r>
 8009094:	3001      	adds	r0, #1
 8009096:	f000 80a7 	beq.w	80091e8 <_vfiprintf_r+0x1ec>
 800909a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800909c:	445a      	add	r2, fp
 800909e:	9209      	str	r2, [sp, #36]	@ 0x24
 80090a0:	f89a 3000 	ldrb.w	r3, [sl]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 809f 	beq.w	80091e8 <_vfiprintf_r+0x1ec>
 80090aa:	2300      	movs	r3, #0
 80090ac:	f04f 32ff 	mov.w	r2, #4294967295
 80090b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b4:	f10a 0a01 	add.w	sl, sl, #1
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	9307      	str	r3, [sp, #28]
 80090bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80090c2:	4654      	mov	r4, sl
 80090c4:	2205      	movs	r2, #5
 80090c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ca:	4853      	ldr	r0, [pc, #332]	@ (8009218 <_vfiprintf_r+0x21c>)
 80090cc:	f7fe fb39 	bl	8007742 <memchr>
 80090d0:	9a04      	ldr	r2, [sp, #16]
 80090d2:	b9d8      	cbnz	r0, 800910c <_vfiprintf_r+0x110>
 80090d4:	06d1      	lsls	r1, r2, #27
 80090d6:	bf44      	itt	mi
 80090d8:	2320      	movmi	r3, #32
 80090da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090de:	0713      	lsls	r3, r2, #28
 80090e0:	bf44      	itt	mi
 80090e2:	232b      	movmi	r3, #43	@ 0x2b
 80090e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090e8:	f89a 3000 	ldrb.w	r3, [sl]
 80090ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ee:	d015      	beq.n	800911c <_vfiprintf_r+0x120>
 80090f0:	4654      	mov	r4, sl
 80090f2:	2000      	movs	r0, #0
 80090f4:	f04f 0c0a 	mov.w	ip, #10
 80090f8:	9a07      	ldr	r2, [sp, #28]
 80090fa:	4621      	mov	r1, r4
 80090fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009100:	3b30      	subs	r3, #48	@ 0x30
 8009102:	2b09      	cmp	r3, #9
 8009104:	d94b      	bls.n	800919e <_vfiprintf_r+0x1a2>
 8009106:	b1b0      	cbz	r0, 8009136 <_vfiprintf_r+0x13a>
 8009108:	9207      	str	r2, [sp, #28]
 800910a:	e014      	b.n	8009136 <_vfiprintf_r+0x13a>
 800910c:	eba0 0308 	sub.w	r3, r0, r8
 8009110:	fa09 f303 	lsl.w	r3, r9, r3
 8009114:	4313      	orrs	r3, r2
 8009116:	46a2      	mov	sl, r4
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	e7d2      	b.n	80090c2 <_vfiprintf_r+0xc6>
 800911c:	9b03      	ldr	r3, [sp, #12]
 800911e:	1d19      	adds	r1, r3, #4
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	9103      	str	r1, [sp, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	bfbb      	ittet	lt
 8009128:	425b      	neglt	r3, r3
 800912a:	f042 0202 	orrlt.w	r2, r2, #2
 800912e:	9307      	strge	r3, [sp, #28]
 8009130:	9307      	strlt	r3, [sp, #28]
 8009132:	bfb8      	it	lt
 8009134:	9204      	strlt	r2, [sp, #16]
 8009136:	7823      	ldrb	r3, [r4, #0]
 8009138:	2b2e      	cmp	r3, #46	@ 0x2e
 800913a:	d10a      	bne.n	8009152 <_vfiprintf_r+0x156>
 800913c:	7863      	ldrb	r3, [r4, #1]
 800913e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009140:	d132      	bne.n	80091a8 <_vfiprintf_r+0x1ac>
 8009142:	9b03      	ldr	r3, [sp, #12]
 8009144:	3402      	adds	r4, #2
 8009146:	1d1a      	adds	r2, r3, #4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	9203      	str	r2, [sp, #12]
 800914c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009150:	9305      	str	r3, [sp, #20]
 8009152:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800921c <_vfiprintf_r+0x220>
 8009156:	2203      	movs	r2, #3
 8009158:	4650      	mov	r0, sl
 800915a:	7821      	ldrb	r1, [r4, #0]
 800915c:	f7fe faf1 	bl	8007742 <memchr>
 8009160:	b138      	cbz	r0, 8009172 <_vfiprintf_r+0x176>
 8009162:	2240      	movs	r2, #64	@ 0x40
 8009164:	9b04      	ldr	r3, [sp, #16]
 8009166:	eba0 000a 	sub.w	r0, r0, sl
 800916a:	4082      	lsls	r2, r0
 800916c:	4313      	orrs	r3, r2
 800916e:	3401      	adds	r4, #1
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009176:	2206      	movs	r2, #6
 8009178:	4829      	ldr	r0, [pc, #164]	@ (8009220 <_vfiprintf_r+0x224>)
 800917a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800917e:	f7fe fae0 	bl	8007742 <memchr>
 8009182:	2800      	cmp	r0, #0
 8009184:	d03f      	beq.n	8009206 <_vfiprintf_r+0x20a>
 8009186:	4b27      	ldr	r3, [pc, #156]	@ (8009224 <_vfiprintf_r+0x228>)
 8009188:	bb1b      	cbnz	r3, 80091d2 <_vfiprintf_r+0x1d6>
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	3307      	adds	r3, #7
 800918e:	f023 0307 	bic.w	r3, r3, #7
 8009192:	3308      	adds	r3, #8
 8009194:	9303      	str	r3, [sp, #12]
 8009196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009198:	443b      	add	r3, r7
 800919a:	9309      	str	r3, [sp, #36]	@ 0x24
 800919c:	e76a      	b.n	8009074 <_vfiprintf_r+0x78>
 800919e:	460c      	mov	r4, r1
 80091a0:	2001      	movs	r0, #1
 80091a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80091a6:	e7a8      	b.n	80090fa <_vfiprintf_r+0xfe>
 80091a8:	2300      	movs	r3, #0
 80091aa:	f04f 0c0a 	mov.w	ip, #10
 80091ae:	4619      	mov	r1, r3
 80091b0:	3401      	adds	r4, #1
 80091b2:	9305      	str	r3, [sp, #20]
 80091b4:	4620      	mov	r0, r4
 80091b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ba:	3a30      	subs	r2, #48	@ 0x30
 80091bc:	2a09      	cmp	r2, #9
 80091be:	d903      	bls.n	80091c8 <_vfiprintf_r+0x1cc>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0c6      	beq.n	8009152 <_vfiprintf_r+0x156>
 80091c4:	9105      	str	r1, [sp, #20]
 80091c6:	e7c4      	b.n	8009152 <_vfiprintf_r+0x156>
 80091c8:	4604      	mov	r4, r0
 80091ca:	2301      	movs	r3, #1
 80091cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d0:	e7f0      	b.n	80091b4 <_vfiprintf_r+0x1b8>
 80091d2:	ab03      	add	r3, sp, #12
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	462a      	mov	r2, r5
 80091d8:	4630      	mov	r0, r6
 80091da:	4b13      	ldr	r3, [pc, #76]	@ (8009228 <_vfiprintf_r+0x22c>)
 80091dc:	a904      	add	r1, sp, #16
 80091de:	f7fd fc35 	bl	8006a4c <_printf_float>
 80091e2:	4607      	mov	r7, r0
 80091e4:	1c78      	adds	r0, r7, #1
 80091e6:	d1d6      	bne.n	8009196 <_vfiprintf_r+0x19a>
 80091e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ea:	07d9      	lsls	r1, r3, #31
 80091ec:	d405      	bmi.n	80091fa <_vfiprintf_r+0x1fe>
 80091ee:	89ab      	ldrh	r3, [r5, #12]
 80091f0:	059a      	lsls	r2, r3, #22
 80091f2:	d402      	bmi.n	80091fa <_vfiprintf_r+0x1fe>
 80091f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091f6:	f7fe faa3 	bl	8007740 <__retarget_lock_release_recursive>
 80091fa:	89ab      	ldrh	r3, [r5, #12]
 80091fc:	065b      	lsls	r3, r3, #25
 80091fe:	f53f af1f 	bmi.w	8009040 <_vfiprintf_r+0x44>
 8009202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009204:	e71e      	b.n	8009044 <_vfiprintf_r+0x48>
 8009206:	ab03      	add	r3, sp, #12
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	462a      	mov	r2, r5
 800920c:	4630      	mov	r0, r6
 800920e:	4b06      	ldr	r3, [pc, #24]	@ (8009228 <_vfiprintf_r+0x22c>)
 8009210:	a904      	add	r1, sp, #16
 8009212:	f7fd feb9 	bl	8006f88 <_printf_i>
 8009216:	e7e4      	b.n	80091e2 <_vfiprintf_r+0x1e6>
 8009218:	0800a988 	.word	0x0800a988
 800921c:	0800a98e 	.word	0x0800a98e
 8009220:	0800a992 	.word	0x0800a992
 8009224:	08006a4d 	.word	0x08006a4d
 8009228:	08008fd7 	.word	0x08008fd7

0800922c <__sflush_r>:
 800922c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	0716      	lsls	r6, r2, #28
 8009234:	4605      	mov	r5, r0
 8009236:	460c      	mov	r4, r1
 8009238:	d454      	bmi.n	80092e4 <__sflush_r+0xb8>
 800923a:	684b      	ldr	r3, [r1, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	dc02      	bgt.n	8009246 <__sflush_r+0x1a>
 8009240:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009242:	2b00      	cmp	r3, #0
 8009244:	dd48      	ble.n	80092d8 <__sflush_r+0xac>
 8009246:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009248:	2e00      	cmp	r6, #0
 800924a:	d045      	beq.n	80092d8 <__sflush_r+0xac>
 800924c:	2300      	movs	r3, #0
 800924e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009252:	682f      	ldr	r7, [r5, #0]
 8009254:	6a21      	ldr	r1, [r4, #32]
 8009256:	602b      	str	r3, [r5, #0]
 8009258:	d030      	beq.n	80092bc <__sflush_r+0x90>
 800925a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	0759      	lsls	r1, r3, #29
 8009260:	d505      	bpl.n	800926e <__sflush_r+0x42>
 8009262:	6863      	ldr	r3, [r4, #4]
 8009264:	1ad2      	subs	r2, r2, r3
 8009266:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009268:	b10b      	cbz	r3, 800926e <__sflush_r+0x42>
 800926a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800926c:	1ad2      	subs	r2, r2, r3
 800926e:	2300      	movs	r3, #0
 8009270:	4628      	mov	r0, r5
 8009272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009274:	6a21      	ldr	r1, [r4, #32]
 8009276:	47b0      	blx	r6
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	89a3      	ldrh	r3, [r4, #12]
 800927c:	d106      	bne.n	800928c <__sflush_r+0x60>
 800927e:	6829      	ldr	r1, [r5, #0]
 8009280:	291d      	cmp	r1, #29
 8009282:	d82b      	bhi.n	80092dc <__sflush_r+0xb0>
 8009284:	4a28      	ldr	r2, [pc, #160]	@ (8009328 <__sflush_r+0xfc>)
 8009286:	410a      	asrs	r2, r1
 8009288:	07d6      	lsls	r6, r2, #31
 800928a:	d427      	bmi.n	80092dc <__sflush_r+0xb0>
 800928c:	2200      	movs	r2, #0
 800928e:	6062      	str	r2, [r4, #4]
 8009290:	6922      	ldr	r2, [r4, #16]
 8009292:	04d9      	lsls	r1, r3, #19
 8009294:	6022      	str	r2, [r4, #0]
 8009296:	d504      	bpl.n	80092a2 <__sflush_r+0x76>
 8009298:	1c42      	adds	r2, r0, #1
 800929a:	d101      	bne.n	80092a0 <__sflush_r+0x74>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	b903      	cbnz	r3, 80092a2 <__sflush_r+0x76>
 80092a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80092a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092a4:	602f      	str	r7, [r5, #0]
 80092a6:	b1b9      	cbz	r1, 80092d8 <__sflush_r+0xac>
 80092a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092ac:	4299      	cmp	r1, r3
 80092ae:	d002      	beq.n	80092b6 <__sflush_r+0x8a>
 80092b0:	4628      	mov	r0, r5
 80092b2:	f7ff f8a5 	bl	8008400 <_free_r>
 80092b6:	2300      	movs	r3, #0
 80092b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80092ba:	e00d      	b.n	80092d8 <__sflush_r+0xac>
 80092bc:	2301      	movs	r3, #1
 80092be:	4628      	mov	r0, r5
 80092c0:	47b0      	blx	r6
 80092c2:	4602      	mov	r2, r0
 80092c4:	1c50      	adds	r0, r2, #1
 80092c6:	d1c9      	bne.n	800925c <__sflush_r+0x30>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0c6      	beq.n	800925c <__sflush_r+0x30>
 80092ce:	2b1d      	cmp	r3, #29
 80092d0:	d001      	beq.n	80092d6 <__sflush_r+0xaa>
 80092d2:	2b16      	cmp	r3, #22
 80092d4:	d11d      	bne.n	8009312 <__sflush_r+0xe6>
 80092d6:	602f      	str	r7, [r5, #0]
 80092d8:	2000      	movs	r0, #0
 80092da:	e021      	b.n	8009320 <__sflush_r+0xf4>
 80092dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092e0:	b21b      	sxth	r3, r3
 80092e2:	e01a      	b.n	800931a <__sflush_r+0xee>
 80092e4:	690f      	ldr	r7, [r1, #16]
 80092e6:	2f00      	cmp	r7, #0
 80092e8:	d0f6      	beq.n	80092d8 <__sflush_r+0xac>
 80092ea:	0793      	lsls	r3, r2, #30
 80092ec:	bf18      	it	ne
 80092ee:	2300      	movne	r3, #0
 80092f0:	680e      	ldr	r6, [r1, #0]
 80092f2:	bf08      	it	eq
 80092f4:	694b      	ldreq	r3, [r1, #20]
 80092f6:	1bf6      	subs	r6, r6, r7
 80092f8:	600f      	str	r7, [r1, #0]
 80092fa:	608b      	str	r3, [r1, #8]
 80092fc:	2e00      	cmp	r6, #0
 80092fe:	ddeb      	ble.n	80092d8 <__sflush_r+0xac>
 8009300:	4633      	mov	r3, r6
 8009302:	463a      	mov	r2, r7
 8009304:	4628      	mov	r0, r5
 8009306:	6a21      	ldr	r1, [r4, #32]
 8009308:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800930c:	47e0      	blx	ip
 800930e:	2800      	cmp	r0, #0
 8009310:	dc07      	bgt.n	8009322 <__sflush_r+0xf6>
 8009312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800931a:	f04f 30ff 	mov.w	r0, #4294967295
 800931e:	81a3      	strh	r3, [r4, #12]
 8009320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009322:	4407      	add	r7, r0
 8009324:	1a36      	subs	r6, r6, r0
 8009326:	e7e9      	b.n	80092fc <__sflush_r+0xd0>
 8009328:	dfbffffe 	.word	0xdfbffffe

0800932c <_fflush_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	690b      	ldr	r3, [r1, #16]
 8009330:	4605      	mov	r5, r0
 8009332:	460c      	mov	r4, r1
 8009334:	b913      	cbnz	r3, 800933c <_fflush_r+0x10>
 8009336:	2500      	movs	r5, #0
 8009338:	4628      	mov	r0, r5
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	b118      	cbz	r0, 8009346 <_fflush_r+0x1a>
 800933e:	6a03      	ldr	r3, [r0, #32]
 8009340:	b90b      	cbnz	r3, 8009346 <_fflush_r+0x1a>
 8009342:	f7fd ffcd 	bl	80072e0 <__sinit>
 8009346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0f3      	beq.n	8009336 <_fflush_r+0xa>
 800934e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009350:	07d0      	lsls	r0, r2, #31
 8009352:	d404      	bmi.n	800935e <_fflush_r+0x32>
 8009354:	0599      	lsls	r1, r3, #22
 8009356:	d402      	bmi.n	800935e <_fflush_r+0x32>
 8009358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800935a:	f7fe f9f0 	bl	800773e <__retarget_lock_acquire_recursive>
 800935e:	4628      	mov	r0, r5
 8009360:	4621      	mov	r1, r4
 8009362:	f7ff ff63 	bl	800922c <__sflush_r>
 8009366:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009368:	4605      	mov	r5, r0
 800936a:	07da      	lsls	r2, r3, #31
 800936c:	d4e4      	bmi.n	8009338 <_fflush_r+0xc>
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	059b      	lsls	r3, r3, #22
 8009372:	d4e1      	bmi.n	8009338 <_fflush_r+0xc>
 8009374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009376:	f7fe f9e3 	bl	8007740 <__retarget_lock_release_recursive>
 800937a:	e7dd      	b.n	8009338 <_fflush_r+0xc>

0800937c <__swhatbuf_r>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	460c      	mov	r4, r1
 8009380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009384:	4615      	mov	r5, r2
 8009386:	2900      	cmp	r1, #0
 8009388:	461e      	mov	r6, r3
 800938a:	b096      	sub	sp, #88	@ 0x58
 800938c:	da0c      	bge.n	80093a8 <__swhatbuf_r+0x2c>
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	2100      	movs	r1, #0
 8009392:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009396:	bf14      	ite	ne
 8009398:	2340      	movne	r3, #64	@ 0x40
 800939a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800939e:	2000      	movs	r0, #0
 80093a0:	6031      	str	r1, [r6, #0]
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	b016      	add	sp, #88	@ 0x58
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
 80093a8:	466a      	mov	r2, sp
 80093aa:	f000 f863 	bl	8009474 <_fstat_r>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	dbed      	blt.n	800938e <__swhatbuf_r+0x12>
 80093b2:	9901      	ldr	r1, [sp, #4]
 80093b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093bc:	4259      	negs	r1, r3
 80093be:	4159      	adcs	r1, r3
 80093c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093c4:	e7eb      	b.n	800939e <__swhatbuf_r+0x22>

080093c6 <__smakebuf_r>:
 80093c6:	898b      	ldrh	r3, [r1, #12]
 80093c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ca:	079d      	lsls	r5, r3, #30
 80093cc:	4606      	mov	r6, r0
 80093ce:	460c      	mov	r4, r1
 80093d0:	d507      	bpl.n	80093e2 <__smakebuf_r+0x1c>
 80093d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80093d6:	6023      	str	r3, [r4, #0]
 80093d8:	6123      	str	r3, [r4, #16]
 80093da:	2301      	movs	r3, #1
 80093dc:	6163      	str	r3, [r4, #20]
 80093de:	b003      	add	sp, #12
 80093e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e2:	466a      	mov	r2, sp
 80093e4:	ab01      	add	r3, sp, #4
 80093e6:	f7ff ffc9 	bl	800937c <__swhatbuf_r>
 80093ea:	9f00      	ldr	r7, [sp, #0]
 80093ec:	4605      	mov	r5, r0
 80093ee:	4639      	mov	r1, r7
 80093f0:	4630      	mov	r0, r6
 80093f2:	f7ff f877 	bl	80084e4 <_malloc_r>
 80093f6:	b948      	cbnz	r0, 800940c <__smakebuf_r+0x46>
 80093f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093fc:	059a      	lsls	r2, r3, #22
 80093fe:	d4ee      	bmi.n	80093de <__smakebuf_r+0x18>
 8009400:	f023 0303 	bic.w	r3, r3, #3
 8009404:	f043 0302 	orr.w	r3, r3, #2
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	e7e2      	b.n	80093d2 <__smakebuf_r+0xc>
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009416:	81a3      	strh	r3, [r4, #12]
 8009418:	9b01      	ldr	r3, [sp, #4]
 800941a:	6020      	str	r0, [r4, #0]
 800941c:	b15b      	cbz	r3, 8009436 <__smakebuf_r+0x70>
 800941e:	4630      	mov	r0, r6
 8009420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009424:	f000 f838 	bl	8009498 <_isatty_r>
 8009428:	b128      	cbz	r0, 8009436 <__smakebuf_r+0x70>
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	f023 0303 	bic.w	r3, r3, #3
 8009430:	f043 0301 	orr.w	r3, r3, #1
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	431d      	orrs	r5, r3
 800943a:	81a5      	strh	r5, [r4, #12]
 800943c:	e7cf      	b.n	80093de <__smakebuf_r+0x18>

0800943e <memmove>:
 800943e:	4288      	cmp	r0, r1
 8009440:	b510      	push	{r4, lr}
 8009442:	eb01 0402 	add.w	r4, r1, r2
 8009446:	d902      	bls.n	800944e <memmove+0x10>
 8009448:	4284      	cmp	r4, r0
 800944a:	4623      	mov	r3, r4
 800944c:	d807      	bhi.n	800945e <memmove+0x20>
 800944e:	1e43      	subs	r3, r0, #1
 8009450:	42a1      	cmp	r1, r4
 8009452:	d008      	beq.n	8009466 <memmove+0x28>
 8009454:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009458:	f803 2f01 	strb.w	r2, [r3, #1]!
 800945c:	e7f8      	b.n	8009450 <memmove+0x12>
 800945e:	4601      	mov	r1, r0
 8009460:	4402      	add	r2, r0
 8009462:	428a      	cmp	r2, r1
 8009464:	d100      	bne.n	8009468 <memmove+0x2a>
 8009466:	bd10      	pop	{r4, pc}
 8009468:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800946c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009470:	e7f7      	b.n	8009462 <memmove+0x24>
	...

08009474 <_fstat_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	2300      	movs	r3, #0
 8009478:	4d06      	ldr	r5, [pc, #24]	@ (8009494 <_fstat_r+0x20>)
 800947a:	4604      	mov	r4, r0
 800947c:	4608      	mov	r0, r1
 800947e:	4611      	mov	r1, r2
 8009480:	602b      	str	r3, [r5, #0]
 8009482:	f7fb f871 	bl	8004568 <_fstat>
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	d102      	bne.n	8009490 <_fstat_r+0x1c>
 800948a:	682b      	ldr	r3, [r5, #0]
 800948c:	b103      	cbz	r3, 8009490 <_fstat_r+0x1c>
 800948e:	6023      	str	r3, [r4, #0]
 8009490:	bd38      	pop	{r3, r4, r5, pc}
 8009492:	bf00      	nop
 8009494:	200005f0 	.word	0x200005f0

08009498 <_isatty_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	2300      	movs	r3, #0
 800949c:	4d05      	ldr	r5, [pc, #20]	@ (80094b4 <_isatty_r+0x1c>)
 800949e:	4604      	mov	r4, r0
 80094a0:	4608      	mov	r0, r1
 80094a2:	602b      	str	r3, [r5, #0]
 80094a4:	f7fb f86f 	bl	8004586 <_isatty>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d102      	bne.n	80094b2 <_isatty_r+0x1a>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	b103      	cbz	r3, 80094b2 <_isatty_r+0x1a>
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	200005f0 	.word	0x200005f0

080094b8 <_sbrk_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	2300      	movs	r3, #0
 80094bc:	4d05      	ldr	r5, [pc, #20]	@ (80094d4 <_sbrk_r+0x1c>)
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	f7fb f876 	bl	80045b4 <_sbrk>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_sbrk_r+0x1a>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_sbrk_r+0x1a>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	200005f0 	.word	0x200005f0

080094d8 <memcpy>:
 80094d8:	440a      	add	r2, r1
 80094da:	4291      	cmp	r1, r2
 80094dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80094e0:	d100      	bne.n	80094e4 <memcpy+0xc>
 80094e2:	4770      	bx	lr
 80094e4:	b510      	push	{r4, lr}
 80094e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ea:	4291      	cmp	r1, r2
 80094ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f0:	d1f9      	bne.n	80094e6 <memcpy+0xe>
 80094f2:	bd10      	pop	{r4, pc}

080094f4 <__assert_func>:
 80094f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094f6:	4614      	mov	r4, r2
 80094f8:	461a      	mov	r2, r3
 80094fa:	4b09      	ldr	r3, [pc, #36]	@ (8009520 <__assert_func+0x2c>)
 80094fc:	4605      	mov	r5, r0
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68d8      	ldr	r0, [r3, #12]
 8009502:	b954      	cbnz	r4, 800951a <__assert_func+0x26>
 8009504:	4b07      	ldr	r3, [pc, #28]	@ (8009524 <__assert_func+0x30>)
 8009506:	461c      	mov	r4, r3
 8009508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800950c:	9100      	str	r1, [sp, #0]
 800950e:	462b      	mov	r3, r5
 8009510:	4905      	ldr	r1, [pc, #20]	@ (8009528 <__assert_func+0x34>)
 8009512:	f000 f86f 	bl	80095f4 <fiprintf>
 8009516:	f000 f87f 	bl	8009618 <abort>
 800951a:	4b04      	ldr	r3, [pc, #16]	@ (800952c <__assert_func+0x38>)
 800951c:	e7f4      	b.n	8009508 <__assert_func+0x14>
 800951e:	bf00      	nop
 8009520:	20000020 	.word	0x20000020
 8009524:	0800a9de 	.word	0x0800a9de
 8009528:	0800a9b0 	.word	0x0800a9b0
 800952c:	0800a9a3 	.word	0x0800a9a3

08009530 <_calloc_r>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	fba1 5402 	umull	r5, r4, r1, r2
 8009536:	b93c      	cbnz	r4, 8009548 <_calloc_r+0x18>
 8009538:	4629      	mov	r1, r5
 800953a:	f7fe ffd3 	bl	80084e4 <_malloc_r>
 800953e:	4606      	mov	r6, r0
 8009540:	b928      	cbnz	r0, 800954e <_calloc_r+0x1e>
 8009542:	2600      	movs	r6, #0
 8009544:	4630      	mov	r0, r6
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	220c      	movs	r2, #12
 800954a:	6002      	str	r2, [r0, #0]
 800954c:	e7f9      	b.n	8009542 <_calloc_r+0x12>
 800954e:	462a      	mov	r2, r5
 8009550:	4621      	mov	r1, r4
 8009552:	f7fe f877 	bl	8007644 <memset>
 8009556:	e7f5      	b.n	8009544 <_calloc_r+0x14>

08009558 <__ascii_mbtowc>:
 8009558:	b082      	sub	sp, #8
 800955a:	b901      	cbnz	r1, 800955e <__ascii_mbtowc+0x6>
 800955c:	a901      	add	r1, sp, #4
 800955e:	b142      	cbz	r2, 8009572 <__ascii_mbtowc+0x1a>
 8009560:	b14b      	cbz	r3, 8009576 <__ascii_mbtowc+0x1e>
 8009562:	7813      	ldrb	r3, [r2, #0]
 8009564:	600b      	str	r3, [r1, #0]
 8009566:	7812      	ldrb	r2, [r2, #0]
 8009568:	1e10      	subs	r0, r2, #0
 800956a:	bf18      	it	ne
 800956c:	2001      	movne	r0, #1
 800956e:	b002      	add	sp, #8
 8009570:	4770      	bx	lr
 8009572:	4610      	mov	r0, r2
 8009574:	e7fb      	b.n	800956e <__ascii_mbtowc+0x16>
 8009576:	f06f 0001 	mvn.w	r0, #1
 800957a:	e7f8      	b.n	800956e <__ascii_mbtowc+0x16>

0800957c <_realloc_r>:
 800957c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009580:	4680      	mov	r8, r0
 8009582:	4615      	mov	r5, r2
 8009584:	460c      	mov	r4, r1
 8009586:	b921      	cbnz	r1, 8009592 <_realloc_r+0x16>
 8009588:	4611      	mov	r1, r2
 800958a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800958e:	f7fe bfa9 	b.w	80084e4 <_malloc_r>
 8009592:	b92a      	cbnz	r2, 80095a0 <_realloc_r+0x24>
 8009594:	f7fe ff34 	bl	8008400 <_free_r>
 8009598:	2400      	movs	r4, #0
 800959a:	4620      	mov	r0, r4
 800959c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a0:	f000 f841 	bl	8009626 <_malloc_usable_size_r>
 80095a4:	4285      	cmp	r5, r0
 80095a6:	4606      	mov	r6, r0
 80095a8:	d802      	bhi.n	80095b0 <_realloc_r+0x34>
 80095aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80095ae:	d8f4      	bhi.n	800959a <_realloc_r+0x1e>
 80095b0:	4629      	mov	r1, r5
 80095b2:	4640      	mov	r0, r8
 80095b4:	f7fe ff96 	bl	80084e4 <_malloc_r>
 80095b8:	4607      	mov	r7, r0
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d0ec      	beq.n	8009598 <_realloc_r+0x1c>
 80095be:	42b5      	cmp	r5, r6
 80095c0:	462a      	mov	r2, r5
 80095c2:	4621      	mov	r1, r4
 80095c4:	bf28      	it	cs
 80095c6:	4632      	movcs	r2, r6
 80095c8:	f7ff ff86 	bl	80094d8 <memcpy>
 80095cc:	4621      	mov	r1, r4
 80095ce:	4640      	mov	r0, r8
 80095d0:	f7fe ff16 	bl	8008400 <_free_r>
 80095d4:	463c      	mov	r4, r7
 80095d6:	e7e0      	b.n	800959a <_realloc_r+0x1e>

080095d8 <__ascii_wctomb>:
 80095d8:	4603      	mov	r3, r0
 80095da:	4608      	mov	r0, r1
 80095dc:	b141      	cbz	r1, 80095f0 <__ascii_wctomb+0x18>
 80095de:	2aff      	cmp	r2, #255	@ 0xff
 80095e0:	d904      	bls.n	80095ec <__ascii_wctomb+0x14>
 80095e2:	228a      	movs	r2, #138	@ 0x8a
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	4770      	bx	lr
 80095ec:	2001      	movs	r0, #1
 80095ee:	700a      	strb	r2, [r1, #0]
 80095f0:	4770      	bx	lr
	...

080095f4 <fiprintf>:
 80095f4:	b40e      	push	{r1, r2, r3}
 80095f6:	b503      	push	{r0, r1, lr}
 80095f8:	4601      	mov	r1, r0
 80095fa:	ab03      	add	r3, sp, #12
 80095fc:	4805      	ldr	r0, [pc, #20]	@ (8009614 <fiprintf+0x20>)
 80095fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009602:	6800      	ldr	r0, [r0, #0]
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	f7ff fcf9 	bl	8008ffc <_vfiprintf_r>
 800960a:	b002      	add	sp, #8
 800960c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009610:	b003      	add	sp, #12
 8009612:	4770      	bx	lr
 8009614:	20000020 	.word	0x20000020

08009618 <abort>:
 8009618:	2006      	movs	r0, #6
 800961a:	b508      	push	{r3, lr}
 800961c:	f000 f834 	bl	8009688 <raise>
 8009620:	2001      	movs	r0, #1
 8009622:	f7fa ff6e 	bl	8004502 <_exit>

08009626 <_malloc_usable_size_r>:
 8009626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800962a:	1f18      	subs	r0, r3, #4
 800962c:	2b00      	cmp	r3, #0
 800962e:	bfbc      	itt	lt
 8009630:	580b      	ldrlt	r3, [r1, r0]
 8009632:	18c0      	addlt	r0, r0, r3
 8009634:	4770      	bx	lr

08009636 <_raise_r>:
 8009636:	291f      	cmp	r1, #31
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4605      	mov	r5, r0
 800963c:	460c      	mov	r4, r1
 800963e:	d904      	bls.n	800964a <_raise_r+0x14>
 8009640:	2316      	movs	r3, #22
 8009642:	6003      	str	r3, [r0, #0]
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	bd38      	pop	{r3, r4, r5, pc}
 800964a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800964c:	b112      	cbz	r2, 8009654 <_raise_r+0x1e>
 800964e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009652:	b94b      	cbnz	r3, 8009668 <_raise_r+0x32>
 8009654:	4628      	mov	r0, r5
 8009656:	f000 f831 	bl	80096bc <_getpid_r>
 800965a:	4622      	mov	r2, r4
 800965c:	4601      	mov	r1, r0
 800965e:	4628      	mov	r0, r5
 8009660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009664:	f000 b818 	b.w	8009698 <_kill_r>
 8009668:	2b01      	cmp	r3, #1
 800966a:	d00a      	beq.n	8009682 <_raise_r+0x4c>
 800966c:	1c59      	adds	r1, r3, #1
 800966e:	d103      	bne.n	8009678 <_raise_r+0x42>
 8009670:	2316      	movs	r3, #22
 8009672:	6003      	str	r3, [r0, #0]
 8009674:	2001      	movs	r0, #1
 8009676:	e7e7      	b.n	8009648 <_raise_r+0x12>
 8009678:	2100      	movs	r1, #0
 800967a:	4620      	mov	r0, r4
 800967c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009680:	4798      	blx	r3
 8009682:	2000      	movs	r0, #0
 8009684:	e7e0      	b.n	8009648 <_raise_r+0x12>
	...

08009688 <raise>:
 8009688:	4b02      	ldr	r3, [pc, #8]	@ (8009694 <raise+0xc>)
 800968a:	4601      	mov	r1, r0
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	f7ff bfd2 	b.w	8009636 <_raise_r>
 8009692:	bf00      	nop
 8009694:	20000020 	.word	0x20000020

08009698 <_kill_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	2300      	movs	r3, #0
 800969c:	4d06      	ldr	r5, [pc, #24]	@ (80096b8 <_kill_r+0x20>)
 800969e:	4604      	mov	r4, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	4611      	mov	r1, r2
 80096a4:	602b      	str	r3, [r5, #0]
 80096a6:	f7fa ff1c 	bl	80044e2 <_kill>
 80096aa:	1c43      	adds	r3, r0, #1
 80096ac:	d102      	bne.n	80096b4 <_kill_r+0x1c>
 80096ae:	682b      	ldr	r3, [r5, #0]
 80096b0:	b103      	cbz	r3, 80096b4 <_kill_r+0x1c>
 80096b2:	6023      	str	r3, [r4, #0]
 80096b4:	bd38      	pop	{r3, r4, r5, pc}
 80096b6:	bf00      	nop
 80096b8:	200005f0 	.word	0x200005f0

080096bc <_getpid_r>:
 80096bc:	f7fa bf0a 	b.w	80044d4 <_getpid>

080096c0 <pow>:
 80096c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c4:	4614      	mov	r4, r2
 80096c6:	461d      	mov	r5, r3
 80096c8:	4680      	mov	r8, r0
 80096ca:	4689      	mov	r9, r1
 80096cc:	f000 f868 	bl	80097a0 <__ieee754_pow>
 80096d0:	4622      	mov	r2, r4
 80096d2:	4606      	mov	r6, r0
 80096d4:	460f      	mov	r7, r1
 80096d6:	462b      	mov	r3, r5
 80096d8:	4620      	mov	r0, r4
 80096da:	4629      	mov	r1, r5
 80096dc:	f7f7 f9ae 	bl	8000a3c <__aeabi_dcmpun>
 80096e0:	bbc8      	cbnz	r0, 8009756 <pow+0x96>
 80096e2:	2200      	movs	r2, #0
 80096e4:	2300      	movs	r3, #0
 80096e6:	4640      	mov	r0, r8
 80096e8:	4649      	mov	r1, r9
 80096ea:	f7f7 f975 	bl	80009d8 <__aeabi_dcmpeq>
 80096ee:	b1b8      	cbz	r0, 8009720 <pow+0x60>
 80096f0:	2200      	movs	r2, #0
 80096f2:	2300      	movs	r3, #0
 80096f4:	4620      	mov	r0, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7f7 f96e 	bl	80009d8 <__aeabi_dcmpeq>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d141      	bne.n	8009784 <pow+0xc4>
 8009700:	4620      	mov	r0, r4
 8009702:	4629      	mov	r1, r5
 8009704:	f000 f844 	bl	8009790 <finite>
 8009708:	b328      	cbz	r0, 8009756 <pow+0x96>
 800970a:	2200      	movs	r2, #0
 800970c:	2300      	movs	r3, #0
 800970e:	4620      	mov	r0, r4
 8009710:	4629      	mov	r1, r5
 8009712:	f7f7 f96b 	bl	80009ec <__aeabi_dcmplt>
 8009716:	b1f0      	cbz	r0, 8009756 <pow+0x96>
 8009718:	f7fd ffe6 	bl	80076e8 <__errno>
 800971c:	2322      	movs	r3, #34	@ 0x22
 800971e:	e019      	b.n	8009754 <pow+0x94>
 8009720:	4630      	mov	r0, r6
 8009722:	4639      	mov	r1, r7
 8009724:	f000 f834 	bl	8009790 <finite>
 8009728:	b9c8      	cbnz	r0, 800975e <pow+0x9e>
 800972a:	4640      	mov	r0, r8
 800972c:	4649      	mov	r1, r9
 800972e:	f000 f82f 	bl	8009790 <finite>
 8009732:	b1a0      	cbz	r0, 800975e <pow+0x9e>
 8009734:	4620      	mov	r0, r4
 8009736:	4629      	mov	r1, r5
 8009738:	f000 f82a 	bl	8009790 <finite>
 800973c:	b178      	cbz	r0, 800975e <pow+0x9e>
 800973e:	4632      	mov	r2, r6
 8009740:	463b      	mov	r3, r7
 8009742:	4630      	mov	r0, r6
 8009744:	4639      	mov	r1, r7
 8009746:	f7f7 f979 	bl	8000a3c <__aeabi_dcmpun>
 800974a:	2800      	cmp	r0, #0
 800974c:	d0e4      	beq.n	8009718 <pow+0x58>
 800974e:	f7fd ffcb 	bl	80076e8 <__errno>
 8009752:	2321      	movs	r3, #33	@ 0x21
 8009754:	6003      	str	r3, [r0, #0]
 8009756:	4630      	mov	r0, r6
 8009758:	4639      	mov	r1, r7
 800975a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975e:	2200      	movs	r2, #0
 8009760:	2300      	movs	r3, #0
 8009762:	4630      	mov	r0, r6
 8009764:	4639      	mov	r1, r7
 8009766:	f7f7 f937 	bl	80009d8 <__aeabi_dcmpeq>
 800976a:	2800      	cmp	r0, #0
 800976c:	d0f3      	beq.n	8009756 <pow+0x96>
 800976e:	4640      	mov	r0, r8
 8009770:	4649      	mov	r1, r9
 8009772:	f000 f80d 	bl	8009790 <finite>
 8009776:	2800      	cmp	r0, #0
 8009778:	d0ed      	beq.n	8009756 <pow+0x96>
 800977a:	4620      	mov	r0, r4
 800977c:	4629      	mov	r1, r5
 800977e:	f000 f807 	bl	8009790 <finite>
 8009782:	e7c8      	b.n	8009716 <pow+0x56>
 8009784:	2600      	movs	r6, #0
 8009786:	4f01      	ldr	r7, [pc, #4]	@ (800978c <pow+0xcc>)
 8009788:	e7e5      	b.n	8009756 <pow+0x96>
 800978a:	bf00      	nop
 800978c:	3ff00000 	.word	0x3ff00000

08009790 <finite>:
 8009790:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009794:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009798:	0fc0      	lsrs	r0, r0, #31
 800979a:	4770      	bx	lr
 800979c:	0000      	movs	r0, r0
	...

080097a0 <__ieee754_pow>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	b091      	sub	sp, #68	@ 0x44
 80097a6:	e9cd 2300 	strd	r2, r3, [sp]
 80097aa:	468b      	mov	fp, r1
 80097ac:	e9dd 1800 	ldrd	r1, r8, [sp]
 80097b0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80097b4:	4682      	mov	sl, r0
 80097b6:	ea57 0001 	orrs.w	r0, r7, r1
 80097ba:	d112      	bne.n	80097e2 <__ieee754_pow+0x42>
 80097bc:	4653      	mov	r3, sl
 80097be:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80097c2:	18db      	adds	r3, r3, r3
 80097c4:	4152      	adcs	r2, r2
 80097c6:	4298      	cmp	r0, r3
 80097c8:	4b91      	ldr	r3, [pc, #580]	@ (8009a10 <__ieee754_pow+0x270>)
 80097ca:	4193      	sbcs	r3, r2
 80097cc:	f080 84ce 	bcs.w	800a16c <__ieee754_pow+0x9cc>
 80097d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097d4:	4650      	mov	r0, sl
 80097d6:	4659      	mov	r1, fp
 80097d8:	f7f6 fce0 	bl	800019c <__adddf3>
 80097dc:	b011      	add	sp, #68	@ 0x44
 80097de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e2:	4b8c      	ldr	r3, [pc, #560]	@ (8009a14 <__ieee754_pow+0x274>)
 80097e4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80097e8:	429e      	cmp	r6, r3
 80097ea:	465d      	mov	r5, fp
 80097ec:	46d1      	mov	r9, sl
 80097ee:	d807      	bhi.n	8009800 <__ieee754_pow+0x60>
 80097f0:	d102      	bne.n	80097f8 <__ieee754_pow+0x58>
 80097f2:	f1ba 0f00 	cmp.w	sl, #0
 80097f6:	d1eb      	bne.n	80097d0 <__ieee754_pow+0x30>
 80097f8:	429f      	cmp	r7, r3
 80097fa:	d801      	bhi.n	8009800 <__ieee754_pow+0x60>
 80097fc:	d10f      	bne.n	800981e <__ieee754_pow+0x7e>
 80097fe:	b171      	cbz	r1, 800981e <__ieee754_pow+0x7e>
 8009800:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009804:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009808:	ea55 0509 	orrs.w	r5, r5, r9
 800980c:	d1e0      	bne.n	80097d0 <__ieee754_pow+0x30>
 800980e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009812:	18db      	adds	r3, r3, r3
 8009814:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009818:	4152      	adcs	r2, r2
 800981a:	429d      	cmp	r5, r3
 800981c:	e7d4      	b.n	80097c8 <__ieee754_pow+0x28>
 800981e:	2d00      	cmp	r5, #0
 8009820:	4633      	mov	r3, r6
 8009822:	da39      	bge.n	8009898 <__ieee754_pow+0xf8>
 8009824:	4a7c      	ldr	r2, [pc, #496]	@ (8009a18 <__ieee754_pow+0x278>)
 8009826:	4297      	cmp	r7, r2
 8009828:	d84e      	bhi.n	80098c8 <__ieee754_pow+0x128>
 800982a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800982e:	4297      	cmp	r7, r2
 8009830:	f240 84ab 	bls.w	800a18a <__ieee754_pow+0x9ea>
 8009834:	153a      	asrs	r2, r7, #20
 8009836:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800983a:	2a14      	cmp	r2, #20
 800983c:	dd0f      	ble.n	800985e <__ieee754_pow+0xbe>
 800983e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009842:	fa21 f402 	lsr.w	r4, r1, r2
 8009846:	fa04 f202 	lsl.w	r2, r4, r2
 800984a:	428a      	cmp	r2, r1
 800984c:	f040 849d 	bne.w	800a18a <__ieee754_pow+0x9ea>
 8009850:	f004 0401 	and.w	r4, r4, #1
 8009854:	f1c4 0402 	rsb	r4, r4, #2
 8009858:	2900      	cmp	r1, #0
 800985a:	d15a      	bne.n	8009912 <__ieee754_pow+0x172>
 800985c:	e00e      	b.n	800987c <__ieee754_pow+0xdc>
 800985e:	2900      	cmp	r1, #0
 8009860:	d156      	bne.n	8009910 <__ieee754_pow+0x170>
 8009862:	f1c2 0214 	rsb	r2, r2, #20
 8009866:	fa47 f402 	asr.w	r4, r7, r2
 800986a:	fa04 f202 	lsl.w	r2, r4, r2
 800986e:	42ba      	cmp	r2, r7
 8009870:	f040 8488 	bne.w	800a184 <__ieee754_pow+0x9e4>
 8009874:	f004 0401 	and.w	r4, r4, #1
 8009878:	f1c4 0402 	rsb	r4, r4, #2
 800987c:	4a67      	ldr	r2, [pc, #412]	@ (8009a1c <__ieee754_pow+0x27c>)
 800987e:	4297      	cmp	r7, r2
 8009880:	d130      	bne.n	80098e4 <__ieee754_pow+0x144>
 8009882:	f1b8 0f00 	cmp.w	r8, #0
 8009886:	f280 8479 	bge.w	800a17c <__ieee754_pow+0x9dc>
 800988a:	4652      	mov	r2, sl
 800988c:	465b      	mov	r3, fp
 800988e:	2000      	movs	r0, #0
 8009890:	4962      	ldr	r1, [pc, #392]	@ (8009a1c <__ieee754_pow+0x27c>)
 8009892:	f7f6 ff63 	bl	800075c <__aeabi_ddiv>
 8009896:	e7a1      	b.n	80097dc <__ieee754_pow+0x3c>
 8009898:	2400      	movs	r4, #0
 800989a:	2900      	cmp	r1, #0
 800989c:	d139      	bne.n	8009912 <__ieee754_pow+0x172>
 800989e:	4a5d      	ldr	r2, [pc, #372]	@ (8009a14 <__ieee754_pow+0x274>)
 80098a0:	4297      	cmp	r7, r2
 80098a2:	d1eb      	bne.n	800987c <__ieee754_pow+0xdc>
 80098a4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80098a8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80098ac:	ea53 0309 	orrs.w	r3, r3, r9
 80098b0:	f000 845c 	beq.w	800a16c <__ieee754_pow+0x9cc>
 80098b4:	4b5a      	ldr	r3, [pc, #360]	@ (8009a20 <__ieee754_pow+0x280>)
 80098b6:	429e      	cmp	r6, r3
 80098b8:	d908      	bls.n	80098cc <__ieee754_pow+0x12c>
 80098ba:	f1b8 0f00 	cmp.w	r8, #0
 80098be:	f2c0 8459 	blt.w	800a174 <__ieee754_pow+0x9d4>
 80098c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098c6:	e789      	b.n	80097dc <__ieee754_pow+0x3c>
 80098c8:	2402      	movs	r4, #2
 80098ca:	e7e6      	b.n	800989a <__ieee754_pow+0xfa>
 80098cc:	f1b8 0f00 	cmp.w	r8, #0
 80098d0:	f04f 0000 	mov.w	r0, #0
 80098d4:	f04f 0100 	mov.w	r1, #0
 80098d8:	da80      	bge.n	80097dc <__ieee754_pow+0x3c>
 80098da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80098de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80098e2:	e77b      	b.n	80097dc <__ieee754_pow+0x3c>
 80098e4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80098e8:	d106      	bne.n	80098f8 <__ieee754_pow+0x158>
 80098ea:	4652      	mov	r2, sl
 80098ec:	465b      	mov	r3, fp
 80098ee:	4650      	mov	r0, sl
 80098f0:	4659      	mov	r1, fp
 80098f2:	f7f6 fe09 	bl	8000508 <__aeabi_dmul>
 80098f6:	e771      	b.n	80097dc <__ieee754_pow+0x3c>
 80098f8:	4a4a      	ldr	r2, [pc, #296]	@ (8009a24 <__ieee754_pow+0x284>)
 80098fa:	4590      	cmp	r8, r2
 80098fc:	d109      	bne.n	8009912 <__ieee754_pow+0x172>
 80098fe:	2d00      	cmp	r5, #0
 8009900:	db07      	blt.n	8009912 <__ieee754_pow+0x172>
 8009902:	4650      	mov	r0, sl
 8009904:	4659      	mov	r1, fp
 8009906:	b011      	add	sp, #68	@ 0x44
 8009908:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	f000 bd12 	b.w	800a334 <__ieee754_sqrt>
 8009910:	2400      	movs	r4, #0
 8009912:	4650      	mov	r0, sl
 8009914:	4659      	mov	r1, fp
 8009916:	9302      	str	r3, [sp, #8]
 8009918:	f000 fc6a 	bl	800a1f0 <fabs>
 800991c:	9b02      	ldr	r3, [sp, #8]
 800991e:	f1b9 0f00 	cmp.w	r9, #0
 8009922:	d127      	bne.n	8009974 <__ieee754_pow+0x1d4>
 8009924:	4a3d      	ldr	r2, [pc, #244]	@ (8009a1c <__ieee754_pow+0x27c>)
 8009926:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800992a:	4594      	cmp	ip, r2
 800992c:	d000      	beq.n	8009930 <__ieee754_pow+0x190>
 800992e:	bb0e      	cbnz	r6, 8009974 <__ieee754_pow+0x1d4>
 8009930:	f1b8 0f00 	cmp.w	r8, #0
 8009934:	da05      	bge.n	8009942 <__ieee754_pow+0x1a2>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	2000      	movs	r0, #0
 800993c:	4937      	ldr	r1, [pc, #220]	@ (8009a1c <__ieee754_pow+0x27c>)
 800993e:	f7f6 ff0d 	bl	800075c <__aeabi_ddiv>
 8009942:	2d00      	cmp	r5, #0
 8009944:	f6bf af4a 	bge.w	80097dc <__ieee754_pow+0x3c>
 8009948:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800994c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009950:	4326      	orrs	r6, r4
 8009952:	d108      	bne.n	8009966 <__ieee754_pow+0x1c6>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4610      	mov	r0, r2
 800995a:	4619      	mov	r1, r3
 800995c:	f7f6 fc1c 	bl	8000198 <__aeabi_dsub>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	e795      	b.n	8009892 <__ieee754_pow+0xf2>
 8009966:	2c01      	cmp	r4, #1
 8009968:	f47f af38 	bne.w	80097dc <__ieee754_pow+0x3c>
 800996c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009970:	4619      	mov	r1, r3
 8009972:	e733      	b.n	80097dc <__ieee754_pow+0x3c>
 8009974:	0fea      	lsrs	r2, r5, #31
 8009976:	3a01      	subs	r2, #1
 8009978:	ea52 0c04 	orrs.w	ip, r2, r4
 800997c:	d102      	bne.n	8009984 <__ieee754_pow+0x1e4>
 800997e:	4652      	mov	r2, sl
 8009980:	465b      	mov	r3, fp
 8009982:	e7e9      	b.n	8009958 <__ieee754_pow+0x1b8>
 8009984:	f04f 0900 	mov.w	r9, #0
 8009988:	3c01      	subs	r4, #1
 800998a:	4314      	orrs	r4, r2
 800998c:	bf14      	ite	ne
 800998e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8009a1c <__ieee754_pow+0x27c>
 8009992:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8009a28 <__ieee754_pow+0x288>
 8009996:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800999a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800999e:	f240 8107 	bls.w	8009bb0 <__ieee754_pow+0x410>
 80099a2:	4b22      	ldr	r3, [pc, #136]	@ (8009a2c <__ieee754_pow+0x28c>)
 80099a4:	429f      	cmp	r7, r3
 80099a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009a20 <__ieee754_pow+0x280>)
 80099a8:	d913      	bls.n	80099d2 <__ieee754_pow+0x232>
 80099aa:	429e      	cmp	r6, r3
 80099ac:	d808      	bhi.n	80099c0 <__ieee754_pow+0x220>
 80099ae:	f1b8 0f00 	cmp.w	r8, #0
 80099b2:	da08      	bge.n	80099c6 <__ieee754_pow+0x226>
 80099b4:	2000      	movs	r0, #0
 80099b6:	b011      	add	sp, #68	@ 0x44
 80099b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	f000 bcb4 	b.w	800a328 <__math_oflow>
 80099c0:	f1b8 0f00 	cmp.w	r8, #0
 80099c4:	dcf6      	bgt.n	80099b4 <__ieee754_pow+0x214>
 80099c6:	2000      	movs	r0, #0
 80099c8:	b011      	add	sp, #68	@ 0x44
 80099ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ce:	f000 bca6 	b.w	800a31e <__math_uflow>
 80099d2:	429e      	cmp	r6, r3
 80099d4:	d20c      	bcs.n	80099f0 <__ieee754_pow+0x250>
 80099d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099da:	2200      	movs	r2, #0
 80099dc:	2300      	movs	r3, #0
 80099de:	f7f7 f805 	bl	80009ec <__aeabi_dcmplt>
 80099e2:	3800      	subs	r0, #0
 80099e4:	bf18      	it	ne
 80099e6:	2001      	movne	r0, #1
 80099e8:	f1b8 0f00 	cmp.w	r8, #0
 80099ec:	daec      	bge.n	80099c8 <__ieee754_pow+0x228>
 80099ee:	e7e2      	b.n	80099b6 <__ieee754_pow+0x216>
 80099f0:	4b0a      	ldr	r3, [pc, #40]	@ (8009a1c <__ieee754_pow+0x27c>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	429e      	cmp	r6, r3
 80099f6:	d91b      	bls.n	8009a30 <__ieee754_pow+0x290>
 80099f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099fc:	2300      	movs	r3, #0
 80099fe:	f7f6 fff5 	bl	80009ec <__aeabi_dcmplt>
 8009a02:	3800      	subs	r0, #0
 8009a04:	bf18      	it	ne
 8009a06:	2001      	movne	r0, #1
 8009a08:	f1b8 0f00 	cmp.w	r8, #0
 8009a0c:	dcd3      	bgt.n	80099b6 <__ieee754_pow+0x216>
 8009a0e:	e7db      	b.n	80099c8 <__ieee754_pow+0x228>
 8009a10:	fff00000 	.word	0xfff00000
 8009a14:	7ff00000 	.word	0x7ff00000
 8009a18:	433fffff 	.word	0x433fffff
 8009a1c:	3ff00000 	.word	0x3ff00000
 8009a20:	3fefffff 	.word	0x3fefffff
 8009a24:	3fe00000 	.word	0x3fe00000
 8009a28:	bff00000 	.word	0xbff00000
 8009a2c:	43f00000 	.word	0x43f00000
 8009a30:	4b5b      	ldr	r3, [pc, #364]	@ (8009ba0 <__ieee754_pow+0x400>)
 8009a32:	f7f6 fbb1 	bl	8000198 <__aeabi_dsub>
 8009a36:	a352      	add	r3, pc, #328	@ (adr r3, 8009b80 <__ieee754_pow+0x3e0>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	460d      	mov	r5, r1
 8009a40:	f7f6 fd62 	bl	8000508 <__aeabi_dmul>
 8009a44:	a350      	add	r3, pc, #320	@ (adr r3, 8009b88 <__ieee754_pow+0x3e8>)
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	4620      	mov	r0, r4
 8009a50:	4629      	mov	r1, r5
 8009a52:	f7f6 fd59 	bl	8000508 <__aeabi_dmul>
 8009a56:	2200      	movs	r2, #0
 8009a58:	4682      	mov	sl, r0
 8009a5a:	468b      	mov	fp, r1
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4b50      	ldr	r3, [pc, #320]	@ (8009ba4 <__ieee754_pow+0x404>)
 8009a62:	f7f6 fd51 	bl	8000508 <__aeabi_dmul>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	a149      	add	r1, pc, #292	@ (adr r1, 8009b90 <__ieee754_pow+0x3f0>)
 8009a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a70:	f7f6 fb92 	bl	8000198 <__aeabi_dsub>
 8009a74:	4622      	mov	r2, r4
 8009a76:	462b      	mov	r3, r5
 8009a78:	f7f6 fd46 	bl	8000508 <__aeabi_dmul>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	2000      	movs	r0, #0
 8009a82:	4949      	ldr	r1, [pc, #292]	@ (8009ba8 <__ieee754_pow+0x408>)
 8009a84:	f7f6 fb88 	bl	8000198 <__aeabi_dsub>
 8009a88:	4622      	mov	r2, r4
 8009a8a:	4680      	mov	r8, r0
 8009a8c:	4689      	mov	r9, r1
 8009a8e:	462b      	mov	r3, r5
 8009a90:	4620      	mov	r0, r4
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7f6 fd38 	bl	8000508 <__aeabi_dmul>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	f7f6 fd32 	bl	8000508 <__aeabi_dmul>
 8009aa4:	a33c      	add	r3, pc, #240	@ (adr r3, 8009b98 <__ieee754_pow+0x3f8>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	f7f6 fd2d 	bl	8000508 <__aeabi_dmul>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4650      	mov	r0, sl
 8009ab4:	4659      	mov	r1, fp
 8009ab6:	f7f6 fb6f 	bl	8000198 <__aeabi_dsub>
 8009aba:	2400      	movs	r4, #0
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4680      	mov	r8, r0
 8009ac2:	4689      	mov	r9, r1
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f7f6 fb68 	bl	800019c <__adddf3>
 8009acc:	4632      	mov	r2, r6
 8009ace:	463b      	mov	r3, r7
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	f7f6 fb60 	bl	8000198 <__aeabi_dsub>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4640      	mov	r0, r8
 8009ade:	4649      	mov	r1, r9
 8009ae0:	f7f6 fb5a 	bl	8000198 <__aeabi_dsub>
 8009ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009aec:	2300      	movs	r3, #0
 8009aee:	9304      	str	r3, [sp, #16]
 8009af0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009afc:	4652      	mov	r2, sl
 8009afe:	465b      	mov	r3, fp
 8009b00:	f7f6 fb4a 	bl	8000198 <__aeabi_dsub>
 8009b04:	4622      	mov	r2, r4
 8009b06:	462b      	mov	r3, r5
 8009b08:	f7f6 fcfe 	bl	8000508 <__aeabi_dmul>
 8009b0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b10:	4680      	mov	r8, r0
 8009b12:	4689      	mov	r9, r1
 8009b14:	4630      	mov	r0, r6
 8009b16:	4639      	mov	r1, r7
 8009b18:	f7f6 fcf6 	bl	8000508 <__aeabi_dmul>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4640      	mov	r0, r8
 8009b22:	4649      	mov	r1, r9
 8009b24:	f7f6 fb3a 	bl	800019c <__adddf3>
 8009b28:	4652      	mov	r2, sl
 8009b2a:	465b      	mov	r3, fp
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	460f      	mov	r7, r1
 8009b30:	4620      	mov	r0, r4
 8009b32:	4629      	mov	r1, r5
 8009b34:	f7f6 fce8 	bl	8000508 <__aeabi_dmul>
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4680      	mov	r8, r0
 8009b3e:	4689      	mov	r9, r1
 8009b40:	4630      	mov	r0, r6
 8009b42:	4639      	mov	r1, r7
 8009b44:	f7f6 fb2a 	bl	800019c <__adddf3>
 8009b48:	4b18      	ldr	r3, [pc, #96]	@ (8009bac <__ieee754_pow+0x40c>)
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4299      	cmp	r1, r3
 8009b4e:	460d      	mov	r5, r1
 8009b50:	468a      	mov	sl, r1
 8009b52:	468b      	mov	fp, r1
 8009b54:	f340 82e0 	ble.w	800a118 <__ieee754_pow+0x978>
 8009b58:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009b5c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009b60:	4303      	orrs	r3, r0
 8009b62:	f000 81df 	beq.w	8009f24 <__ieee754_pow+0x784>
 8009b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f7f6 ff3d 	bl	80009ec <__aeabi_dcmplt>
 8009b72:	3800      	subs	r0, #0
 8009b74:	bf18      	it	ne
 8009b76:	2001      	movne	r0, #1
 8009b78:	e71d      	b.n	80099b6 <__ieee754_pow+0x216>
 8009b7a:	bf00      	nop
 8009b7c:	f3af 8000 	nop.w
 8009b80:	60000000 	.word	0x60000000
 8009b84:	3ff71547 	.word	0x3ff71547
 8009b88:	f85ddf44 	.word	0xf85ddf44
 8009b8c:	3e54ae0b 	.word	0x3e54ae0b
 8009b90:	55555555 	.word	0x55555555
 8009b94:	3fd55555 	.word	0x3fd55555
 8009b98:	652b82fe 	.word	0x652b82fe
 8009b9c:	3ff71547 	.word	0x3ff71547
 8009ba0:	3ff00000 	.word	0x3ff00000
 8009ba4:	3fd00000 	.word	0x3fd00000
 8009ba8:	3fe00000 	.word	0x3fe00000
 8009bac:	408fffff 	.word	0x408fffff
 8009bb0:	4ad3      	ldr	r2, [pc, #844]	@ (8009f00 <__ieee754_pow+0x760>)
 8009bb2:	402a      	ands	r2, r5
 8009bb4:	2a00      	cmp	r2, #0
 8009bb6:	f040 817a 	bne.w	8009eae <__ieee754_pow+0x70e>
 8009bba:	4bd2      	ldr	r3, [pc, #840]	@ (8009f04 <__ieee754_pow+0x764>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f7f6 fca3 	bl	8000508 <__aeabi_dmul>
 8009bc2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	151a      	asrs	r2, r3, #20
 8009bca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009bce:	4422      	add	r2, r4
 8009bd0:	920a      	str	r2, [sp, #40]	@ 0x28
 8009bd2:	4acd      	ldr	r2, [pc, #820]	@ (8009f08 <__ieee754_pow+0x768>)
 8009bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bd8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009be2:	dd08      	ble.n	8009bf6 <__ieee754_pow+0x456>
 8009be4:	4ac9      	ldr	r2, [pc, #804]	@ (8009f0c <__ieee754_pow+0x76c>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	f340 8163 	ble.w	8009eb2 <__ieee754_pow+0x712>
 8009bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bee:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bf6:	2600      	movs	r6, #0
 8009bf8:	00f3      	lsls	r3, r6, #3
 8009bfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bfc:	4bc4      	ldr	r3, [pc, #784]	@ (8009f10 <__ieee754_pow+0x770>)
 8009bfe:	4629      	mov	r1, r5
 8009c00:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009c04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009c0e:	4623      	mov	r3, r4
 8009c10:	4682      	mov	sl, r0
 8009c12:	f7f6 fac1 	bl	8000198 <__aeabi_dsub>
 8009c16:	4652      	mov	r2, sl
 8009c18:	462b      	mov	r3, r5
 8009c1a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009c1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c22:	f7f6 fabb 	bl	800019c <__adddf3>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	49b9      	ldr	r1, [pc, #740]	@ (8009f14 <__ieee754_pow+0x774>)
 8009c2e:	f7f6 fd95 	bl	800075c <__aeabi_ddiv>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009c3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c3e:	f7f6 fc63 	bl	8000508 <__aeabi_dmul>
 8009c42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c46:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009c4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	2200      	movs	r2, #0
 8009c52:	46ab      	mov	fp, r5
 8009c54:	106d      	asrs	r5, r5, #1
 8009c56:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009c60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009c64:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009c68:	4640      	mov	r0, r8
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	461d      	mov	r5, r3
 8009c70:	f7f6 fc4a 	bl	8000508 <__aeabi_dmul>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c7c:	f7f6 fa8c 	bl	8000198 <__aeabi_dsub>
 8009c80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c84:	4606      	mov	r6, r0
 8009c86:	460f      	mov	r7, r1
 8009c88:	4620      	mov	r0, r4
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f7f6 fa84 	bl	8000198 <__aeabi_dsub>
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	4650      	mov	r0, sl
 8009c96:	4659      	mov	r1, fp
 8009c98:	f7f6 fa7e 	bl	8000198 <__aeabi_dsub>
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	f7f6 fc32 	bl	8000508 <__aeabi_dmul>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4630      	mov	r0, r6
 8009caa:	4639      	mov	r1, r7
 8009cac:	f7f6 fa74 	bl	8000198 <__aeabi_dsub>
 8009cb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009cb4:	f7f6 fc28 	bl	8000508 <__aeabi_dmul>
 8009cb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	f7f6 fc20 	bl	8000508 <__aeabi_dmul>
 8009cc8:	a37b      	add	r3, pc, #492	@ (adr r3, 8009eb8 <__ieee754_pow+0x718>)
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	4604      	mov	r4, r0
 8009cd0:	460d      	mov	r5, r1
 8009cd2:	f7f6 fc19 	bl	8000508 <__aeabi_dmul>
 8009cd6:	a37a      	add	r3, pc, #488	@ (adr r3, 8009ec0 <__ieee754_pow+0x720>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f6 fa5e 	bl	800019c <__adddf3>
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	462b      	mov	r3, r5
 8009ce4:	f7f6 fc10 	bl	8000508 <__aeabi_dmul>
 8009ce8:	a377      	add	r3, pc, #476	@ (adr r3, 8009ec8 <__ieee754_pow+0x728>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 fa55 	bl	800019c <__adddf3>
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	462b      	mov	r3, r5
 8009cf6:	f7f6 fc07 	bl	8000508 <__aeabi_dmul>
 8009cfa:	a375      	add	r3, pc, #468	@ (adr r3, 8009ed0 <__ieee754_pow+0x730>)
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f7f6 fa4c 	bl	800019c <__adddf3>
 8009d04:	4622      	mov	r2, r4
 8009d06:	462b      	mov	r3, r5
 8009d08:	f7f6 fbfe 	bl	8000508 <__aeabi_dmul>
 8009d0c:	a372      	add	r3, pc, #456	@ (adr r3, 8009ed8 <__ieee754_pow+0x738>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	f7f6 fa43 	bl	800019c <__adddf3>
 8009d16:	4622      	mov	r2, r4
 8009d18:	462b      	mov	r3, r5
 8009d1a:	f7f6 fbf5 	bl	8000508 <__aeabi_dmul>
 8009d1e:	a370      	add	r3, pc, #448	@ (adr r3, 8009ee0 <__ieee754_pow+0x740>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 fa3a 	bl	800019c <__adddf3>
 8009d28:	4622      	mov	r2, r4
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	460f      	mov	r7, r1
 8009d2e:	462b      	mov	r3, r5
 8009d30:	4620      	mov	r0, r4
 8009d32:	4629      	mov	r1, r5
 8009d34:	f7f6 fbe8 	bl	8000508 <__aeabi_dmul>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	4639      	mov	r1, r7
 8009d40:	f7f6 fbe2 	bl	8000508 <__aeabi_dmul>
 8009d44:	4604      	mov	r4, r0
 8009d46:	460d      	mov	r5, r1
 8009d48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d4c:	4642      	mov	r2, r8
 8009d4e:	464b      	mov	r3, r9
 8009d50:	f7f6 fa24 	bl	800019c <__adddf3>
 8009d54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d58:	f7f6 fbd6 	bl	8000508 <__aeabi_dmul>
 8009d5c:	4622      	mov	r2, r4
 8009d5e:	462b      	mov	r3, r5
 8009d60:	f7f6 fa1c 	bl	800019c <__adddf3>
 8009d64:	4642      	mov	r2, r8
 8009d66:	4682      	mov	sl, r0
 8009d68:	468b      	mov	fp, r1
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	4649      	mov	r1, r9
 8009d70:	f7f6 fbca 	bl	8000508 <__aeabi_dmul>
 8009d74:	2200      	movs	r2, #0
 8009d76:	4b68      	ldr	r3, [pc, #416]	@ (8009f18 <__ieee754_pow+0x778>)
 8009d78:	4606      	mov	r6, r0
 8009d7a:	460f      	mov	r7, r1
 8009d7c:	f7f6 fa0e 	bl	800019c <__adddf3>
 8009d80:	4652      	mov	r2, sl
 8009d82:	465b      	mov	r3, fp
 8009d84:	f7f6 fa0a 	bl	800019c <__adddf3>
 8009d88:	2400      	movs	r4, #0
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4640      	mov	r0, r8
 8009d92:	4649      	mov	r1, r9
 8009d94:	f7f6 fbb8 	bl	8000508 <__aeabi_dmul>
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4680      	mov	r8, r0
 8009d9c:	4689      	mov	r9, r1
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	4b5d      	ldr	r3, [pc, #372]	@ (8009f18 <__ieee754_pow+0x778>)
 8009da4:	f7f6 f9f8 	bl	8000198 <__aeabi_dsub>
 8009da8:	4632      	mov	r2, r6
 8009daa:	463b      	mov	r3, r7
 8009dac:	f7f6 f9f4 	bl	8000198 <__aeabi_dsub>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4650      	mov	r0, sl
 8009db6:	4659      	mov	r1, fp
 8009db8:	f7f6 f9ee 	bl	8000198 <__aeabi_dsub>
 8009dbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009dc0:	f7f6 fba2 	bl	8000508 <__aeabi_dmul>
 8009dc4:	4622      	mov	r2, r4
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	460f      	mov	r7, r1
 8009dca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009dce:	462b      	mov	r3, r5
 8009dd0:	f7f6 fb9a 	bl	8000508 <__aeabi_dmul>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4630      	mov	r0, r6
 8009dda:	4639      	mov	r1, r7
 8009ddc:	f7f6 f9de 	bl	800019c <__adddf3>
 8009de0:	2400      	movs	r4, #0
 8009de2:	4606      	mov	r6, r0
 8009de4:	460f      	mov	r7, r1
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4640      	mov	r0, r8
 8009dec:	4649      	mov	r1, r9
 8009dee:	f7f6 f9d5 	bl	800019c <__adddf3>
 8009df2:	a33d      	add	r3, pc, #244	@ (adr r3, 8009ee8 <__ieee754_pow+0x748>)
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	4620      	mov	r0, r4
 8009dfa:	460d      	mov	r5, r1
 8009dfc:	f7f6 fb84 	bl	8000508 <__aeabi_dmul>
 8009e00:	4642      	mov	r2, r8
 8009e02:	464b      	mov	r3, r9
 8009e04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e08:	4620      	mov	r0, r4
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	f7f6 f9c4 	bl	8000198 <__aeabi_dsub>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4630      	mov	r0, r6
 8009e16:	4639      	mov	r1, r7
 8009e18:	f7f6 f9be 	bl	8000198 <__aeabi_dsub>
 8009e1c:	a334      	add	r3, pc, #208	@ (adr r3, 8009ef0 <__ieee754_pow+0x750>)
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	f7f6 fb71 	bl	8000508 <__aeabi_dmul>
 8009e26:	a334      	add	r3, pc, #208	@ (adr r3, 8009ef8 <__ieee754_pow+0x758>)
 8009e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	460f      	mov	r7, r1
 8009e30:	4620      	mov	r0, r4
 8009e32:	4629      	mov	r1, r5
 8009e34:	f7f6 fb68 	bl	8000508 <__aeabi_dmul>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	4639      	mov	r1, r7
 8009e40:	f7f6 f9ac 	bl	800019c <__adddf3>
 8009e44:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e46:	4b35      	ldr	r3, [pc, #212]	@ (8009f1c <__ieee754_pow+0x77c>)
 8009e48:	2400      	movs	r4, #0
 8009e4a:	4413      	add	r3, r2
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	f7f6 f9a4 	bl	800019c <__adddf3>
 8009e54:	4682      	mov	sl, r0
 8009e56:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e58:	468b      	mov	fp, r1
 8009e5a:	f7f6 faeb 	bl	8000434 <__aeabi_i2d>
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e64:	4b2e      	ldr	r3, [pc, #184]	@ (8009f20 <__ieee754_pow+0x780>)
 8009e66:	4413      	add	r3, r2
 8009e68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e6c:	4652      	mov	r2, sl
 8009e6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e72:	465b      	mov	r3, fp
 8009e74:	f7f6 f992 	bl	800019c <__adddf3>
 8009e78:	4642      	mov	r2, r8
 8009e7a:	464b      	mov	r3, r9
 8009e7c:	f7f6 f98e 	bl	800019c <__adddf3>
 8009e80:	4632      	mov	r2, r6
 8009e82:	463b      	mov	r3, r7
 8009e84:	f7f6 f98a 	bl	800019c <__adddf3>
 8009e88:	4632      	mov	r2, r6
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	460d      	mov	r5, r1
 8009e90:	f7f6 f982 	bl	8000198 <__aeabi_dsub>
 8009e94:	4642      	mov	r2, r8
 8009e96:	464b      	mov	r3, r9
 8009e98:	f7f6 f97e 	bl	8000198 <__aeabi_dsub>
 8009e9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ea0:	f7f6 f97a 	bl	8000198 <__aeabi_dsub>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	4659      	mov	r1, fp
 8009eac:	e618      	b.n	8009ae0 <__ieee754_pow+0x340>
 8009eae:	2400      	movs	r4, #0
 8009eb0:	e68a      	b.n	8009bc8 <__ieee754_pow+0x428>
 8009eb2:	2601      	movs	r6, #1
 8009eb4:	e6a0      	b.n	8009bf8 <__ieee754_pow+0x458>
 8009eb6:	bf00      	nop
 8009eb8:	4a454eef 	.word	0x4a454eef
 8009ebc:	3fca7e28 	.word	0x3fca7e28
 8009ec0:	93c9db65 	.word	0x93c9db65
 8009ec4:	3fcd864a 	.word	0x3fcd864a
 8009ec8:	a91d4101 	.word	0xa91d4101
 8009ecc:	3fd17460 	.word	0x3fd17460
 8009ed0:	518f264d 	.word	0x518f264d
 8009ed4:	3fd55555 	.word	0x3fd55555
 8009ed8:	db6fabff 	.word	0xdb6fabff
 8009edc:	3fdb6db6 	.word	0x3fdb6db6
 8009ee0:	33333303 	.word	0x33333303
 8009ee4:	3fe33333 	.word	0x3fe33333
 8009ee8:	e0000000 	.word	0xe0000000
 8009eec:	3feec709 	.word	0x3feec709
 8009ef0:	dc3a03fd 	.word	0xdc3a03fd
 8009ef4:	3feec709 	.word	0x3feec709
 8009ef8:	145b01f5 	.word	0x145b01f5
 8009efc:	be3e2fe0 	.word	0xbe3e2fe0
 8009f00:	7ff00000 	.word	0x7ff00000
 8009f04:	43400000 	.word	0x43400000
 8009f08:	0003988e 	.word	0x0003988e
 8009f0c:	000bb679 	.word	0x000bb679
 8009f10:	0800ab00 	.word	0x0800ab00
 8009f14:	3ff00000 	.word	0x3ff00000
 8009f18:	40080000 	.word	0x40080000
 8009f1c:	0800aae0 	.word	0x0800aae0
 8009f20:	0800aaf0 	.word	0x0800aaf0
 8009f24:	a39a      	add	r3, pc, #616	@ (adr r3, 800a190 <__ieee754_pow+0x9f0>)
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	f7f6 f935 	bl	800019c <__adddf3>
 8009f32:	4642      	mov	r2, r8
 8009f34:	e9cd 0100 	strd	r0, r1, [sp]
 8009f38:	464b      	mov	r3, r9
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	f7f6 f92b 	bl	8000198 <__aeabi_dsub>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f4a:	f7f6 fd6d 	bl	8000a28 <__aeabi_dcmpgt>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	f47f ae09 	bne.w	8009b66 <__ieee754_pow+0x3c6>
 8009f54:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009f58:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009f5c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009f60:	fa43 fa0a 	asr.w	sl, r3, sl
 8009f64:	44da      	add	sl, fp
 8009f66:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009f6a:	489b      	ldr	r0, [pc, #620]	@ (800a1d8 <__ieee754_pow+0xa38>)
 8009f6c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009f70:	4108      	asrs	r0, r1
 8009f72:	ea00 030a 	and.w	r3, r0, sl
 8009f76:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009f7a:	f1c1 0114 	rsb	r1, r1, #20
 8009f7e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009f82:	4640      	mov	r0, r8
 8009f84:	fa4a fa01 	asr.w	sl, sl, r1
 8009f88:	f1bb 0f00 	cmp.w	fp, #0
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	f04f 0200 	mov.w	r2, #0
 8009f92:	bfb8      	it	lt
 8009f94:	f1ca 0a00 	rsblt	sl, sl, #0
 8009f98:	f7f6 f8fe 	bl	8000198 <__aeabi_dsub>
 8009f9c:	4680      	mov	r8, r0
 8009f9e:	4689      	mov	r9, r1
 8009fa0:	2400      	movs	r4, #0
 8009fa2:	4632      	mov	r2, r6
 8009fa4:	463b      	mov	r3, r7
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	4649      	mov	r1, r9
 8009faa:	f7f6 f8f7 	bl	800019c <__adddf3>
 8009fae:	a37a      	add	r3, pc, #488	@ (adr r3, 800a198 <__ieee754_pow+0x9f8>)
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	460d      	mov	r5, r1
 8009fb8:	f7f6 faa6 	bl	8000508 <__aeabi_dmul>
 8009fbc:	4642      	mov	r2, r8
 8009fbe:	464b      	mov	r3, r9
 8009fc0:	e9cd 0100 	strd	r0, r1, [sp]
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	f7f6 f8e6 	bl	8000198 <__aeabi_dsub>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7f6 f8e0 	bl	8000198 <__aeabi_dsub>
 8009fd8:	a371      	add	r3, pc, #452	@ (adr r3, 800a1a0 <__ieee754_pow+0xa00>)
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f7f6 fa93 	bl	8000508 <__aeabi_dmul>
 8009fe2:	a371      	add	r3, pc, #452	@ (adr r3, 800a1a8 <__ieee754_pow+0xa08>)
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	4680      	mov	r8, r0
 8009fea:	4689      	mov	r9, r1
 8009fec:	4620      	mov	r0, r4
 8009fee:	4629      	mov	r1, r5
 8009ff0:	f7f6 fa8a 	bl	8000508 <__aeabi_dmul>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	f7f6 f8ce 	bl	800019c <__adddf3>
 800a000:	4604      	mov	r4, r0
 800a002:	460d      	mov	r5, r1
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a00c:	f7f6 f8c6 	bl	800019c <__adddf3>
 800a010:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a014:	4680      	mov	r8, r0
 800a016:	4689      	mov	r9, r1
 800a018:	f7f6 f8be 	bl	8000198 <__aeabi_dsub>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4620      	mov	r0, r4
 800a022:	4629      	mov	r1, r5
 800a024:	f7f6 f8b8 	bl	8000198 <__aeabi_dsub>
 800a028:	4642      	mov	r2, r8
 800a02a:	4606      	mov	r6, r0
 800a02c:	460f      	mov	r7, r1
 800a02e:	464b      	mov	r3, r9
 800a030:	4640      	mov	r0, r8
 800a032:	4649      	mov	r1, r9
 800a034:	f7f6 fa68 	bl	8000508 <__aeabi_dmul>
 800a038:	a35d      	add	r3, pc, #372	@ (adr r3, 800a1b0 <__ieee754_pow+0xa10>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	4604      	mov	r4, r0
 800a040:	460d      	mov	r5, r1
 800a042:	f7f6 fa61 	bl	8000508 <__aeabi_dmul>
 800a046:	a35c      	add	r3, pc, #368	@ (adr r3, 800a1b8 <__ieee754_pow+0xa18>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	f7f6 f8a4 	bl	8000198 <__aeabi_dsub>
 800a050:	4622      	mov	r2, r4
 800a052:	462b      	mov	r3, r5
 800a054:	f7f6 fa58 	bl	8000508 <__aeabi_dmul>
 800a058:	a359      	add	r3, pc, #356	@ (adr r3, 800a1c0 <__ieee754_pow+0xa20>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	f7f6 f89d 	bl	800019c <__adddf3>
 800a062:	4622      	mov	r2, r4
 800a064:	462b      	mov	r3, r5
 800a066:	f7f6 fa4f 	bl	8000508 <__aeabi_dmul>
 800a06a:	a357      	add	r3, pc, #348	@ (adr r3, 800a1c8 <__ieee754_pow+0xa28>)
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f7f6 f892 	bl	8000198 <__aeabi_dsub>
 800a074:	4622      	mov	r2, r4
 800a076:	462b      	mov	r3, r5
 800a078:	f7f6 fa46 	bl	8000508 <__aeabi_dmul>
 800a07c:	a354      	add	r3, pc, #336	@ (adr r3, 800a1d0 <__ieee754_pow+0xa30>)
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	f7f6 f88b 	bl	800019c <__adddf3>
 800a086:	4622      	mov	r2, r4
 800a088:	462b      	mov	r3, r5
 800a08a:	f7f6 fa3d 	bl	8000508 <__aeabi_dmul>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	4640      	mov	r0, r8
 800a094:	4649      	mov	r1, r9
 800a096:	f7f6 f87f 	bl	8000198 <__aeabi_dsub>
 800a09a:	4604      	mov	r4, r0
 800a09c:	460d      	mov	r5, r1
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	f7f6 fa2f 	bl	8000508 <__aeabi_dmul>
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	e9cd 0100 	strd	r0, r1, [sp]
 800a0b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	f7f6 f86e 	bl	8000198 <__aeabi_dsub>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0c4:	f7f6 fb4a 	bl	800075c <__aeabi_ddiv>
 800a0c8:	4632      	mov	r2, r6
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	460d      	mov	r5, r1
 800a0ce:	463b      	mov	r3, r7
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	f7f6 fa18 	bl	8000508 <__aeabi_dmul>
 800a0d8:	4632      	mov	r2, r6
 800a0da:	463b      	mov	r3, r7
 800a0dc:	f7f6 f85e 	bl	800019c <__adddf3>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f7f6 f856 	bl	8000198 <__aeabi_dsub>
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	464b      	mov	r3, r9
 800a0f0:	f7f6 f852 	bl	8000198 <__aeabi_dsub>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	4938      	ldr	r1, [pc, #224]	@ (800a1dc <__ieee754_pow+0xa3c>)
 800a0fc:	f7f6 f84c 	bl	8000198 <__aeabi_dsub>
 800a100:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a104:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a108:	da2e      	bge.n	800a168 <__ieee754_pow+0x9c8>
 800a10a:	4652      	mov	r2, sl
 800a10c:	f000 f874 	bl	800a1f8 <scalbn>
 800a110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a114:	f7ff bbed 	b.w	80098f2 <__ieee754_pow+0x152>
 800a118:	4c31      	ldr	r4, [pc, #196]	@ (800a1e0 <__ieee754_pow+0xa40>)
 800a11a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a11e:	42a3      	cmp	r3, r4
 800a120:	d91a      	bls.n	800a158 <__ieee754_pow+0x9b8>
 800a122:	4b30      	ldr	r3, [pc, #192]	@ (800a1e4 <__ieee754_pow+0xa44>)
 800a124:	440b      	add	r3, r1
 800a126:	4303      	orrs	r3, r0
 800a128:	d009      	beq.n	800a13e <__ieee754_pow+0x99e>
 800a12a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a12e:	2200      	movs	r2, #0
 800a130:	2300      	movs	r3, #0
 800a132:	f7f6 fc5b 	bl	80009ec <__aeabi_dcmplt>
 800a136:	3800      	subs	r0, #0
 800a138:	bf18      	it	ne
 800a13a:	2001      	movne	r0, #1
 800a13c:	e444      	b.n	80099c8 <__ieee754_pow+0x228>
 800a13e:	4642      	mov	r2, r8
 800a140:	464b      	mov	r3, r9
 800a142:	f7f6 f829 	bl	8000198 <__aeabi_dsub>
 800a146:	4632      	mov	r2, r6
 800a148:	463b      	mov	r3, r7
 800a14a:	f7f6 fc63 	bl	8000a14 <__aeabi_dcmpge>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d1eb      	bne.n	800a12a <__ieee754_pow+0x98a>
 800a152:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800a1e8 <__ieee754_pow+0xa48>
 800a156:	e6fd      	b.n	8009f54 <__ieee754_pow+0x7b4>
 800a158:	469a      	mov	sl, r3
 800a15a:	4b24      	ldr	r3, [pc, #144]	@ (800a1ec <__ieee754_pow+0xa4c>)
 800a15c:	459a      	cmp	sl, r3
 800a15e:	f63f aef9 	bhi.w	8009f54 <__ieee754_pow+0x7b4>
 800a162:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a166:	e71b      	b.n	8009fa0 <__ieee754_pow+0x800>
 800a168:	4621      	mov	r1, r4
 800a16a:	e7d1      	b.n	800a110 <__ieee754_pow+0x970>
 800a16c:	2000      	movs	r0, #0
 800a16e:	491b      	ldr	r1, [pc, #108]	@ (800a1dc <__ieee754_pow+0xa3c>)
 800a170:	f7ff bb34 	b.w	80097dc <__ieee754_pow+0x3c>
 800a174:	2000      	movs	r0, #0
 800a176:	2100      	movs	r1, #0
 800a178:	f7ff bb30 	b.w	80097dc <__ieee754_pow+0x3c>
 800a17c:	4650      	mov	r0, sl
 800a17e:	4659      	mov	r1, fp
 800a180:	f7ff bb2c 	b.w	80097dc <__ieee754_pow+0x3c>
 800a184:	460c      	mov	r4, r1
 800a186:	f7ff bb79 	b.w	800987c <__ieee754_pow+0xdc>
 800a18a:	2400      	movs	r4, #0
 800a18c:	f7ff bb64 	b.w	8009858 <__ieee754_pow+0xb8>
 800a190:	652b82fe 	.word	0x652b82fe
 800a194:	3c971547 	.word	0x3c971547
 800a198:	00000000 	.word	0x00000000
 800a19c:	3fe62e43 	.word	0x3fe62e43
 800a1a0:	fefa39ef 	.word	0xfefa39ef
 800a1a4:	3fe62e42 	.word	0x3fe62e42
 800a1a8:	0ca86c39 	.word	0x0ca86c39
 800a1ac:	be205c61 	.word	0xbe205c61
 800a1b0:	72bea4d0 	.word	0x72bea4d0
 800a1b4:	3e663769 	.word	0x3e663769
 800a1b8:	c5d26bf1 	.word	0xc5d26bf1
 800a1bc:	3ebbbd41 	.word	0x3ebbbd41
 800a1c0:	af25de2c 	.word	0xaf25de2c
 800a1c4:	3f11566a 	.word	0x3f11566a
 800a1c8:	16bebd93 	.word	0x16bebd93
 800a1cc:	3f66c16c 	.word	0x3f66c16c
 800a1d0:	5555553e 	.word	0x5555553e
 800a1d4:	3fc55555 	.word	0x3fc55555
 800a1d8:	fff00000 	.word	0xfff00000
 800a1dc:	3ff00000 	.word	0x3ff00000
 800a1e0:	4090cbff 	.word	0x4090cbff
 800a1e4:	3f6f3400 	.word	0x3f6f3400
 800a1e8:	4090cc00 	.word	0x4090cc00
 800a1ec:	3fe00000 	.word	0x3fe00000

0800a1f0 <fabs>:
 800a1f0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4770      	bx	lr

0800a1f8 <scalbn>:
 800a1f8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a1fc:	4616      	mov	r6, r2
 800a1fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a202:	4683      	mov	fp, r0
 800a204:	468c      	mov	ip, r1
 800a206:	460b      	mov	r3, r1
 800a208:	b982      	cbnz	r2, 800a22c <scalbn+0x34>
 800a20a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a20e:	4303      	orrs	r3, r0
 800a210:	d039      	beq.n	800a286 <scalbn+0x8e>
 800a212:	4b2f      	ldr	r3, [pc, #188]	@ (800a2d0 <scalbn+0xd8>)
 800a214:	2200      	movs	r2, #0
 800a216:	f7f6 f977 	bl	8000508 <__aeabi_dmul>
 800a21a:	4b2e      	ldr	r3, [pc, #184]	@ (800a2d4 <scalbn+0xdc>)
 800a21c:	4683      	mov	fp, r0
 800a21e:	429e      	cmp	r6, r3
 800a220:	468c      	mov	ip, r1
 800a222:	da0d      	bge.n	800a240 <scalbn+0x48>
 800a224:	a326      	add	r3, pc, #152	@ (adr r3, 800a2c0 <scalbn+0xc8>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	e01b      	b.n	800a264 <scalbn+0x6c>
 800a22c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a230:	42ba      	cmp	r2, r7
 800a232:	d109      	bne.n	800a248 <scalbn+0x50>
 800a234:	4602      	mov	r2, r0
 800a236:	f7f5 ffb1 	bl	800019c <__adddf3>
 800a23a:	4683      	mov	fp, r0
 800a23c:	468c      	mov	ip, r1
 800a23e:	e022      	b.n	800a286 <scalbn+0x8e>
 800a240:	460b      	mov	r3, r1
 800a242:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a246:	3a36      	subs	r2, #54	@ 0x36
 800a248:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a24c:	428e      	cmp	r6, r1
 800a24e:	dd0c      	ble.n	800a26a <scalbn+0x72>
 800a250:	a31d      	add	r3, pc, #116	@ (adr r3, 800a2c8 <scalbn+0xd0>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	461c      	mov	r4, r3
 800a258:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a25c:	f361 74df 	bfi	r4, r1, #31, #1
 800a260:	4621      	mov	r1, r4
 800a262:	481d      	ldr	r0, [pc, #116]	@ (800a2d8 <scalbn+0xe0>)
 800a264:	f7f6 f950 	bl	8000508 <__aeabi_dmul>
 800a268:	e7e7      	b.n	800a23a <scalbn+0x42>
 800a26a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a26e:	4432      	add	r2, r6
 800a270:	428a      	cmp	r2, r1
 800a272:	dced      	bgt.n	800a250 <scalbn+0x58>
 800a274:	2a00      	cmp	r2, #0
 800a276:	dd0a      	ble.n	800a28e <scalbn+0x96>
 800a278:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a27c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a280:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a284:	46ac      	mov	ip, r5
 800a286:	4658      	mov	r0, fp
 800a288:	4661      	mov	r1, ip
 800a28a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a28e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a292:	da09      	bge.n	800a2a8 <scalbn+0xb0>
 800a294:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a298:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a29c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a2a0:	480e      	ldr	r0, [pc, #56]	@ (800a2dc <scalbn+0xe4>)
 800a2a2:	f041 011f 	orr.w	r1, r1, #31
 800a2a6:	e7bd      	b.n	800a224 <scalbn+0x2c>
 800a2a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a2ac:	3236      	adds	r2, #54	@ 0x36
 800a2ae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a2b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a2b6:	4658      	mov	r0, fp
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	4b08      	ldr	r3, [pc, #32]	@ (800a2e0 <scalbn+0xe8>)
 800a2be:	e7d1      	b.n	800a264 <scalbn+0x6c>
 800a2c0:	c2f8f359 	.word	0xc2f8f359
 800a2c4:	01a56e1f 	.word	0x01a56e1f
 800a2c8:	8800759c 	.word	0x8800759c
 800a2cc:	7e37e43c 	.word	0x7e37e43c
 800a2d0:	43500000 	.word	0x43500000
 800a2d4:	ffff3cb0 	.word	0xffff3cb0
 800a2d8:	8800759c 	.word	0x8800759c
 800a2dc:	c2f8f359 	.word	0xc2f8f359
 800a2e0:	3c900000 	.word	0x3c900000

0800a2e4 <with_errno>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	460d      	mov	r5, r1
 800a2ea:	4616      	mov	r6, r2
 800a2ec:	f7fd f9fc 	bl	80076e8 <__errno>
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	6006      	str	r6, [r0, #0]
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	bd70      	pop	{r4, r5, r6, pc}

0800a2f8 <xflow>:
 800a2f8:	b513      	push	{r0, r1, r4, lr}
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4610      	mov	r0, r2
 800a300:	b10c      	cbz	r4, 800a306 <xflow+0xe>
 800a302:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a306:	e9cd 2300 	strd	r2, r3, [sp]
 800a30a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a30e:	f7f6 f8fb 	bl	8000508 <__aeabi_dmul>
 800a312:	2222      	movs	r2, #34	@ 0x22
 800a314:	b002      	add	sp, #8
 800a316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a31a:	f7ff bfe3 	b.w	800a2e4 <with_errno>

0800a31e <__math_uflow>:
 800a31e:	2200      	movs	r2, #0
 800a320:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a324:	f7ff bfe8 	b.w	800a2f8 <xflow>

0800a328 <__math_oflow>:
 800a328:	2200      	movs	r2, #0
 800a32a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800a32e:	f7ff bfe3 	b.w	800a2f8 <xflow>
	...

0800a334 <__ieee754_sqrt>:
 800a334:	4a67      	ldr	r2, [pc, #412]	@ (800a4d4 <__ieee754_sqrt+0x1a0>)
 800a336:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33a:	438a      	bics	r2, r1
 800a33c:	4606      	mov	r6, r0
 800a33e:	460f      	mov	r7, r1
 800a340:	460b      	mov	r3, r1
 800a342:	4604      	mov	r4, r0
 800a344:	d10e      	bne.n	800a364 <__ieee754_sqrt+0x30>
 800a346:	4602      	mov	r2, r0
 800a348:	f7f6 f8de 	bl	8000508 <__aeabi_dmul>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	f7f5 ff22 	bl	800019c <__adddf3>
 800a358:	4606      	mov	r6, r0
 800a35a:	460f      	mov	r7, r1
 800a35c:	4630      	mov	r0, r6
 800a35e:	4639      	mov	r1, r7
 800a360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a364:	2900      	cmp	r1, #0
 800a366:	dc0c      	bgt.n	800a382 <__ieee754_sqrt+0x4e>
 800a368:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a36c:	4302      	orrs	r2, r0
 800a36e:	d0f5      	beq.n	800a35c <__ieee754_sqrt+0x28>
 800a370:	b189      	cbz	r1, 800a396 <__ieee754_sqrt+0x62>
 800a372:	4602      	mov	r2, r0
 800a374:	f7f5 ff10 	bl	8000198 <__aeabi_dsub>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	f7f6 f9ee 	bl	800075c <__aeabi_ddiv>
 800a380:	e7ea      	b.n	800a358 <__ieee754_sqrt+0x24>
 800a382:	150a      	asrs	r2, r1, #20
 800a384:	d115      	bne.n	800a3b2 <__ieee754_sqrt+0x7e>
 800a386:	2100      	movs	r1, #0
 800a388:	e009      	b.n	800a39e <__ieee754_sqrt+0x6a>
 800a38a:	0ae3      	lsrs	r3, r4, #11
 800a38c:	3a15      	subs	r2, #21
 800a38e:	0564      	lsls	r4, r4, #21
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0fa      	beq.n	800a38a <__ieee754_sqrt+0x56>
 800a394:	e7f7      	b.n	800a386 <__ieee754_sqrt+0x52>
 800a396:	460a      	mov	r2, r1
 800a398:	e7fa      	b.n	800a390 <__ieee754_sqrt+0x5c>
 800a39a:	005b      	lsls	r3, r3, #1
 800a39c:	3101      	adds	r1, #1
 800a39e:	02d8      	lsls	r0, r3, #11
 800a3a0:	d5fb      	bpl.n	800a39a <__ieee754_sqrt+0x66>
 800a3a2:	1e48      	subs	r0, r1, #1
 800a3a4:	1a12      	subs	r2, r2, r0
 800a3a6:	f1c1 0020 	rsb	r0, r1, #32
 800a3aa:	fa24 f000 	lsr.w	r0, r4, r0
 800a3ae:	4303      	orrs	r3, r0
 800a3b0:	408c      	lsls	r4, r1
 800a3b2:	2600      	movs	r6, #0
 800a3b4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a3b8:	2116      	movs	r1, #22
 800a3ba:	07d2      	lsls	r2, r2, #31
 800a3bc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a3c0:	4632      	mov	r2, r6
 800a3c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3ca:	bf5c      	itt	pl
 800a3cc:	005b      	lslpl	r3, r3, #1
 800a3ce:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a3d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a3d6:	bf58      	it	pl
 800a3d8:	0064      	lslpl	r4, r4, #1
 800a3da:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a3de:	107f      	asrs	r7, r7, #1
 800a3e0:	0064      	lsls	r4, r4, #1
 800a3e2:	1815      	adds	r5, r2, r0
 800a3e4:	429d      	cmp	r5, r3
 800a3e6:	bfde      	ittt	le
 800a3e8:	182a      	addle	r2, r5, r0
 800a3ea:	1b5b      	suble	r3, r3, r5
 800a3ec:	1836      	addle	r6, r6, r0
 800a3ee:	0fe5      	lsrs	r5, r4, #31
 800a3f0:	3901      	subs	r1, #1
 800a3f2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a3f6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a3fa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a3fe:	d1f0      	bne.n	800a3e2 <__ieee754_sqrt+0xae>
 800a400:	460d      	mov	r5, r1
 800a402:	f04f 0a20 	mov.w	sl, #32
 800a406:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a40a:	429a      	cmp	r2, r3
 800a40c:	eb01 0c00 	add.w	ip, r1, r0
 800a410:	db02      	blt.n	800a418 <__ieee754_sqrt+0xe4>
 800a412:	d113      	bne.n	800a43c <__ieee754_sqrt+0x108>
 800a414:	45a4      	cmp	ip, r4
 800a416:	d811      	bhi.n	800a43c <__ieee754_sqrt+0x108>
 800a418:	f1bc 0f00 	cmp.w	ip, #0
 800a41c:	eb0c 0100 	add.w	r1, ip, r0
 800a420:	da42      	bge.n	800a4a8 <__ieee754_sqrt+0x174>
 800a422:	2900      	cmp	r1, #0
 800a424:	db40      	blt.n	800a4a8 <__ieee754_sqrt+0x174>
 800a426:	f102 0e01 	add.w	lr, r2, #1
 800a42a:	1a9b      	subs	r3, r3, r2
 800a42c:	4672      	mov	r2, lr
 800a42e:	45a4      	cmp	ip, r4
 800a430:	bf88      	it	hi
 800a432:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a436:	eba4 040c 	sub.w	r4, r4, ip
 800a43a:	4405      	add	r5, r0
 800a43c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800a440:	f1ba 0a01 	subs.w	sl, sl, #1
 800a444:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a448:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a44c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a450:	d1db      	bne.n	800a40a <__ieee754_sqrt+0xd6>
 800a452:	431c      	orrs	r4, r3
 800a454:	d01a      	beq.n	800a48c <__ieee754_sqrt+0x158>
 800a456:	4c20      	ldr	r4, [pc, #128]	@ (800a4d8 <__ieee754_sqrt+0x1a4>)
 800a458:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800a4dc <__ieee754_sqrt+0x1a8>
 800a45c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a460:	e9db 2300 	ldrd	r2, r3, [fp]
 800a464:	f7f5 fe98 	bl	8000198 <__aeabi_dsub>
 800a468:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4640      	mov	r0, r8
 800a472:	4649      	mov	r1, r9
 800a474:	f7f6 fac4 	bl	8000a00 <__aeabi_dcmple>
 800a478:	b140      	cbz	r0, 800a48c <__ieee754_sqrt+0x158>
 800a47a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a47e:	e9db 2300 	ldrd	r2, r3, [fp]
 800a482:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a486:	d111      	bne.n	800a4ac <__ieee754_sqrt+0x178>
 800a488:	4655      	mov	r5, sl
 800a48a:	3601      	adds	r6, #1
 800a48c:	1072      	asrs	r2, r6, #1
 800a48e:	086b      	lsrs	r3, r5, #1
 800a490:	07f1      	lsls	r1, r6, #31
 800a492:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a496:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a49a:	bf48      	it	mi
 800a49c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800a4a6:	e757      	b.n	800a358 <__ieee754_sqrt+0x24>
 800a4a8:	4696      	mov	lr, r2
 800a4aa:	e7be      	b.n	800a42a <__ieee754_sqrt+0xf6>
 800a4ac:	f7f5 fe76 	bl	800019c <__adddf3>
 800a4b0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f6 fa96 	bl	80009ec <__aeabi_dcmplt>
 800a4c0:	b120      	cbz	r0, 800a4cc <__ieee754_sqrt+0x198>
 800a4c2:	1ca8      	adds	r0, r5, #2
 800a4c4:	bf08      	it	eq
 800a4c6:	3601      	addeq	r6, #1
 800a4c8:	3502      	adds	r5, #2
 800a4ca:	e7df      	b.n	800a48c <__ieee754_sqrt+0x158>
 800a4cc:	1c6b      	adds	r3, r5, #1
 800a4ce:	f023 0501 	bic.w	r5, r3, #1
 800a4d2:	e7db      	b.n	800a48c <__ieee754_sqrt+0x158>
 800a4d4:	7ff00000 	.word	0x7ff00000
 800a4d8:	200001e8 	.word	0x200001e8
 800a4dc:	200001e0 	.word	0x200001e0

0800a4e0 <_init>:
 800a4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e2:	bf00      	nop
 800a4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e6:	bc08      	pop	{r3}
 800a4e8:	469e      	mov	lr, r3
 800a4ea:	4770      	bx	lr

0800a4ec <_fini>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	bf00      	nop
 800a4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f2:	bc08      	pop	{r3}
 800a4f4:	469e      	mov	lr, r3
 800a4f6:	4770      	bx	lr
