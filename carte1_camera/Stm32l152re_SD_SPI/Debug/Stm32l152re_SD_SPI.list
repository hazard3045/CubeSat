
Stm32l152re_SD_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dac  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e80  08009ef0  08009ef0  0000aef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad70  0800ad70  0000c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad70  0800ad70  0000bd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad78  0800ad78  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad78  0800ad78  0000bd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad7c  0800ad7c  0000bd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800ad80  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  200001ec  0800af6c  0000c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  0800af6c  0000c948  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0ea  00000000  00000000  0000c215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b1  00000000  00000000  0001b2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0001dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c45  00000000  00000000  0001eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ff8  00000000  00000000  0001f8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014454  00000000  00000000  000388e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f859  00000000  00000000  0004cd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc592  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053cc  00000000  00000000  000dc5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e19a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	08009ed4 	.word	0x08009ed4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	08009ed4 	.word	0x08009ed4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <ArduCAM_Init>:
byte sensor_addr = 0;
byte m_fmt = JPEG;
uint32_t length = 0;
uint8_t is_header = false ;

void ArduCAM_Init(byte model) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
    if (model == OV2640) {
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b05      	cmp	r3, #5
 8000ac6:	d11a      	bne.n	8000afe <ArduCAM_Init+0x46>
        // Réinitialisation du capteur
        I2C_WriteReg8(0xFF, 0x01);
 8000ac8:	2101      	movs	r1, #1
 8000aca:	20ff      	movs	r0, #255	@ 0xff
 8000acc:	f000 f9c4 	bl	8000e58 <I2C_WriteReg8>
        I2C_WriteReg8(0x12, 0x80);
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	2012      	movs	r0, #18
 8000ad4:	f000 f9c0 	bl	8000e58 <I2C_WriteReg8>
        HAL_Delay(100);
 8000ad8:	2064      	movs	r0, #100	@ 0x64
 8000ada:	f001 fccb 	bl	8002474 <HAL_Delay>

        // Initialisation JPEG
        I2C_WriteRegs8(OV2640_JPEG_INIT);
 8000ade:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <ArduCAM_Init+0x58>)
 8000ae0:	f000 f9dc 	bl	8000e9c <I2C_WriteRegs8>
        I2C_WriteRegs8(OV2640_YUV422);
 8000ae4:	480b      	ldr	r0, [pc, #44]	@ (8000b14 <ArduCAM_Init+0x5c>)
 8000ae6:	f000 f9d9 	bl	8000e9c <I2C_WriteRegs8>
        I2C_WriteRegs8(OV2640_JPEG);
 8000aea:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <ArduCAM_Init+0x60>)
 8000aec:	f000 f9d6 	bl	8000e9c <I2C_WriteRegs8>

        // Configuration de la résolution %%%%%%%%
        // A MODIFIER ABSOLUMENT AVANT CHAQUE PRISE DE PHOTO
       // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        I2C_WriteRegs8(OV2640_1600x1200_JPEG);
 8000af0:	480a      	ldr	r0, [pc, #40]	@ (8000b1c <ArduCAM_Init+0x64>)
 8000af2:	f000 f9d3 	bl	8000e9c <I2C_WriteRegs8>
        printf("Caméra OV2640 initialisée.\n");
 8000af6:	480a      	ldr	r0, [pc, #40]	@ (8000b20 <ArduCAM_Init+0x68>)
 8000af8:	f007 f950 	bl	8007d9c <puts>
    } else {
        printf("Modèle de caméra non pris en charge.\n");
        while (1);
    }
}
 8000afc:	e004      	b.n	8000b08 <ArduCAM_Init+0x50>
        printf("Modèle de caméra non pris en charge.\n");
 8000afe:	4809      	ldr	r0, [pc, #36]	@ (8000b24 <ArduCAM_Init+0x6c>)
 8000b00:	f007 f94c 	bl	8007d9c <puts>
        while (1);
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <ArduCAM_Init+0x4c>
}
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	0800a4d0 	.word	0x0800a4d0
 8000b14:	0800a650 	.word	0x0800a650
 8000b18:	0800a664 	.word	0x0800a664
 8000b1c:	0800a904 	.word	0x0800a904
 8000b20:	08009ef0 	.word	0x08009ef0
 8000b24:	08009f10 	.word	0x08009f10

08000b28 <set_format>:



void set_format(byte fmt)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if (fmt == BMP)
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d103      	bne.n	8000b40 <set_format+0x18>
    m_fmt = BMP;
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <set_format+0x28>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
  else
    m_fmt = JPEG;
}
 8000b3e:	e002      	b.n	8000b46 <set_format+0x1e>
    m_fmt = JPEG;
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <set_format+0x28>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	20000000 	.word	0x20000000

08000b54 <bus_read>:

uint8_t bus_read(uint8_t address) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
    uint8_t receivedByte = 0; // Stocker la donnée reçue
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]

    cs_low(); // Activer la communication SPI
 8000b62:	f000 f96d 	bl	8000e40 <cs_low>

    // Envoyer l'adresse (bit MSB à 0 pour lecture)
    HAL_SPI_Transmit(&hspi1, &address, 1, HAL_MAX_DELAY);
 8000b66:	1df9      	adds	r1, r7, #7
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4809      	ldr	r0, [pc, #36]	@ (8000b94 <bus_read+0x40>)
 8000b70:	f003 f912 	bl	8003d98 <HAL_SPI_Transmit>

    // Lire la donnée
    HAL_SPI_Receive(&hspi1, &receivedByte, 1, HAL_MAX_DELAY);
 8000b74:	f107 010f 	add.w	r1, r7, #15
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <bus_read+0x40>)
 8000b80:	f003 fa3e 	bl	8004000 <HAL_SPI_Receive>

    cs_high(); // Désactiver la communication SPI
 8000b84:	f000 f950 	bl	8000e28 <cs_high>

    return receivedByte; // Retourner la valeur lue
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000260 	.word	0x20000260

08000b98 <bus_write>:


uint8_t bus_write(uint8_t address, uint8_t value) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71bb      	strb	r3, [r7, #6]
    cs_low(); // Activer la communication SPI
 8000ba8:	f000 f94a 	bl	8000e40 <cs_low>

    // Préparer l'adresse avec le bit d'écriture (MSB = 1)
    uint8_t writeAddress = address | 0x80;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	73fb      	strb	r3, [r7, #15]

    // Envoyer l'adresse
    HAL_SPI_Transmit(&hspi1, &writeAddress, 1, HAL_MAX_DELAY);
 8000bb6:	f107 010f 	add.w	r1, r7, #15
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <bus_write+0x4c>)
 8000bc2:	f003 f8e9 	bl	8003d98 <HAL_SPI_Transmit>

    // Envoyer la valeur
    HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8000bc6:	1db9      	adds	r1, r7, #6
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <bus_write+0x4c>)
 8000bd0:	f003 f8e2 	bl	8003d98 <HAL_SPI_Transmit>

    cs_high(); // Désactiver la communication SPI
 8000bd4:	f000 f928 	bl	8000e28 <cs_high>

    return 1; // Retourner un succès
 8000bd8:	2301      	movs	r3, #1
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000260 	.word	0x20000260

08000be8 <read_reg>:


uint8_t read_reg(uint8_t addr)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	data = bus_read(addr & 0x7F);
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ffaa 	bl	8000b54 <bus_read>
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
	return data;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <write_reg>:


void write_reg(uint8_t addr, uint8_t data)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	460a      	mov	r2, r1
 8000c18:	71fb      	strb	r3, [r7, #7]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	71bb      	strb	r3, [r7, #6]
	 bus_write(addr | 0x80, data); 
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	79ba      	ldrb	r2, [r7, #6]
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ffb4 	bl	8000b98 <bus_write>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <set_fifo_burst>:
{
	uint8_t data;
	data = bus_read(SINGLE_FIFO_READ);
	return data;
}
void set_fifo_burst() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
    cs_low(); // Activer la communication SPI
 8000c3e:	f000 f8ff 	bl	8000e40 <cs_low>

    // Envoyer la commande BURST_FIFO_READ
    uint8_t command = BURST_FIFO_READ;
 8000c42:	233c      	movs	r3, #60	@ 0x3c
 8000c44:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 8000c46:	1df9      	adds	r1, r7, #7
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <set_fifo_burst+0x28>)
 8000c50:	f003 f8a2 	bl	8003d98 <HAL_SPI_Transmit>

    cs_high(); // Désactiver la communication SPI
 8000c54:	f000 f8e8 	bl	8000e28 <cs_high>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000260 	.word	0x20000260

08000c64 <flush_fifo>:

void flush_fifo(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f7ff ffcf 	bl	8000c0e <write_reg>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <start_capture>:

void start_capture(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);
 8000c78:	2102      	movs	r1, #2
 8000c7a:	2004      	movs	r0, #4
 8000c7c:	f7ff ffc7 	bl	8000c0e <write_reg>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <clear_fifo_flag>:

void clear_fifo_flag(void )
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2004      	movs	r0, #4
 8000c8c:	f7ff ffbf 	bl	8000c0e <write_reg>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <read_fifo_length>:

uint32_t read_fifo_length(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
    uint32_t len1 = read_reg(FIFO_SIZE1); // LSB
 8000c9a:	2042      	movs	r0, #66	@ 0x42
 8000c9c:	f7ff ffa4 	bl	8000be8 <read_reg>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60fb      	str	r3, [r7, #12]
    uint32_t len2 = read_reg(FIFO_SIZE2); // Middle byte
 8000ca4:	2043      	movs	r0, #67	@ 0x43
 8000ca6:	f7ff ff9f 	bl	8000be8 <read_reg>
 8000caa:	4603      	mov	r3, r0
 8000cac:	60bb      	str	r3, [r7, #8]
    uint32_t len3 = read_reg(FIFO_SIZE3) & 0x7F; // MSB (23 bits max)
 8000cae:	2044      	movs	r0, #68	@ 0x44
 8000cb0:	f7ff ff9a 	bl	8000be8 <read_reg>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000cba:	607b      	str	r3, [r7, #4]

    uint32_t length = ((len3 << 16) | (len2 << 8) | len1) & 0x07FFFFF; // Combiner les 23 bits
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	041a      	lsls	r2, r3, #16
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	021b      	lsls	r3, r3, #8
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000cce:	603b      	str	r3, [r7, #0]
    return length;
 8000cd0:	683b      	ldr	r3, [r7, #0]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <OV2640_set_JPEG_size>:
  }
}


void OV2640_set_JPEG_size(uint8_t size)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	switch(size)
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	d839      	bhi.n	8000d60 <OV2640_set_JPEG_size+0x84>
 8000cec:	a201      	add	r2, pc, #4	@ (adr r2, 8000cf4 <OV2640_set_JPEG_size+0x18>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d19 	.word	0x08000d19
 8000cf8:	08000d21 	.word	0x08000d21
 8000cfc:	08000d29 	.word	0x08000d29
 8000d00:	08000d31 	.word	0x08000d31
 8000d04:	08000d39 	.word	0x08000d39
 8000d08:	08000d41 	.word	0x08000d41
 8000d0c:	08000d49 	.word	0x08000d49
 8000d10:	08000d51 	.word	0x08000d51
 8000d14:	08000d59 	.word	0x08000d59
	{
		case OV2640_160x120:
			wrSensorRegs8_8(OV2640_160x120_JPEG);
 8000d18:	4815      	ldr	r0, [pc, #84]	@ (8000d70 <OV2640_set_JPEG_size+0x94>)
 8000d1a:	f000 f85d 	bl	8000dd8 <wrSensorRegs8_8>
			break;
 8000d1e:	e023      	b.n	8000d68 <OV2640_set_JPEG_size+0x8c>
		case OV2640_176x144:
			wrSensorRegs8_8(OV2640_176x144_JPEG);
 8000d20:	4814      	ldr	r0, [pc, #80]	@ (8000d74 <OV2640_set_JPEG_size+0x98>)
 8000d22:	f000 f859 	bl	8000dd8 <wrSensorRegs8_8>
			break;
 8000d26:	e01f      	b.n	8000d68 <OV2640_set_JPEG_size+0x8c>
		case OV2640_320x240:
			wrSensorRegs8_8(OV2640_320x240_JPEG);
 8000d28:	4813      	ldr	r0, [pc, #76]	@ (8000d78 <OV2640_set_JPEG_size+0x9c>)
 8000d2a:	f000 f855 	bl	8000dd8 <wrSensorRegs8_8>
			break;
 8000d2e:	e01b      	b.n	8000d68 <OV2640_set_JPEG_size+0x8c>
		case OV2640_352x288:
	  	wrSensorRegs8_8(OV2640_352x288_JPEG);
 8000d30:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <OV2640_set_JPEG_size+0xa0>)
 8000d32:	f000 f851 	bl	8000dd8 <wrSensorRegs8_8>
			break;
 8000d36:	e017      	b.n	8000d68 <OV2640_set_JPEG_size+0x8c>
		case OV2640_640x480:
			wrSensorRegs8_8(OV2640_640x480_JPEG);
 8000d38:	4811      	ldr	r0, [pc, #68]	@ (8000d80 <OV2640_set_JPEG_size+0xa4>)
 8000d3a:	f000 f84d 	bl	8000dd8 <wrSensorRegs8_8>
			break;
 8000d3e:	e013      	b.n	8000d68 <OV2640_set_JPEG_size+0x8c>
		case OV2640_800x600:
			wrSensorRegs8_8(OV2640_800x600_JPEG);
 8000d40:	4810      	ldr	r0, [pc, #64]	@ (8000d84 <OV2640_set_JPEG_size+0xa8>)
 8000d42:	f000 f849 	bl	8000dd8 <wrSensorRegs8_8>
			break;
 8000d46:	e00f      	b.n	8000d68 <OV2640_set_JPEG_size+0x8c>
		case OV2640_1024x768:
			wrSensorRegs8_8(OV2640_1024x768_JPEG);
 8000d48:	480f      	ldr	r0, [pc, #60]	@ (8000d88 <OV2640_set_JPEG_size+0xac>)
 8000d4a:	f000 f845 	bl	8000dd8 <wrSensorRegs8_8>
			break;
 8000d4e:	e00b      	b.n	8000d68 <OV2640_set_JPEG_size+0x8c>
		case OV2640_1280x1024:
			wrSensorRegs8_8(OV2640_1280x1024_JPEG);
 8000d50:	480e      	ldr	r0, [pc, #56]	@ (8000d8c <OV2640_set_JPEG_size+0xb0>)
 8000d52:	f000 f841 	bl	8000dd8 <wrSensorRegs8_8>
			break;
 8000d56:	e007      	b.n	8000d68 <OV2640_set_JPEG_size+0x8c>
		case OV2640_1600x1200:
			wrSensorRegs8_8(OV2640_1600x1200_JPEG);
 8000d58:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <OV2640_set_JPEG_size+0xb4>)
 8000d5a:	f000 f83d 	bl	8000dd8 <wrSensorRegs8_8>
			break;
 8000d5e:	e003      	b.n	8000d68 <OV2640_set_JPEG_size+0x8c>
		default:
			wrSensorRegs8_8(OV2640_320x240_JPEG);
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <OV2640_set_JPEG_size+0x9c>)
 8000d62:	f000 f839 	bl	8000dd8 <wrSensorRegs8_8>
			break;
 8000d66:	bf00      	nop
	}
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	0800a678 	.word	0x0800a678
 8000d74:	0800a6c8 	.word	0x0800a6c8
 8000d78:	0800a718 	.word	0x0800a718
 8000d7c:	0800a768 	.word	0x0800a768
 8000d80:	0800a7b8 	.word	0x0800a7b8
 8000d84:	0800a80c 	.word	0x0800a80c
 8000d88:	0800a860 	.word	0x0800a860
 8000d8c:	0800a8b0 	.word	0x0800a8b0
 8000d90:	0800a904 	.word	0x0800a904

08000d94 <wrSensorReg8_8>:
//	}
//	sccb_bus_stop();
//	return 0;
//}

byte wrSensorReg8_8(uint8_t regID, uint8_t regData) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
    cs_low(); // Activer la communication SPI
 8000da4:	f000 f84c 	bl	8000e40 <cs_low>
    uint8_t cmd[] = { regID & 0x7F, regData }; // Adresse + donnée
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	733b      	strb	r3, [r7, #12]
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, cmd, 2, HAL_MAX_DELAY); // Transmettre les données
 8000db6:	f107 010c 	add.w	r1, r7, #12
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <wrSensorReg8_8+0x40>)
 8000dc2:	f002 ffe9 	bl	8003d98 <HAL_SPI_Transmit>
    cs_high(); // Désactiver la communication SPI
 8000dc6:	f000 f82f 	bl	8000e28 <cs_high>
    return 0; // Succès
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000260 	.word	0x20000260

08000dd8 <wrSensorRegs8_8>:
//  }

//  return err;
//}

int wrSensorRegs8_8(const struct sensor_reg reglist[]) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    int err = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
    const struct sensor_reg *next = reglist;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	60fb      	str	r3, [r7, #12]

    while ((next->reg != 0xFF) || (next->val != 0xFF)) {
 8000de8:	e011      	b.n	8000e0e <wrSensorRegs8_8+0x36>
        err = wrSensorReg8_8(next->reg, next->val);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	785b      	ldrb	r3, [r3, #1]
 8000df2:	4619      	mov	r1, r3
 8000df4:	4610      	mov	r0, r2
 8000df6:	f7ff ffcd 	bl	8000d94 <wrSensorReg8_8>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60bb      	str	r3, [r7, #8]
        if (err) {
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <wrSensorRegs8_8+0x30>
            return err; // Retourne une erreur si une écriture échoue
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	e00b      	b.n	8000e20 <wrSensorRegs8_8+0x48>
        }
        next++;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	60fb      	str	r3, [r7, #12]
    while ((next->reg != 0xFF) || (next->val != 0xFF)) {
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2bff      	cmp	r3, #255	@ 0xff
 8000e14:	d1e9      	bne.n	8000dea <wrSensorRegs8_8+0x12>
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	785b      	ldrb	r3, [r3, #1]
 8000e1a:	2bff      	cmp	r3, #255	@ 0xff
 8000e1c:	d1e5      	bne.n	8000dea <wrSensorRegs8_8+0x12>
    }
    return 0; // Succès
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <cs_high>:



static void cs_high()
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ARDUCAM_SPI_CS_PIN_PORT, ARDUCAM_SPI_CS_PIN_NUMBER, SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2110      	movs	r1, #16
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <cs_high+0x14>)
 8000e32:	f001 fdb5 	bl	80029a0 <HAL_GPIO_WritePin>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020000 	.word	0x40020000

08000e40 <cs_low>:

static void cs_low()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ARDUCAM_SPI_CS_PIN_PORT, ARDUCAM_SPI_CS_PIN_NUMBER, RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2110      	movs	r1, #16
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <cs_low+0x14>)
 8000e4a:	f001 fda9 	bl	80029a0 <HAL_GPIO_WritePin>
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40020000 	.word	0x40020000

08000e58 <I2C_WriteReg8>:
        return 1; // Erreur
    }
    return 0; // Succès
}

uint8_t I2C_WriteReg8(uint8_t regID, uint8_t regData) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460a      	mov	r2, r1
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	4613      	mov	r3, r2
 8000e66:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2] = {regID, regData};
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	733b      	strb	r3, [r7, #12]
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, OV2640_I2C_ADDRESS << 1, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000e70:	f107 020c 	add.w	r2, r7, #12
 8000e74:	f04f 33ff 	mov.w	r3, #4294967295
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	2160      	movs	r1, #96	@ 0x60
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <I2C_WriteReg8+0x40>)
 8000e80:	f001 feda 	bl	8002c38 <HAL_I2C_Master_Transmit>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <I2C_WriteReg8+0x36>
        return 1; // Erreur
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <I2C_WriteReg8+0x38>
    }
    return 0; // Succès
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	2000020c 	.word	0x2000020c

08000e9c <I2C_WriteRegs8>:

uint8_t I2C_WriteRegs8(const struct sensor_reg reglist[]) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    const struct sensor_reg *reg = reglist;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	60fb      	str	r3, [r7, #12]
    while (!(reg->reg == 0xFF && reg->val == 0xFF)) {
 8000ea8:	e012      	b.n	8000ed0 <I2C_WriteRegs8+0x34>
        if (I2C_WriteReg8(reg->reg, reg->val) != 0) {
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	f7ff ffcf 	bl	8000e58 <I2C_WriteReg8>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <I2C_WriteRegs8+0x28>
            return 1; // Erreur
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e00e      	b.n	8000ee2 <I2C_WriteRegs8+0x46>
        }
        HAL_Delay(10); // Pause entre les écritures
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f001 fad5 	bl	8002474 <HAL_Delay>
        reg++;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3302      	adds	r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
    while (!(reg->reg == 0xFF && reg->val == 0xFF)) {
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2bff      	cmp	r3, #255	@ 0xff
 8000ed6:	d1e8      	bne.n	8000eaa <I2C_WriteRegs8+0xe>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	2bff      	cmp	r3, #255	@ 0xff
 8000ede:	d1e4      	bne.n	8000eaa <I2C_WriteRegs8+0xe>
    }
    return 0; // Succès
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <read_fifo_burst>:

uint32_t read_fifo_burst(uint8_t *buffer, uint32_t length) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    if (buffer == NULL || length == 0) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <read_fifo_burst+0x16>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <read_fifo_burst+0x1a>
        return 0; // Validation des arguments
 8000f02:	2300      	movs	r3, #0
 8000f04:	e01d      	b.n	8000f42 <read_fifo_burst+0x56>
    }

    // Activer la communication SPI (CS bas)
    cs_low();
 8000f06:	f7ff ff9b 	bl	8000e40 <cs_low>

    // Envoyer la commande de lecture burst
    uint8_t command = BURST_FIFO_READ;
 8000f0a:	233c      	movs	r3, #60	@ 0x3c
 8000f0c:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 8000f0e:	f107 010f 	add.w	r1, r7, #15
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	2201      	movs	r2, #1
 8000f18:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <read_fifo_burst+0x60>)
 8000f1a:	f002 ff3d 	bl	8003d98 <HAL_SPI_Transmit>

    // Lire les données en burst
    if (HAL_SPI_Receive(&hspi1, buffer, length, HAL_MAX_DELAY) != HAL_OK) {
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4808      	ldr	r0, [pc, #32]	@ (8000f4c <read_fifo_burst+0x60>)
 8000f2a:	f003 f869 	bl	8004000 <HAL_SPI_Receive>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <read_fifo_burst+0x50>
        cs_high(); // Désactiver la communication SPI (CS haut)
 8000f34:	f7ff ff78 	bl	8000e28 <cs_high>
        return 0; // En cas d'échec
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e002      	b.n	8000f42 <read_fifo_burst+0x56>
    }

    // Désactiver la communication SPI (CS haut)
    cs_high();
 8000f3c:	f7ff ff74 	bl	8000e28 <cs_high>

    return length; // Retourner le nombre d'octets lus
 8000f40:	683b      	ldr	r3, [r7, #0]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000260 	.word	0x20000260

08000f50 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2101      	movs	r1, #1
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <SELECT+0x14>)
 8000f5a:	f001 fd21 	bl	80029a0 <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020000 	.word	0x40020000

08000f68 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <DESELECT+0x14>)
 8000f72:	f001 fd15 	bl	80029a0 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020000 	.word	0x40020000

08000f80 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000f8a:	bf00      	nop
 8000f8c:	4807      	ldr	r0, [pc, #28]	@ (8000fac <SPI_TxByte+0x2c>)
 8000f8e:	f003 fae2 	bl	8004556 <HAL_SPI_GetState>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d1f9      	bne.n	8000f8c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000f98:	1df9      	adds	r1, r7, #7
 8000f9a:	2364      	movs	r3, #100	@ 0x64
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4803      	ldr	r0, [pc, #12]	@ (8000fac <SPI_TxByte+0x2c>)
 8000fa0:	f002 fefa 	bl	8003d98 <HAL_SPI_Transmit>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200002b8 	.word	0x200002b8

08000fb0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
 8000fb8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000fbe:	bf00      	nop
 8000fc0:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <SPI_RxByte+0x38>)
 8000fc2:	f003 fac8 	bl	8004556 <HAL_SPI_GetState>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d1f9      	bne.n	8000fc0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000fcc:	1dba      	adds	r2, r7, #6
 8000fce:	1df9      	adds	r1, r7, #7
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <SPI_RxByte+0x38>)
 8000fd8:	f003 f91b 	bl	8004212 <HAL_SPI_TransmitReceive>
  
  return data;
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200002b8 	.word	0x200002b8

08000fec <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000ff4:	f7ff ffdc 	bl	8000fb0 <SPI_RxByte>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	701a      	strb	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <SD_ReadyWait+0x34>)
 8001010:	2232      	movs	r2, #50	@ 0x32
 8001012:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001014:	f7ff ffcc 	bl	8000fb0 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001018:	f7ff ffca 	bl	8000fb0 <SPI_RxByte>
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2bff      	cmp	r3, #255	@ 0xff
 8001024:	d004      	beq.n	8001030 <SD_ReadyWait+0x28>
 8001026:	4b05      	ldr	r3, [pc, #20]	@ (800103c <SD_ReadyWait+0x34>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f3      	bne.n	8001018 <SD_ReadyWait+0x10>
  
  return res;
 8001030:	79fb      	ldrb	r3, [r7, #7]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200007b6 	.word	0x200007b6

08001040 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001046:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800104c:	f7ff ff8c 	bl	8000f68 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	e005      	b.n	8001062 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001056:	20ff      	movs	r0, #255	@ 0xff
 8001058:	f7ff ff92 	bl	8000f80 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	3301      	adds	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2b09      	cmp	r3, #9
 8001066:	ddf6      	ble.n	8001056 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8001068:	f7ff ff72 	bl	8000f50 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800106c:	2340      	movs	r3, #64	@ 0x40
 800106e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001080:	2395      	movs	r3, #149	@ 0x95
 8001082:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e009      	b.n	800109e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800108a:	1d3a      	adds	r2, r7, #4
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff74 	bl	8000f80 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3301      	adds	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	ddf2      	ble.n	800108a <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80010a4:	e002      	b.n	80010ac <SD_PowerOn+0x6c>
  {
    Count--;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80010ac:	f7ff ff80 	bl	8000fb0 <SPI_RxByte>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d002      	beq.n	80010bc <SD_PowerOn+0x7c>
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f4      	bne.n	80010a6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80010bc:	f7ff ff54 	bl	8000f68 <DESELECT>
  SPI_TxByte(0XFF);
 80010c0:	20ff      	movs	r0, #255	@ 0xff
 80010c2:	f7ff ff5d 	bl	8000f80 <SPI_TxByte>
  
  PowerFlag = 1;
 80010c6:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <SD_PowerOn+0x94>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000209 	.word	0x20000209

080010d8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80010dc:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <SD_PowerOff+0x14>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000209 	.word	0x20000209

080010f0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80010f4:	4b02      	ldr	r3, [pc, #8]	@ (8001100 <SD_CheckPower+0x10>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000209 	.word	0x20000209

08001104 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <SD_RxDataBlock+0x68>)
 8001110:	220a      	movs	r2, #10
 8001112:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001114:	f7ff ff4c 	bl	8000fb0 <SPI_RxByte>
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2bff      	cmp	r3, #255	@ 0xff
 8001120:	d104      	bne.n	800112c <SD_RxDataBlock+0x28>
 8001122:	4b12      	ldr	r3, [pc, #72]	@ (800116c <SD_RxDataBlock+0x68>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f3      	bne.n	8001114 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001130:	d001      	beq.n	8001136 <SD_RxDataBlock+0x32>
    return FALSE;
 8001132:	2300      	movs	r3, #0
 8001134:	e016      	b.n	8001164 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff55 	bl	8000fec <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff4f 	bl	8000fec <SPI_RxBytePtr>
  } while(btr -= 2);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3b02      	subs	r3, #2
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1ed      	bne.n	8001136 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800115a:	f7ff ff29 	bl	8000fb0 <SPI_RxByte>
  SPI_RxByte();
 800115e:	f7ff ff27 	bl	8000fb0 <SPI_RxByte>
  
  return TRUE;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200007b5 	.word	0x200007b5

08001170 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001180:	f7ff ff42 	bl	8001008 <SD_ReadyWait>
 8001184:	4603      	mov	r3, r0
 8001186:	2bff      	cmp	r3, #255	@ 0xff
 8001188:	d001      	beq.n	800118e <SD_TxDataBlock+0x1e>
    return FALSE;
 800118a:	2300      	movs	r3, #0
 800118c:	e040      	b.n	8001210 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fef5 	bl	8000f80 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	2bfd      	cmp	r3, #253	@ 0xfd
 800119a:	d031      	beq.n	8001200 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fee9 	bl	8000f80 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fee2 	bl	8000f80 <SPI_TxByte>
    } while (--wc);
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	3b01      	subs	r3, #1
 80011c0:	73bb      	strb	r3, [r7, #14]
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1eb      	bne.n	80011a0 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80011c8:	f7ff fef2 	bl	8000fb0 <SPI_RxByte>
    SPI_RxByte();
 80011cc:	f7ff fef0 	bl	8000fb0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80011d0:	e00b      	b.n	80011ea <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80011d2:	f7ff feed 	bl	8000fb0 <SPI_RxByte>
 80011d6:	4603      	mov	r3, r0
 80011d8:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d006      	beq.n	80011f2 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80011e4:	7b7b      	ldrb	r3, [r7, #13]
 80011e6:	3301      	adds	r3, #1
 80011e8:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	2b40      	cmp	r3, #64	@ 0x40
 80011ee:	d9f0      	bls.n	80011d2 <SD_TxDataBlock+0x62>
 80011f0:	e000      	b.n	80011f4 <SD_TxDataBlock+0x84>
        break;
 80011f2:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80011f4:	bf00      	nop
 80011f6:	f7ff fedb 	bl	8000fb0 <SPI_RxByte>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0fa      	beq.n	80011f6 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	2b05      	cmp	r3, #5
 8001208:	d101      	bne.n	800120e <SD_TxDataBlock+0x9e>
    return TRUE;
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001224:	f7ff fef0 	bl	8001008 <SD_ReadyWait>
 8001228:	4603      	mov	r3, r0
 800122a:	2bff      	cmp	r3, #255	@ 0xff
 800122c:	d001      	beq.n	8001232 <SD_SendCmd+0x1a>
    return 0xFF;
 800122e:	23ff      	movs	r3, #255	@ 0xff
 8001230:	e040      	b.n	80012b4 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fea3 	bl	8000f80 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	0e1b      	lsrs	r3, r3, #24
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fe9d 	bl	8000f80 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	0c1b      	lsrs	r3, r3, #16
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe97 	bl	8000f80 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe91 	bl	8000f80 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fe8c 	bl	8000f80 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b40      	cmp	r3, #64	@ 0x40
 8001270:	d101      	bne.n	8001276 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001272:	2395      	movs	r3, #149	@ 0x95
 8001274:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b48      	cmp	r3, #72	@ 0x48
 800127a:	d101      	bne.n	8001280 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800127c:	2387      	movs	r3, #135	@ 0x87
 800127e:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fe7c 	bl	8000f80 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b4c      	cmp	r3, #76	@ 0x4c
 800128c:	d101      	bne.n	8001292 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800128e:	f7ff fe8f 	bl	8000fb0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001292:	230a      	movs	r3, #10
 8001294:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001296:	f7ff fe8b 	bl	8000fb0 <SPI_RxByte>
 800129a:	4603      	mov	r3, r0
 800129c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800129e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da05      	bge.n	80012b2 <SD_SendCmd+0x9a>
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	73bb      	strb	r3, [r7, #14]
 80012ac:	7bbb      	ldrb	r3, [r7, #14]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f1      	bne.n	8001296 <SD_SendCmd+0x7e>
  
  return res;
 80012b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0d5      	b.n	800147c <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80012d0:	4b6c      	ldr	r3, [pc, #432]	@ (8001484 <SD_disk_initialize+0x1c8>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <SD_disk_initialize+0x2a>
    return Stat;        
 80012de:	4b69      	ldr	r3, [pc, #420]	@ (8001484 <SD_disk_initialize+0x1c8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	e0ca      	b.n	800147c <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80012e6:	f7ff feab 	bl	8001040 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80012ea:	f7ff fe31 	bl	8000f50 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80012f2:	2100      	movs	r1, #0
 80012f4:	2040      	movs	r0, #64	@ 0x40
 80012f6:	f7ff ff8f 	bl	8001218 <SD_SendCmd>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f040 80a5 	bne.w	800144c <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001302:	4b61      	ldr	r3, [pc, #388]	@ (8001488 <SD_disk_initialize+0x1cc>)
 8001304:	2264      	movs	r2, #100	@ 0x64
 8001306:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001308:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800130c:	2048      	movs	r0, #72	@ 0x48
 800130e:	f7ff ff83 	bl	8001218 <SD_SendCmd>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d158      	bne.n	80013ca <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e00c      	b.n	8001338 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800131e:	7bfc      	ldrb	r4, [r7, #15]
 8001320:	f7ff fe46 	bl	8000fb0 <SPI_RxByte>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	f104 0310 	add.w	r3, r4, #16
 800132c:	443b      	add	r3, r7
 800132e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	3301      	adds	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d9ef      	bls.n	800131e <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800133e:	7abb      	ldrb	r3, [r7, #10]
 8001340:	2b01      	cmp	r3, #1
 8001342:	f040 8083 	bne.w	800144c <SD_disk_initialize+0x190>
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	2baa      	cmp	r3, #170	@ 0xaa
 800134a:	d17f      	bne.n	800144c <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800134c:	2100      	movs	r1, #0
 800134e:	2077      	movs	r0, #119	@ 0x77
 8001350:	f7ff ff62 	bl	8001218 <SD_SendCmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d807      	bhi.n	800136a <SD_disk_initialize+0xae>
 800135a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800135e:	2069      	movs	r0, #105	@ 0x69
 8001360:	f7ff ff5a 	bl	8001218 <SD_SendCmd>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800136a:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <SD_disk_initialize+0x1cc>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1eb      	bne.n	800134c <SD_disk_initialize+0x90>
 8001374:	e000      	b.n	8001378 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001376:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001378:	4b43      	ldr	r3, [pc, #268]	@ (8001488 <SD_disk_initialize+0x1cc>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d064      	beq.n	800144c <SD_disk_initialize+0x190>
 8001382:	2100      	movs	r1, #0
 8001384:	207a      	movs	r0, #122	@ 0x7a
 8001386:	f7ff ff47 	bl	8001218 <SD_SendCmd>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d15d      	bne.n	800144c <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e00c      	b.n	80013b0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001396:	7bfc      	ldrb	r4, [r7, #15]
 8001398:	f7ff fe0a 	bl	8000fb0 <SPI_RxByte>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	f104 0310 	add.w	r3, r4, #16
 80013a4:	443b      	add	r3, r7
 80013a6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	3301      	adds	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d9ef      	bls.n	8001396 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80013b6:	7a3b      	ldrb	r3, [r7, #8]
 80013b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SD_disk_initialize+0x108>
 80013c0:	2306      	movs	r3, #6
 80013c2:	e000      	b.n	80013c6 <SD_disk_initialize+0x10a>
 80013c4:	2302      	movs	r3, #2
 80013c6:	73bb      	strb	r3, [r7, #14]
 80013c8:	e040      	b.n	800144c <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80013ca:	2100      	movs	r1, #0
 80013cc:	2077      	movs	r0, #119	@ 0x77
 80013ce:	f7ff ff23 	bl	8001218 <SD_SendCmd>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d808      	bhi.n	80013ea <SD_disk_initialize+0x12e>
 80013d8:	2100      	movs	r1, #0
 80013da:	2069      	movs	r0, #105	@ 0x69
 80013dc:	f7ff ff1c 	bl	8001218 <SD_SendCmd>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d801      	bhi.n	80013ea <SD_disk_initialize+0x12e>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e000      	b.n	80013ec <SD_disk_initialize+0x130>
 80013ea:	2301      	movs	r3, #1
 80013ec:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d10e      	bne.n	8001412 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80013f4:	2100      	movs	r1, #0
 80013f6:	2077      	movs	r0, #119	@ 0x77
 80013f8:	f7ff ff0e 	bl	8001218 <SD_SendCmd>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d80e      	bhi.n	8001420 <SD_disk_initialize+0x164>
 8001402:	2100      	movs	r1, #0
 8001404:	2069      	movs	r0, #105	@ 0x69
 8001406:	f7ff ff07 	bl	8001218 <SD_SendCmd>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d107      	bne.n	8001420 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001410:	e00d      	b.n	800142e <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001412:	2100      	movs	r1, #0
 8001414:	2041      	movs	r0, #65	@ 0x41
 8001416:	f7ff feff 	bl	8001218 <SD_SendCmd>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <SD_disk_initialize+0x1cc>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1e1      	bne.n	80013ee <SD_disk_initialize+0x132>
 800142a:	e000      	b.n	800142e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800142c:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <SD_disk_initialize+0x1cc>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <SD_disk_initialize+0x18c>
 8001438:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800143c:	2050      	movs	r0, #80	@ 0x50
 800143e:	f7ff feeb 	bl	8001218 <SD_SendCmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 800144c:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <SD_disk_initialize+0x1d0>)
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001452:	f7ff fd89 	bl	8000f68 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001456:	f7ff fdab 	bl	8000fb0 <SPI_RxByte>
  
  if (type) 
 800145a:	7bbb      	ldrb	r3, [r7, #14]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <SD_disk_initialize+0x1c8>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f023 0301 	bic.w	r3, r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <SD_disk_initialize+0x1c8>)
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e001      	b.n	8001476 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001472:	f7ff fe31 	bl	80010d8 <SD_PowerOff>
  }
  
  return Stat;
 8001476:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <SD_disk_initialize+0x1c8>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	20000001 	.word	0x20000001
 8001488:	200007b5 	.word	0x200007b5
 800148c:	20000208 	.word	0x20000208

08001490 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80014a0:	2301      	movs	r3, #1
 80014a2:	e002      	b.n	80014aa <SD_disk_status+0x1a>
  
  return Stat;
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <SD_disk_status+0x24>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000001 	.word	0x20000001

080014b8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <SD_disk_read+0x1c>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <SD_disk_read+0x20>
    return RES_PARERR;
 80014d4:	2304      	movs	r3, #4
 80014d6:	e051      	b.n	800157c <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <SD_disk_read+0xcc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SD_disk_read+0x32>
    return RES_NOTRDY;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e048      	b.n	800157c <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <SD_disk_read+0xd0>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	025b      	lsls	r3, r3, #9
 80014fa:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80014fc:	f7ff fd28 	bl	8000f50 <SELECT>
  
  if (count == 1) 
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d111      	bne.n	800152a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	2051      	movs	r0, #81	@ 0x51
 800150a:	f7ff fe85 	bl	8001218 <SD_SendCmd>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d129      	bne.n	8001568 <SD_disk_read+0xb0>
 8001514:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001518:	68b8      	ldr	r0, [r7, #8]
 800151a:	f7ff fdf3 	bl	8001104 <SD_RxDataBlock>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d021      	beq.n	8001568 <SD_disk_read+0xb0>
      count = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	e01e      	b.n	8001568 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	2052      	movs	r0, #82	@ 0x52
 800152e:	f7ff fe73 	bl	8001218 <SD_SendCmd>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d117      	bne.n	8001568 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001538:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800153c:	68b8      	ldr	r0, [r7, #8]
 800153e:	f7ff fde1 	bl	8001104 <SD_RxDataBlock>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00a      	beq.n	800155e <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800154e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	3b01      	subs	r3, #1
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ed      	bne.n	8001538 <SD_disk_read+0x80>
 800155c:	e000      	b.n	8001560 <SD_disk_read+0xa8>
          break;
 800155e:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001560:	2100      	movs	r1, #0
 8001562:	204c      	movs	r0, #76	@ 0x4c
 8001564:	f7ff fe58 	bl	8001218 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001568:	f7ff fcfe 	bl	8000f68 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800156c:	f7ff fd20 	bl	8000fb0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000001 	.word	0x20000001
 8001588:	20000208 	.word	0x20000208

0800158c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <SD_disk_write+0x1c>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <SD_disk_write+0x20>
    return RES_PARERR;
 80015a8:	2304      	movs	r3, #4
 80015aa:	e06b      	b.n	8001684 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80015ac:	4b37      	ldr	r3, [pc, #220]	@ (800168c <SD_disk_write+0x100>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SD_disk_write+0x32>
    return RES_NOTRDY;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e062      	b.n	8001684 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80015be:	4b33      	ldr	r3, [pc, #204]	@ (800168c <SD_disk_write+0x100>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SD_disk_write+0x44>
    return RES_WRPRT;
 80015cc:	2302      	movs	r3, #2
 80015ce:	e059      	b.n	8001684 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <SD_disk_write+0x104>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	025b      	lsls	r3, r3, #9
 80015e0:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80015e2:	f7ff fcb5 	bl	8000f50 <SELECT>
  
  if (count == 1) 
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d110      	bne.n	800160e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	2058      	movs	r0, #88	@ 0x58
 80015f0:	f7ff fe12 	bl	8001218 <SD_SendCmd>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d13a      	bne.n	8001670 <SD_disk_write+0xe4>
 80015fa:	21fe      	movs	r1, #254	@ 0xfe
 80015fc:	68b8      	ldr	r0, [r7, #8]
 80015fe:	f7ff fdb7 	bl	8001170 <SD_TxDataBlock>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d033      	beq.n	8001670 <SD_disk_write+0xe4>
      count = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	e030      	b.n	8001670 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <SD_disk_write+0x104>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800161a:	2100      	movs	r1, #0
 800161c:	2077      	movs	r0, #119	@ 0x77
 800161e:	f7ff fdfb 	bl	8001218 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001622:	6839      	ldr	r1, [r7, #0]
 8001624:	2057      	movs	r0, #87	@ 0x57
 8001626:	f7ff fdf7 	bl	8001218 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	2059      	movs	r0, #89	@ 0x59
 800162e:	f7ff fdf3 	bl	8001218 <SD_SendCmd>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d11b      	bne.n	8001670 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001638:	21fc      	movs	r1, #252	@ 0xfc
 800163a:	68b8      	ldr	r0, [r7, #8]
 800163c:	f7ff fd98 	bl	8001170 <SD_TxDataBlock>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00a      	beq.n	800165c <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800164c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ee      	bne.n	8001638 <SD_disk_write+0xac>
 800165a:	e000      	b.n	800165e <SD_disk_write+0xd2>
          break;
 800165c:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800165e:	21fd      	movs	r1, #253	@ 0xfd
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fd85 	bl	8001170 <SD_TxDataBlock>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <SD_disk_write+0xe4>
      {        
        count = 1;
 800166c:	2301      	movs	r3, #1
 800166e:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001670:	f7ff fc7a 	bl	8000f68 <DESELECT>
  SPI_RxByte();
 8001674:	f7ff fc9c 	bl	8000fb0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2db      	uxtb	r3, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000001 	.word	0x20000001
 8001690:	20000208 	.word	0x20000208

08001694 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b08b      	sub	sp, #44	@ 0x2c
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	603a      	str	r2, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	460b      	mov	r3, r1
 80016a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80016ae:	2304      	movs	r3, #4
 80016b0:	e119      	b.n	80018e6 <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d129      	bne.n	8001712 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d017      	beq.n	80016f6 <SD_disk_ioctl+0x62>
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	dc1f      	bgt.n	800170a <SD_disk_ioctl+0x76>
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <SD_disk_ioctl+0x40>
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d00b      	beq.n	80016ea <SD_disk_ioctl+0x56>
 80016d2:	e01a      	b.n	800170a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80016d4:	f7ff fd0c 	bl	80010f0 <SD_CheckPower>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80016de:	f7ff fcfb 	bl	80010d8 <SD_PowerOff>
      res = RES_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80016e8:	e0fb      	b.n	80018e2 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 80016ea:	f7ff fca9 	bl	8001040 <SD_PowerOn>
      res = RES_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80016f4:	e0f5      	b.n	80018e2 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	1c5c      	adds	r4, r3, #1
 80016fa:	f7ff fcf9 	bl	80010f0 <SD_CheckPower>
 80016fe:	4603      	mov	r3, r0
 8001700:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001708:	e0eb      	b.n	80018e2 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 800170a:	2304      	movs	r3, #4
 800170c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001710:	e0e7      	b.n	80018e2 <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001712:	4b77      	ldr	r3, [pc, #476]	@ (80018f0 <SD_disk_ioctl+0x25c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001720:	2303      	movs	r3, #3
 8001722:	e0e0      	b.n	80018e6 <SD_disk_ioctl+0x252>
    
    SELECT();
 8001724:	f7ff fc14 	bl	8000f50 <SELECT>
    
    switch (ctrl) 
 8001728:	79bb      	ldrb	r3, [r7, #6]
 800172a:	2b0d      	cmp	r3, #13
 800172c:	f200 80ca 	bhi.w	80018c4 <SD_disk_ioctl+0x230>
 8001730:	a201      	add	r2, pc, #4	@ (adr r2, 8001738 <SD_disk_ioctl+0xa4>)
 8001732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001736:	bf00      	nop
 8001738:	0800182f 	.word	0x0800182f
 800173c:	08001771 	.word	0x08001771
 8001740:	0800181f 	.word	0x0800181f
 8001744:	080018c5 	.word	0x080018c5
 8001748:	080018c5 	.word	0x080018c5
 800174c:	080018c5 	.word	0x080018c5
 8001750:	080018c5 	.word	0x080018c5
 8001754:	080018c5 	.word	0x080018c5
 8001758:	080018c5 	.word	0x080018c5
 800175c:	080018c5 	.word	0x080018c5
 8001760:	080018c5 	.word	0x080018c5
 8001764:	08001841 	.word	0x08001841
 8001768:	08001865 	.word	0x08001865
 800176c:	08001889 	.word	0x08001889
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001770:	2100      	movs	r1, #0
 8001772:	2049      	movs	r0, #73	@ 0x49
 8001774:	f7ff fd50 	bl	8001218 <SD_SendCmd>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 80a6 	bne.w	80018cc <SD_disk_ioctl+0x238>
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2110      	movs	r1, #16
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fcbc 	bl	8001104 <SD_RxDataBlock>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 809c 	beq.w	80018cc <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 8001794:	7b3b      	ldrb	r3, [r7, #12]
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10d      	bne.n	80017ba <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800179e:	7d7b      	ldrb	r3, [r7, #21]
 80017a0:	461a      	mov	r2, r3
 80017a2:	7d3b      	ldrb	r3, [r7, #20]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80017b0:	8bfb      	ldrh	r3, [r7, #30]
 80017b2:	029a      	lsls	r2, r3, #10
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	e02d      	b.n	8001816 <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017ba:	7c7b      	ldrb	r3, [r7, #17]
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	7dbb      	ldrb	r3, [r7, #22]
 80017c4:	09db      	lsrs	r3, r3, #7
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	7d7b      	ldrb	r3, [r7, #21]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f003 0306 	and.w	r3, r3, #6
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	4413      	add	r3, r2
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3302      	adds	r3, #2
 80017de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017e2:	7d3b      	ldrb	r3, [r7, #20]
 80017e4:	099b      	lsrs	r3, r3, #6
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	7cfb      	ldrb	r3, [r7, #19]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	7cbb      	ldrb	r3, [r7, #18]
 80017f6:	029b      	lsls	r3, r3, #10
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4413      	add	r3, r2
 8001802:	b29b      	uxth	r3, r3
 8001804:	3301      	adds	r3, #1
 8001806:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001808:	8bfa      	ldrh	r2, [r7, #30]
 800180a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800180e:	3b09      	subs	r3, #9
 8001810:	409a      	lsls	r2, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800181c:	e056      	b.n	80018cc <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001824:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800182c:	e055      	b.n	80018da <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800182e:	f7ff fbeb 	bl	8001008 <SD_ReadyWait>
 8001832:	4603      	mov	r3, r0
 8001834:	2bff      	cmp	r3, #255	@ 0xff
 8001836:	d14b      	bne.n	80018d0 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800183e:	e047      	b.n	80018d0 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001840:	2100      	movs	r1, #0
 8001842:	2049      	movs	r0, #73	@ 0x49
 8001844:	f7ff fce8 	bl	8001218 <SD_SendCmd>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d142      	bne.n	80018d4 <SD_disk_ioctl+0x240>
 800184e:	2110      	movs	r1, #16
 8001850:	6a38      	ldr	r0, [r7, #32]
 8001852:	f7ff fc57 	bl	8001104 <SD_RxDataBlock>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d03b      	beq.n	80018d4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001862:	e037      	b.n	80018d4 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001864:	2100      	movs	r1, #0
 8001866:	204a      	movs	r0, #74	@ 0x4a
 8001868:	f7ff fcd6 	bl	8001218 <SD_SendCmd>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d132      	bne.n	80018d8 <SD_disk_ioctl+0x244>
 8001872:	2110      	movs	r1, #16
 8001874:	6a38      	ldr	r0, [r7, #32]
 8001876:	f7ff fc45 	bl	8001104 <SD_RxDataBlock>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d02b      	beq.n	80018d8 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001886:	e027      	b.n	80018d8 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001888:	2100      	movs	r1, #0
 800188a:	207a      	movs	r0, #122	@ 0x7a
 800188c:	f7ff fcc4 	bl	8001218 <SD_SendCmd>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d116      	bne.n	80018c4 <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800189c:	e00b      	b.n	80018b6 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 800189e:	6a3c      	ldr	r4, [r7, #32]
 80018a0:	1c63      	adds	r3, r4, #1
 80018a2:	623b      	str	r3, [r7, #32]
 80018a4:	f7ff fb84 	bl	8000fb0 <SPI_RxByte>
 80018a8:	4603      	mov	r3, r0
 80018aa:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80018ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018b0:	3301      	adds	r3, #1
 80018b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d9ef      	bls.n	800189e <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 80018c4:	2304      	movs	r3, #4
 80018c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018ca:	e006      	b.n	80018da <SD_disk_ioctl+0x246>
      break;
 80018cc:	bf00      	nop
 80018ce:	e004      	b.n	80018da <SD_disk_ioctl+0x246>
      break;
 80018d0:	bf00      	nop
 80018d2:	e002      	b.n	80018da <SD_disk_ioctl+0x246>
      break;
 80018d4:	bf00      	nop
 80018d6:	e000      	b.n	80018da <SD_disk_ioctl+0x246>
      break;
 80018d8:	bf00      	nop
    }
    
    DESELECT();
 80018da:	f7ff fb45 	bl	8000f68 <DESELECT>
    SPI_RxByte();
 80018de:	f7ff fb67 	bl	8000fb0 <SPI_RxByte>
  }
  
  return res;
 80018e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	372c      	adds	r7, #44	@ 0x2c
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000001 	.word	0x20000001

080018f4 <_write>:
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	b29a      	uxth	r2, r3
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	4804      	ldr	r0, [pc, #16]	@ (800191c <_write+0x28>)
 800190c:	f002 ff88 	bl	8004820 <HAL_UART_Transmit>
    return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000310 	.word	0x20000310

08001920 <SD_Select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SD_Select(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // CS low
 8001924:	2200      	movs	r2, #0
 8001926:	2101      	movs	r1, #1
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <SD_Select+0x14>)
 800192a:	f001 f839 	bl	80029a0 <HAL_GPIO_WritePin>
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40020000 	.word	0x40020000

08001938 <SD_Deselect>:

void SD_Deselect(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // CS high
 800193c:	2201      	movs	r2, #1
 800193e:	2101      	movs	r1, #1
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <SD_Deselect+0x14>)
 8001942:	f001 f82d 	bl	80029a0 <HAL_GPIO_WritePin>
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40020000 	.word	0x40020000

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001956:	f000 fd1e 	bl	8002396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195a:	f000 f853 	bl	8001a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195e:	f000 f961 	bl	8001c24 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001962:	f000 f8c9 	bl	8001af8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001966:	f000 f933 	bl	8001bd0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800196a:	f003 f9c5 	bl	8004cf8 <MX_FATFS_Init>
  MX_I2C1_Init();
 800196e:	f000 f895 	bl	8001a9c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001972:	f000 f8f7 	bl	8001b64 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  /* Initialisation de la caméra */
      ArduCAM_Init(OV2640); // Initialisation de la caméra OV2640
 8001976:	2005      	movs	r0, #5
 8001978:	f7ff f89e 	bl	8000ab8 <ArduCAM_Init>

      set_format(JPEG);      // Configuration pour capturer en JPEG
 800197c:	2001      	movs	r0, #1
 800197e:	f7ff f8d3 	bl	8000b28 <set_format>

      OV2640_set_JPEG_size(OV2640_1600x1200); // Configuration de la taille d'image
 8001982:	2008      	movs	r0, #8
 8001984:	f7ff f9aa 	bl	8000cdc <OV2640_set_JPEG_size>
      HAL_Delay(1000);
 8001988:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800198c:	f000 fd72 	bl	8002474 <HAL_Delay>
      setup_sd_card();
 8001990:	f000 f992 	bl	8001cb8 <setup_sd_card>
      uint8_t *buffer = (uint8_t *)malloc(65536); // Augmentation du tampon à 8 Ko
 8001994:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001998:	f005 fbbc 	bl	8007114 <malloc>
 800199c:	4603      	mov	r3, r0
 800199e:	607b      	str	r3, [r7, #4]
          if (buffer == NULL) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d104      	bne.n	80019b0 <main+0x60>
              printf("Erreur d'allocation mémoire.\n");
 80019a6:	4816      	ldr	r0, [pc, #88]	@ (8001a00 <main+0xb0>)
 80019a8:	f006 f9f8 	bl	8007d9c <puts>
              Error_Handler();
 80019ac:	f000 fa4a 	bl	8001e44 <Error_Handler>
          }
          int capture_count = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	603b      	str	r3, [r7, #0]

          HAL_Delay(1000);
 80019b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b8:	f000 fd5c 	bl	8002474 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (capture_count < 100) {
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2b63      	cmp	r3, #99	@ 0x63
 80019c0:	dc08      	bgt.n	80019d4 <main+0x84>
	              capture_and_store_image(buffer, 65536);
 80019c2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f996 	bl	8001cf8 <capture_and_store_image>
	              capture_count++;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	e7f3      	b.n	80019bc <main+0x6c>
	          } else {
	              // Libérer le tampon et reformater la carte SD
	              free(buffer);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f005 fba5 	bl	8007124 <free>
	              setup_sd_card();
 80019da:	f000 f96d 	bl	8001cb8 <setup_sd_card>

	              // Réallouer le tampon
	              buffer = (uint8_t *)malloc(65536);
 80019de:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80019e2:	f005 fb97 	bl	8007114 <malloc>
 80019e6:	4603      	mov	r3, r0
 80019e8:	607b      	str	r3, [r7, #4]
	              if (buffer == NULL) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d104      	bne.n	80019fa <main+0xaa>
	                  printf("Erreur d'allocation mémoire.\n");
 80019f0:	4803      	ldr	r0, [pc, #12]	@ (8001a00 <main+0xb0>)
 80019f2:	f006 f9d3 	bl	8007d9c <puts>
	                  Error_Handler();
 80019f6:	f000 fa25 	bl	8001e44 <Error_Handler>
	              }


	              capture_count = 0; // Réinitialiser le compteur de captures
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
	  if (capture_count < 100) {
 80019fe:	e7dd      	b.n	80019bc <main+0x6c>
 8001a00:	08009f38 	.word	0x08009f38

08001a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b092      	sub	sp, #72	@ 0x48
 8001a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	2234      	movs	r2, #52	@ 0x34
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f006 fad6 	bl	8007fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
 8001a24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a26:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <SystemClock_Config+0x94>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001a98 <SystemClock_Config+0x94>)
 8001a30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a34:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a36:	2301      	movs	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001a4c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001a4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a52:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 fbe7 	bl	800322c <HAL_RCC_OscConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001a64:	f000 f9ee 	bl	8001e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a68:	230f      	movs	r3, #15
 8001a6a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f001 ff03 	bl	800388c <HAL_RCC_ClockConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001a8c:	f000 f9da 	bl	8001e44 <Error_Handler>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3748      	adds	r7, #72	@ 0x48
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40007000 	.word	0x40007000

08001a9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001aa2:	4a13      	ldr	r2, [pc, #76]	@ (8001af0 <MX_I2C1_Init+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001aa8:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <MX_I2C1_Init+0x58>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	@ (8001aec <MX_I2C1_Init+0x50>)
 8001ada:	f000 ff79 	bl	80029d0 <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ae4:	f000 f9ae 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000020c 	.word	0x2000020c
 8001af0:	40005400 	.word	0x40005400
 8001af4:	000186a0 	.word	0x000186a0

08001af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001afe:	4a18      	ldr	r2, [pc, #96]	@ (8001b60 <MX_SPI1_Init+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b44:	220a      	movs	r2, #10
 8001b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b4a:	f002 f8c1 	bl	8003cd0 <HAL_SPI_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b54:	f000 f976 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000260 	.word	0x20000260
 8001b60:	40013000 	.word	0x40013000

08001b64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b6a:	4a18      	ldr	r2, [pc, #96]	@ (8001bcc <MX_SPI2_Init+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b96:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bb4:	4804      	ldr	r0, [pc, #16]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001bb6:	f002 f88b 	bl	8003cd0 <HAL_SPI_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bc0:	f000 f940 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200002b8 	.word	0x200002b8
 8001bcc:	40003800 	.word	0x40003800

08001bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <MX_USART2_UART_Init+0x50>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_USART2_UART_Init+0x4c>)
 8001c08:	f002 fdbd 	bl	8004786 <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c12:	f000 f917 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000310 	.word	0x20000310
 8001c20:	40004400 	.word	0x40004400

08001c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <MX_GPIO_Init+0x8c>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb0 <MX_GPIO_Init+0x8c>)
 8001c40:	f043 0320 	orr.w	r3, r3, #32
 8001c44:	61d3      	str	r3, [r2, #28]
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <MX_GPIO_Init+0x8c>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <MX_GPIO_Init+0x8c>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a16      	ldr	r2, [pc, #88]	@ (8001cb0 <MX_GPIO_Init+0x8c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <MX_GPIO_Init+0x8c>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <MX_GPIO_Init+0x8c>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a10      	ldr	r2, [pc, #64]	@ (8001cb0 <MX_GPIO_Init+0x8c>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <MX_GPIO_Init+0x8c>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2111      	movs	r1, #17
 8001c86:	480b      	ldr	r0, [pc, #44]	@ (8001cb4 <MX_GPIO_Init+0x90>)
 8001c88:	f000 fe8a 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001c8c:	2311      	movs	r3, #17
 8001c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4804      	ldr	r0, [pc, #16]	@ (8001cb4 <MX_GPIO_Init+0x90>)
 8001ca4:	f000 fcec 	bl	8002680 <HAL_GPIO_Init>

}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <setup_sd_card>:
    printf("Capture et stockage terminés avec succès.\n");
}



void setup_sd_card(void) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
    SD_Select();
 8001cbe:	f7ff fe2f 	bl	8001920 <SD_Select>
    FRESULT fres = f_mount(&fs, "", 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4909      	ldr	r1, [pc, #36]	@ (8001cec <setup_sd_card+0x34>)
 8001cc6:	480a      	ldr	r0, [pc, #40]	@ (8001cf0 <setup_sd_card+0x38>)
 8001cc8:	f004 fdac 	bl	8006824 <f_mount>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]
    if (fres != FR_OK) {
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <setup_sd_card+0x2c>
        SD_Deselect();
 8001cd6:	f7ff fe2f 	bl	8001938 <SD_Deselect>
        printf("Erreur lors du montage de la carte SD.\n");
 8001cda:	4806      	ldr	r0, [pc, #24]	@ (8001cf4 <setup_sd_card+0x3c>)
 8001cdc:	f006 f85e 	bl	8007d9c <puts>
        Error_Handler();
 8001ce0:	f000 f8b0 	bl	8001e44 <Error_Handler>
    }
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	08009fb0 	.word	0x08009fb0
 8001cf0:	20000350 	.word	0x20000350
 8001cf4:	0800a170 	.word	0x0800a170

08001cf8 <capture_and_store_image>:


void capture_and_store_image(uint8_t *buffer, uint32_t buffer_size) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	@ 0x30
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
    static uint32_t image_counter = 0;

    /* Démarrage de la capture */
    start_capture();
 8001d02:	f7fe ffb7 	bl	8000c74 <start_capture>
 HAL_Delay(1000);
 8001d06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d0a:	f000 fbb3 	bl	8002474 <HAL_Delay>
    // Lecture de la taille de l'image dans la FIFO
    uint32_t length = read_fifo_length();
 8001d0e:	f7fe ffc1 	bl	8000c94 <read_fifo_length>
 8001d12:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (length == 0) {
 8001d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <capture_and_store_image+0x28>
    	 printf("Taille est 0\n");
 8001d1a:	4840      	ldr	r0, [pc, #256]	@ (8001e1c <capture_and_store_image+0x124>)
 8001d1c:	f006 f83e 	bl	8007d9c <puts>
    	          }
    if (length == 0 || length >= 0x07FFFFF) {
 8001d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <capture_and_store_image+0x36>
 8001d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d28:	4a3d      	ldr	r2, [pc, #244]	@ (8001e20 <capture_and_store_image+0x128>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d903      	bls.n	8001d36 <capture_and_store_image+0x3e>
        printf("Erreur : Taille d'image invalide.\n");
 8001d2e:	483d      	ldr	r0, [pc, #244]	@ (8001e24 <capture_and_store_image+0x12c>)
 8001d30:	f006 f834 	bl	8007d9c <puts>
 8001d34:	e06f      	b.n	8001e16 <capture_and_store_image+0x11e>



    /* Génération d'un nom de fichier unique */
    char filename[20];
    snprintf(filename, sizeof(filename), "IMG%04lu.JPG", image_counter++);
 8001d36:	4b3c      	ldr	r3, [pc, #240]	@ (8001e28 <capture_and_store_image+0x130>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	493a      	ldr	r1, [pc, #232]	@ (8001e28 <capture_and_store_image+0x130>)
 8001d3e:	600a      	str	r2, [r1, #0]
 8001d40:	f107 000c 	add.w	r0, r7, #12
 8001d44:	4a39      	ldr	r2, [pc, #228]	@ (8001e2c <capture_and_store_image+0x134>)
 8001d46:	2114      	movs	r1, #20
 8001d48:	f006 f830 	bl	8007dac <sniprintf>

    /* Création d'un fichier pour écrire l'image */
    FRESULT fres = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	220a      	movs	r2, #10
 8001d52:	4619      	mov	r1, r3
 8001d54:	4836      	ldr	r0, [pc, #216]	@ (8001e30 <capture_and_store_image+0x138>)
 8001d56:	f004 fdab 	bl	80068b0 <f_open>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (fres != FR_OK) {
 8001d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <capture_and_store_image+0x80>
        printf("Erreur lors de l'ouverture du fichier %s.\n", filename);
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4831      	ldr	r0, [pc, #196]	@ (8001e34 <capture_and_store_image+0x13c>)
 8001d70:	f005 ffac 	bl	8007ccc <iprintf>
        Error_Handler();
 8001d74:	f000 f866 	bl	8001e44 <Error_Handler>
    }

    /* Préparation pour lecture en mode burst */
    set_fifo_burst();
 8001d78:	f7fe ff5e 	bl	8000c38 <set_fifo_burst>

    uint32_t bytes_read = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (bytes_read < length) {
 8001d80:	e029      	b.n	8001dd6 <capture_and_store_image+0xde>
        uint32_t chunk_size = (length - bytes_read > buffer_size) ? buffer_size : (length - bytes_read);
 8001d82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	bf28      	it	cs
 8001d8e:	4613      	movcs	r3, r2
 8001d90:	623b      	str	r3, [r7, #32]

        // Lecture en mode burst directement dans le tampon
        read_fifo_burst(buffer, chunk_size);
 8001d92:	6a39      	ldr	r1, [r7, #32]
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff f8a9 	bl	8000eec <read_fifo_burst>

        // Écriture du tampon sur la carte SD
        UINT bytes_written;
        fres = f_write(&fil, buffer, chunk_size, &bytes_written);
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4823      	ldr	r0, [pc, #140]	@ (8001e30 <capture_and_store_image+0x138>)
 8001da4:	f004 ff3e 	bl	8006c24 <f_write>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (fres != FR_OK || bytes_written != chunk_size) {
 8001dae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <capture_and_store_image+0xc6>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	6a3a      	ldr	r2, [r7, #32]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d004      	beq.n	8001dc8 <capture_and_store_image+0xd0>
            printf("Erreur lors de l'écriture sur la carte SD.\n");
 8001dbe:	481e      	ldr	r0, [pc, #120]	@ (8001e38 <capture_and_store_image+0x140>)
 8001dc0:	f005 ffec 	bl	8007d9c <puts>
            Error_Handler();
 8001dc4:	f000 f83e 	bl	8001e44 <Error_Handler>
        }

        bytes_read += chunk_size;
 8001dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	4413      	add	r3, r2
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_Delay(5);
 8001dd0:	2005      	movs	r0, #5
 8001dd2:	f000 fb4f 	bl	8002474 <HAL_Delay>
    while (bytes_read < length) {
 8001dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d3d1      	bcc.n	8001d82 <capture_and_store_image+0x8a>
    }

    /* Fermeture du fichier */
    fres = f_close(&fil);
 8001dde:	4814      	ldr	r0, [pc, #80]	@ (8001e30 <capture_and_store_image+0x138>)
 8001de0:	f005 f913 	bl	800700a <f_close>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (fres != FR_OK) {
 8001dea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <capture_and_store_image+0x10a>
        printf("Erreur lors de la fermeture du fichier %s.\n", filename);
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	4619      	mov	r1, r3
 8001df8:	4810      	ldr	r0, [pc, #64]	@ (8001e3c <capture_and_store_image+0x144>)
 8001dfa:	f005 ff67 	bl	8007ccc <iprintf>
        Error_Handler();
 8001dfe:	f000 f821 	bl	8001e44 <Error_Handler>
    }

    flush_fifo();
 8001e02:	f7fe ff2f 	bl	8000c64 <flush_fifo>
    clear_fifo_flag();
 8001e06:	f7fe ff3d 	bl	8000c84 <clear_fifo_flag>

    printf("Image %s écrite avec succès.\n", filename);
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480b      	ldr	r0, [pc, #44]	@ (8001e40 <capture_and_store_image+0x148>)
 8001e12:	f005 ff5b 	bl	8007ccc <iprintf>
}
 8001e16:	3730      	adds	r7, #48	@ 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	0800a198 	.word	0x0800a198
 8001e20:	007ffffe 	.word	0x007ffffe
 8001e24:	08009f8c 	.word	0x08009f8c
 8001e28:	200007b0 	.word	0x200007b0
 8001e2c:	0800a1a8 	.word	0x0800a1a8
 8001e30:	20000580 	.word	0x20000580
 8001e34:	0800a1b8 	.word	0x0800a1b8
 8001e38:	0800a1e4 	.word	0x0800a1e4
 8001e3c:	0800a210 	.word	0x0800a210
 8001e40:	0800a23c 	.word	0x0800a23c

08001e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001e56:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <HAL_MspInit+0x58>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ea8 <HAL_MspInit+0x58>)
 8001e5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e60:	6253      	str	r3, [r2, #36]	@ 0x24
 8001e62:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <HAL_MspInit+0x58>)
 8001e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <HAL_MspInit+0x58>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <HAL_MspInit+0x58>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6213      	str	r3, [r2, #32]
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_MspInit+0x58>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <HAL_MspInit+0x58>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <HAL_MspInit+0x58>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	6253      	str	r3, [r2, #36]	@ 0x24
 8001e92:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_MspInit+0x58>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	40023800 	.word	0x40023800

08001eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	@ 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a17      	ldr	r2, [pc, #92]	@ (8001f28 <HAL_I2C_MspInit+0x7c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d127      	bne.n	8001f1e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <HAL_I2C_MspInit+0x80>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a16      	ldr	r2, [pc, #88]	@ (8001f2c <HAL_I2C_MspInit+0x80>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <HAL_I2C_MspInit+0x80>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ee6:	23c0      	movs	r3, #192	@ 0xc0
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eea:	2312      	movs	r3, #18
 8001eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	480b      	ldr	r0, [pc, #44]	@ (8001f30 <HAL_I2C_MspInit+0x84>)
 8001f02:	f000 fbbd 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <HAL_I2C_MspInit+0x80>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	4a08      	ldr	r2, [pc, #32]	@ (8001f2c <HAL_I2C_MspInit+0x80>)
 8001f0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f10:	6253      	str	r3, [r2, #36]	@ 0x24
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_I2C_MspInit+0x80>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	@ 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40005400 	.word	0x40005400
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020400 	.word	0x40020400

08001f34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	@ 0x30
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a3d      	ldr	r2, [pc, #244]	@ (8002048 <HAL_SPI_MspInit+0x114>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d145      	bne.n	8001fe2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f56:	4b3d      	ldr	r3, [pc, #244]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a3c      	ldr	r2, [pc, #240]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001f5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f60:	6213      	str	r3, [r2, #32]
 8001f62:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b37      	ldr	r3, [pc, #220]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a36      	ldr	r2, [pc, #216]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	61d3      	str	r3, [r2, #28]
 8001f7a:	4b34      	ldr	r3, [pc, #208]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	4b31      	ldr	r3, [pc, #196]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a30      	ldr	r2, [pc, #192]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f9e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4825      	ldr	r0, [pc, #148]	@ (8002050 <HAL_SPI_MspInit+0x11c>)
 8001fbc:	f000 fb60 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fd0:	2305      	movs	r3, #5
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	4619      	mov	r1, r3
 8001fda:	481e      	ldr	r0, [pc, #120]	@ (8002054 <HAL_SPI_MspInit+0x120>)
 8001fdc:	f000 fb50 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fe0:	e02d      	b.n	800203e <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <HAL_SPI_MspInit+0x124>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d128      	bne.n	800203e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fec:	4b17      	ldr	r3, [pc, #92]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	4a16      	ldr	r2, [pc, #88]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff6:	6253      	str	r3, [r2, #36]	@ 0x24
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	4a10      	ldr	r2, [pc, #64]	@ (800204c <HAL_SPI_MspInit+0x118>)
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	61d3      	str	r3, [r2, #28]
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <HAL_SPI_MspInit+0x118>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800201c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800202e:	2305      	movs	r3, #5
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4806      	ldr	r0, [pc, #24]	@ (8002054 <HAL_SPI_MspInit+0x120>)
 800203a:	f000 fb21 	bl	8002680 <HAL_GPIO_Init>
}
 800203e:	bf00      	nop
 8002040:	3730      	adds	r7, #48	@ 0x30
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40013000 	.word	0x40013000
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40003800 	.word	0x40003800

0800205c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	@ 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a17      	ldr	r2, [pc, #92]	@ (80020d8 <HAL_UART_MspInit+0x7c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d127      	bne.n	80020ce <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800207e:	4b17      	ldr	r3, [pc, #92]	@ (80020dc <HAL_UART_MspInit+0x80>)
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	4a16      	ldr	r2, [pc, #88]	@ (80020dc <HAL_UART_MspInit+0x80>)
 8002084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002088:	6253      	str	r3, [r2, #36]	@ 0x24
 800208a:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <HAL_UART_MspInit+0x80>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_UART_MspInit+0x80>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_UART_MspInit+0x80>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_UART_MspInit+0x80>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020ae:	230c      	movs	r3, #12
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020be:	2307      	movs	r3, #7
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <HAL_UART_MspInit+0x84>)
 80020ca:	f000 fad9 	bl	8002680 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	@ 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40004400 	.word	0x40004400
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000

080020e4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80020e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <SDTimer_Handler+0x3c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <SDTimer_Handler+0x1c>
    Timer1--;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <SDTimer_Handler+0x3c>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <SDTimer_Handler+0x3c>)
 80020fe:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <SDTimer_Handler+0x40>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <SDTimer_Handler+0x34>
    Timer2--;
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <SDTimer_Handler+0x40>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <SDTimer_Handler+0x40>)
 8002116:	701a      	strb	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	200007b5 	.word	0x200007b5
 8002124:	200007b6 	.word	0x200007b6

08002128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <HardFault_Handler+0x4>

0800213c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <MemManage_Handler+0x4>

08002144 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <BusFault_Handler+0x4>

0800214c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <UsageFault_Handler+0x4>

08002154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800217c:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <SysTick_Handler+0x30>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3301      	adds	r3, #1
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <SysTick_Handler+0x30>)
 8002188:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <SysTick_Handler+0x30>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b09      	cmp	r3, #9
 8002192:	d904      	bls.n	800219e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002194:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <SysTick_Handler+0x30>)
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800219a:	f7ff ffa3 	bl	80020e4 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800219e:	f000 f94d 	bl	800243c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200007b4 	.word	0x200007b4

080021ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
	return 1;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <_kill>:

int _kill(int pid, int sig)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021c4:	f005 ff60 	bl	8008088 <__errno>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2216      	movs	r2, #22
 80021cc:	601a      	str	r2, [r3, #0]
	return -1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_exit>:

void _exit (int status)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021e2:	f04f 31ff 	mov.w	r1, #4294967295
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffe7 	bl	80021ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <_exit+0x12>

080021f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	e00a      	b.n	8002218 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002202:	f3af 8000 	nop.w
 8002206:	4601      	mov	r1, r0
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	60ba      	str	r2, [r7, #8]
 800220e:	b2ca      	uxtb	r2, r1
 8002210:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf0      	blt.n	8002202 <_read+0x12>
	}

return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_close>:
	}
	return len;
}

int _close(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
	return -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002250:	605a      	str	r2, [r3, #4]
	return 0;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <_isatty>:

int _isatty(int file)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	return 1;
 8002266:	2301      	movs	r3, #1
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
	return 0;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
	...

0800228c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002294:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <_sbrk+0x50>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_sbrk+0x16>
		heap_end = &end;
 800229c:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <_sbrk+0x50>)
 800229e:	4a10      	ldr	r2, [pc, #64]	@ (80022e0 <_sbrk+0x54>)
 80022a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <_sbrk+0x50>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022a8:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <_sbrk+0x50>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	466a      	mov	r2, sp
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d907      	bls.n	80022c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022b6:	f005 fee7 	bl	8008088 <__errno>
 80022ba:	4603      	mov	r3, r0
 80022bc:	220c      	movs	r2, #12
 80022be:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	e006      	b.n	80022d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80022c6:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <_sbrk+0x50>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a03      	ldr	r2, [pc, #12]	@ (80022dc <_sbrk+0x50>)
 80022d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200007b8 	.word	0x200007b8
 80022e0:	20000948 	.word	0x20000948

080022e4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80022e8:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <SystemInit+0x5c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <SystemInit+0x5c>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <SystemInit+0x5c>)
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	4911      	ldr	r1, [pc, #68]	@ (8002340 <SystemInit+0x5c>)
 80022fa:	4b12      	ldr	r3, [pc, #72]	@ (8002344 <SystemInit+0x60>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <SystemInit+0x5c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0e      	ldr	r2, [pc, #56]	@ (8002340 <SystemInit+0x5c>)
 8002306:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 800230a:	f023 1301 	bic.w	r3, r3, #65537	@ 0x10001
 800230e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <SystemInit+0x5c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <SystemInit+0x5c>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800231a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <SystemInit+0x5c>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a07      	ldr	r2, [pc, #28]	@ (8002340 <SystemInit+0x5c>)
 8002322:	f423 037d 	bic.w	r3, r3, #16580608	@ 0xfd0000
 8002326:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <SystemInit+0x5c>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <SystemInit+0x64>)
 8002330:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002334:	609a      	str	r2, [r3, #8]
#endif
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	88ffc00c 	.word	0x88ffc00c
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800234c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800234e:	e003      	b.n	8002358 <LoopCopyDataInit>

08002350 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002352:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002354:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002356:	3104      	adds	r1, #4

08002358 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002358:	480a      	ldr	r0, [pc, #40]	@ (8002384 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800235a:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800235c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800235e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002360:	d3f6      	bcc.n	8002350 <CopyDataInit>
  ldr r2, =_sbss
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002364:	e002      	b.n	800236c <LoopFillZerobss>

08002366 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002368:	f842 3b04 	str.w	r3, [r2], #4

0800236c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800236c:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800236e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002370:	d3f9      	bcc.n	8002366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002372:	f7ff ffb7 	bl	80022e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002376:	f005 fe8d 	bl	8008094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800237a:	f7ff fae9 	bl	8001950 <main>
  bx lr
 800237e:	4770      	bx	lr
  ldr r3, =_sidata
 8002380:	0800ad80 	.word	0x0800ad80
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002388:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 800238c:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 8002390:	20000948 	.word	0x20000948

08002394 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC1_IRQHandler>

08002396 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 f939 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 f80e 	bl	80023c8 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	71fb      	strb	r3, [r7, #7]
 80023b6:	e001      	b.n	80023bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b8:	f7ff fd4a 	bl	8001e50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023bc:	79fb      	ldrb	r3, [r7, #7]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023d4:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <HAL_InitTick+0x68>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d022      	beq.n	8002422 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023dc:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_InitTick+0x6c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <HAL_InitTick+0x68>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f938 	bl	8002666 <HAL_SYSTICK_Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10f      	bne.n	800241c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	d809      	bhi.n	8002416 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002402:	2200      	movs	r2, #0
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	f04f 30ff 	mov.w	r0, #4294967295
 800240a:	f000 f910 	bl	800262e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800240e:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <HAL_InitTick+0x70>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e007      	b.n	8002426 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e004      	b.n	8002426 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e001      	b.n	8002426 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	2000000c 	.word	0x2000000c
 8002434:	20000004 	.word	0x20000004
 8002438:	20000008 	.word	0x20000008

0800243c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_IncTick+0x1c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_IncTick+0x20>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4413      	add	r3, r2
 800244a:	4a03      	ldr	r2, [pc, #12]	@ (8002458 <HAL_IncTick+0x1c>)
 800244c:	6013      	str	r3, [r2, #0]
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	200007bc 	.word	0x200007bc
 800245c:	2000000c 	.word	0x2000000c

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b02      	ldr	r3, [pc, #8]	@ (8002470 <HAL_GetTick+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	200007bc 	.word	0x200007bc

08002474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7ff fff0 	bl	8002460 <HAL_GetTick>
 8002480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d004      	beq.n	8002498 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_Delay+0x40>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4413      	add	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002498:	bf00      	nop
 800249a:	f7ff ffe1 	bl	8002460 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d8f7      	bhi.n	800249a <HAL_Delay+0x26>
  {
  }
}
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024d4:	4013      	ands	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ea:	4a04      	ldr	r2, [pc, #16]	@ (80024fc <__NVIC_SetPriorityGrouping+0x44>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60d3      	str	r3, [r2, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002504:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <__NVIC_GetPriorityGrouping+0x18>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	f003 0307 	and.w	r3, r3, #7
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	db0a      	blt.n	8002546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	490c      	ldr	r1, [pc, #48]	@ (8002568 <__NVIC_SetPriority+0x4c>)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	0112      	lsls	r2, r2, #4
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	440b      	add	r3, r1
 8002540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002544:	e00a      	b.n	800255c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4908      	ldr	r1, [pc, #32]	@ (800256c <__NVIC_SetPriority+0x50>)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	3b04      	subs	r3, #4
 8002554:	0112      	lsls	r2, r2, #4
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	440b      	add	r3, r1
 800255a:	761a      	strb	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000e100 	.word	0xe000e100
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	@ 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f1c3 0307 	rsb	r3, r3, #7
 800258a:	2b04      	cmp	r3, #4
 800258c:	bf28      	it	cs
 800258e:	2304      	movcs	r3, #4
 8002590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3304      	adds	r3, #4
 8002596:	2b06      	cmp	r3, #6
 8002598:	d902      	bls.n	80025a0 <NVIC_EncodePriority+0x30>
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3b03      	subs	r3, #3
 800259e:	e000      	b.n	80025a2 <NVIC_EncodePriority+0x32>
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43da      	mvns	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	401a      	ands	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b8:	f04f 31ff 	mov.w	r1, #4294967295
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	4313      	orrs	r3, r2
         );
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3724      	adds	r7, #36	@ 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025e4:	d301      	bcc.n	80025ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00f      	b.n	800260a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <SysTick_Config+0x40>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f2:	210f      	movs	r1, #15
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f7ff ff90 	bl	800251c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025fc:	4b05      	ldr	r3, [pc, #20]	@ (8002614 <SysTick_Config+0x40>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002602:	4b04      	ldr	r3, [pc, #16]	@ (8002614 <SysTick_Config+0x40>)
 8002604:	2207      	movs	r2, #7
 8002606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000e010 	.word	0xe000e010

08002618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff49 	bl	80024b8 <__NVIC_SetPriorityGrouping>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002640:	f7ff ff5e 	bl	8002500 <__NVIC_GetPriorityGrouping>
 8002644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7ff ff90 	bl	8002570 <NVIC_EncodePriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5f 	bl	800251c <__NVIC_SetPriority>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ffb0 	bl	80025d4 <SysTick_Config>
 8002674:	4603      	mov	r3, r0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002696:	e160      	b.n	800295a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8152 	beq.w	8002954 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x40>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b12      	cmp	r3, #18
 80026be:	d123      	bne.n	8002708 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	6939      	ldr	r1, [r7, #16]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d00b      	beq.n	800275c <HAL_GPIO_Init+0xdc>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d007      	beq.n	800275c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002750:	2b11      	cmp	r3, #17
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b12      	cmp	r3, #18
 800275a:	d130      	bne.n	80027be <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002792:	2201      	movs	r2, #1
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 0201 	and.w	r2, r3, #1
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80ac 	beq.w	8002954 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002978 <HAL_GPIO_Init+0x2f8>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4a5d      	ldr	r2, [pc, #372]	@ (8002978 <HAL_GPIO_Init+0x2f8>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6213      	str	r3, [r2, #32]
 8002808:	4b5b      	ldr	r3, [pc, #364]	@ (8002978 <HAL_GPIO_Init+0x2f8>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8002814:	4a59      	ldr	r2, [pc, #356]	@ (800297c <HAL_GPIO_Init+0x2fc>)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002820:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	220f      	movs	r2, #15
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a51      	ldr	r2, [pc, #324]	@ (8002980 <HAL_GPIO_Init+0x300>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d025      	beq.n	800288c <HAL_GPIO_Init+0x20c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a50      	ldr	r2, [pc, #320]	@ (8002984 <HAL_GPIO_Init+0x304>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d01f      	beq.n	8002888 <HAL_GPIO_Init+0x208>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a4f      	ldr	r2, [pc, #316]	@ (8002988 <HAL_GPIO_Init+0x308>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d019      	beq.n	8002884 <HAL_GPIO_Init+0x204>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a4e      	ldr	r2, [pc, #312]	@ (800298c <HAL_GPIO_Init+0x30c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d013      	beq.n	8002880 <HAL_GPIO_Init+0x200>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a4d      	ldr	r2, [pc, #308]	@ (8002990 <HAL_GPIO_Init+0x310>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00d      	beq.n	800287c <HAL_GPIO_Init+0x1fc>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a4c      	ldr	r2, [pc, #304]	@ (8002994 <HAL_GPIO_Init+0x314>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d007      	beq.n	8002878 <HAL_GPIO_Init+0x1f8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a4b      	ldr	r2, [pc, #300]	@ (8002998 <HAL_GPIO_Init+0x318>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d101      	bne.n	8002874 <HAL_GPIO_Init+0x1f4>
 8002870:	2306      	movs	r3, #6
 8002872:	e00c      	b.n	800288e <HAL_GPIO_Init+0x20e>
 8002874:	2307      	movs	r3, #7
 8002876:	e00a      	b.n	800288e <HAL_GPIO_Init+0x20e>
 8002878:	2305      	movs	r3, #5
 800287a:	e008      	b.n	800288e <HAL_GPIO_Init+0x20e>
 800287c:	2304      	movs	r3, #4
 800287e:	e006      	b.n	800288e <HAL_GPIO_Init+0x20e>
 8002880:	2303      	movs	r3, #3
 8002882:	e004      	b.n	800288e <HAL_GPIO_Init+0x20e>
 8002884:	2302      	movs	r3, #2
 8002886:	e002      	b.n	800288e <HAL_GPIO_Init+0x20e>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <HAL_GPIO_Init+0x20e>
 800288c:	2300      	movs	r3, #0
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	f002 0203 	and.w	r2, r2, #3
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	4093      	lsls	r3, r2
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800289e:	4937      	ldr	r1, [pc, #220]	@ (800297c <HAL_GPIO_Init+0x2fc>)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3302      	adds	r3, #2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ac:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <HAL_GPIO_Init+0x31c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028d0:	4a32      	ldr	r2, [pc, #200]	@ (800299c <HAL_GPIO_Init+0x31c>)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028d6:	4b31      	ldr	r3, [pc, #196]	@ (800299c <HAL_GPIO_Init+0x31c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028fa:	4a28      	ldr	r2, [pc, #160]	@ (800299c <HAL_GPIO_Init+0x31c>)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002900:	4b26      	ldr	r3, [pc, #152]	@ (800299c <HAL_GPIO_Init+0x31c>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002924:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <HAL_GPIO_Init+0x31c>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800292a:	4b1c      	ldr	r3, [pc, #112]	@ (800299c <HAL_GPIO_Init+0x31c>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800294e:	4a13      	ldr	r2, [pc, #76]	@ (800299c <HAL_GPIO_Init+0x31c>)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3301      	adds	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	f47f ae97 	bne.w	8002698 <HAL_GPIO_Init+0x18>
  } 
}
 800296a:	bf00      	nop
 800296c:	bf00      	nop
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	40010000 	.word	0x40010000
 8002980:	40020000 	.word	0x40020000
 8002984:	40020400 	.word	0x40020400
 8002988:	40020800 	.word	0x40020800
 800298c:	40020c00 	.word	0x40020c00
 8002990:	40021000 	.word	0x40021000
 8002994:	40021400 	.word	0x40021400
 8002998:	40021800 	.word	0x40021800
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
 80029ac:	4613      	mov	r3, r2
 80029ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b0:	787b      	ldrb	r3, [r7, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80029bc:	e003      	b.n	80029c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	041a      	lsls	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	619a      	str	r2, [r3, #24]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e11b      	b.n	8002c1a <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fa58 	bl	8001eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	@ 0x24
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a14:	f001 f8d4 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8002a18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a81      	ldr	r2, [pc, #516]	@ (8002c24 <HAL_I2C_Init+0x254>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d807      	bhi.n	8002a34 <HAL_I2C_Init+0x64>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a80      	ldr	r2, [pc, #512]	@ (8002c28 <HAL_I2C_Init+0x258>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e006      	b.n	8002a42 <HAL_I2C_Init+0x72>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a7d      	ldr	r2, [pc, #500]	@ (8002c2c <HAL_I2C_Init+0x25c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	bf94      	ite	ls
 8002a3c:	2301      	movls	r3, #1
 8002a3e:	2300      	movhi	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0e7      	b.n	8002c1a <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a78      	ldr	r2, [pc, #480]	@ (8002c30 <HAL_I2C_Init+0x260>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9b      	lsrs	r3, r3, #18
 8002a54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a6a      	ldr	r2, [pc, #424]	@ (8002c24 <HAL_I2C_Init+0x254>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d802      	bhi.n	8002a84 <HAL_I2C_Init+0xb4>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3301      	adds	r3, #1
 8002a82:	e009      	b.n	8002a98 <HAL_I2C_Init+0xc8>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	4a69      	ldr	r2, [pc, #420]	@ (8002c34 <HAL_I2C_Init+0x264>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	3301      	adds	r3, #1
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002aaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	495c      	ldr	r1, [pc, #368]	@ (8002c24 <HAL_I2C_Init+0x254>)
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	d819      	bhi.n	8002aec <HAL_I2C_Init+0x11c>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e59      	subs	r1, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac6:	1c59      	adds	r1, r3, #1
 8002ac8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002acc:	400b      	ands	r3, r1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_I2C_Init+0x118>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1e59      	subs	r1, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	e051      	b.n	8002b8c <HAL_I2C_Init+0x1bc>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	e04f      	b.n	8002b8c <HAL_I2C_Init+0x1bc>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d111      	bne.n	8002b18 <HAL_I2C_Init+0x148>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e58      	subs	r0, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e012      	b.n	8002b3e <HAL_I2C_Init+0x16e>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Init+0x176>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e022      	b.n	8002b8c <HAL_I2C_Init+0x1bc>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10e      	bne.n	8002b6c <HAL_I2C_Init+0x19c>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1e58      	subs	r0, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	440b      	add	r3, r1
 8002b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b6a:	e00f      	b.n	8002b8c <HAL_I2C_Init+0x1bc>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	6809      	ldr	r1, [r1, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6911      	ldr	r1, [r2, #16]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	000186a0 	.word	0x000186a0
 8002c28:	001e847f 	.word	0x001e847f
 8002c2c:	003d08ff 	.word	0x003d08ff
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	10624dd3 	.word	0x10624dd3

08002c38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	461a      	mov	r2, r3
 8002c44:	460b      	mov	r3, r1
 8002c46:	817b      	strh	r3, [r7, #10]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7ff fc08 	bl	8002460 <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	f040 80e0 	bne.w	8002e20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2319      	movs	r3, #25
 8002c66:	2201      	movs	r2, #1
 8002c68:	4970      	ldr	r1, [pc, #448]	@ (8002e2c <HAL_I2C_Master_Transmit+0x1f4>)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f958 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
 8002c78:	e0d3      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_I2C_Master_Transmit+0x50>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0cc      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d007      	beq.n	8002cae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2221      	movs	r2, #33	@ 0x21
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	893a      	ldrh	r2, [r7, #8]
 8002cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a50      	ldr	r2, [pc, #320]	@ (8002e30 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cf0:	8979      	ldrh	r1, [r7, #10]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f89c 	bl	8002e34 <I2C_MasterRequestWrite>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e08d      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d1c:	e066      	b.n	8002dec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	6a39      	ldr	r1, [r7, #32]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f9d2 	bl	80030cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d107      	bne.n	8002d46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06b      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d11b      	bne.n	8002dc0 <HAL_I2C_Master_Transmit+0x188>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d017      	beq.n	8002dc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	6a39      	ldr	r1, [r7, #32]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f9c2 	bl	800314e <I2C_WaitOnBTFFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d107      	bne.n	8002de8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e01a      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d194      	bne.n	8002d1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e000      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e20:	2302      	movs	r3, #2
  }
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	00100002 	.word	0x00100002
 8002e30:	ffff0000 	.word	0xffff0000

08002e34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	460b      	mov	r3, r1
 8002e42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d006      	beq.n	8002e5e <I2C_MasterRequestWrite+0x2a>
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d003      	beq.n	8002e5e <I2C_MasterRequestWrite+0x2a>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e5c:	d108      	bne.n	8002e70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e00b      	b.n	8002e88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d107      	bne.n	8002e88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f843 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e035      	b.n	8002f10 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eac:	d108      	bne.n	8002ec0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ebc:	611a      	str	r2, [r3, #16]
 8002ebe:	e01b      	b.n	8002ef8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ec0:	897b      	ldrh	r3, [r7, #10]
 8002ec2:	11db      	asrs	r3, r3, #7
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0306 	and.w	r3, r3, #6
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f063 030f 	orn	r3, r3, #15
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	490e      	ldr	r1, [pc, #56]	@ (8002f18 <I2C_MasterRequestWrite+0xe4>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f875 	bl	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e010      	b.n	8002f10 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eee:	897b      	ldrh	r3, [r7, #10]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4907      	ldr	r1, [pc, #28]	@ (8002f1c <I2C_MasterRequestWrite+0xe8>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f865 	bl	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	00010008 	.word	0x00010008
 8002f1c:	00010002 	.word	0x00010002

08002f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f30:	e025      	b.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d021      	beq.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7ff fa91 	bl	8002460 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d116      	bne.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e023      	b.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10d      	bne.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	e00c      	b.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d0b6      	beq.n	8002f32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fdc:	e051      	b.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fec:	d123      	bne.n	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003006:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	f043 0204 	orr.w	r2, r3, #4
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e046      	b.n	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d021      	beq.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303e:	f7ff fa0f 	bl	8002460 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d116      	bne.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	f043 0220 	orr.w	r2, r3, #32
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e020      	b.n	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10c      	bne.n	80030a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	43da      	mvns	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4013      	ands	r3, r2
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	bf14      	ite	ne
 800309e:	2301      	movne	r3, #1
 80030a0:	2300      	moveq	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	e00b      	b.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	43da      	mvns	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4013      	ands	r3, r2
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d18d      	bne.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d8:	e02d      	b.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f878 	bl	80031d0 <I2C_IsAcknowledgeFailed>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e02d      	b.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d021      	beq.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7ff f9b5 	bl	8002460 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d116      	bne.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003140:	2b80      	cmp	r3, #128	@ 0x80
 8003142:	d1ca      	bne.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800315a:	e02d      	b.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f837 	bl	80031d0 <I2C_IsAcknowledgeFailed>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e02d      	b.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d021      	beq.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003174:	f7ff f974 	bl	8002460 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	d302      	bcc.n	800318a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e007      	b.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d1ca      	bne.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e6:	d11b      	bne.n	8003220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	f043 0204 	orr.w	r2, r3, #4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e31d      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323e:	4b94      	ldr	r3, [pc, #592]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003248:	4b91      	ldr	r3, [pc, #580]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003250:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d07b      	beq.n	8003356 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d006      	beq.n	8003272 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b0c      	cmp	r3, #12
 8003268:	d10f      	bne.n	800328a <HAL_RCC_OscConfig+0x5e>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003270:	d10b      	bne.n	800328a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003272:	4b87      	ldr	r3, [pc, #540]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d06a      	beq.n	8003354 <HAL_RCC_OscConfig+0x128>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d166      	bne.n	8003354 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e2f7      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d106      	bne.n	80032a0 <HAL_RCC_OscConfig+0x74>
 8003292:	4b7f      	ldr	r3, [pc, #508]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7e      	ldr	r2, [pc, #504]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e02d      	b.n	80032fc <HAL_RCC_OscConfig+0xd0>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10c      	bne.n	80032c2 <HAL_RCC_OscConfig+0x96>
 80032a8:	4b79      	ldr	r3, [pc, #484]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a78      	ldr	r2, [pc, #480]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b76      	ldr	r3, [pc, #472]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a75      	ldr	r2, [pc, #468]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	e01c      	b.n	80032fc <HAL_RCC_OscConfig+0xd0>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0xb8>
 80032ca:	4b71      	ldr	r3, [pc, #452]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a70      	ldr	r2, [pc, #448]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6d      	ldr	r2, [pc, #436]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0xd0>
 80032e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a69      	ldr	r2, [pc, #420]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b67      	ldr	r3, [pc, #412]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a66      	ldr	r2, [pc, #408]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7ff f8ac 	bl	8002460 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800330c:	f7ff f8a8 	bl	8002460 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	@ 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e2ad      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800331e:	4b5c      	ldr	r3, [pc, #368]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0xe0>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7ff f898 	bl	8002460 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003334:	f7ff f894 	bl	8002460 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	@ 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e299      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003346:	4b52      	ldr	r3, [pc, #328]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x108>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d05a      	beq.n	8003418 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d005      	beq.n	8003374 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b0c      	cmp	r3, #12
 800336c:	d119      	bne.n	80033a2 <HAL_RCC_OscConfig+0x176>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003374:	4b46      	ldr	r3, [pc, #280]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_OscConfig+0x160>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d001      	beq.n	800338c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e276      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b40      	ldr	r3, [pc, #256]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	493d      	ldr	r1, [pc, #244]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a0:	e03a      	b.n	8003418 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d020      	beq.n	80033ec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003494 <HAL_RCC_OscConfig+0x268>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7ff f856 	bl	8002460 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b8:	f7ff f852 	bl	8002460 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e257      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ca:	4b31      	ldr	r3, [pc, #196]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	492a      	ldr	r1, [pc, #168]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
 80033ea:	e015      	b.n	8003418 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ec:	4b29      	ldr	r3, [pc, #164]	@ (8003494 <HAL_RCC_OscConfig+0x268>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7ff f835 	bl	8002460 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033fa:	f7ff f831 	bl	8002460 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e236      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800340c:	4b20      	ldr	r3, [pc, #128]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80b8 	beq.w	8003596 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d170      	bne.n	800350e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800342c:	4b18      	ldr	r3, [pc, #96]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_OscConfig+0x218>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e21a      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1a      	ldr	r2, [r3, #32]
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003450:	429a      	cmp	r2, r3
 8003452:	d921      	bls.n	8003498 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fbd9 	bl	8003c10 <RCC_SetFlashLatencyFromMSIRange>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e208      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003468:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4906      	ldr	r1, [pc, #24]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800347a:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	4901      	ldr	r1, [pc, #4]	@ (8003490 <HAL_RCC_OscConfig+0x264>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
 800348e:	e020      	b.n	80034d2 <HAL_RCC_OscConfig+0x2a6>
 8003490:	40023800 	.word	0x40023800
 8003494:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003498:	4b99      	ldr	r3, [pc, #612]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	4996      	ldr	r1, [pc, #600]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034aa:	4b95      	ldr	r3, [pc, #596]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	061b      	lsls	r3, r3, #24
 80034b8:	4991      	ldr	r1, [pc, #580]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fba4 	bl	8003c10 <RCC_SetFlashLatencyFromMSIRange>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1d3      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	0b5b      	lsrs	r3, r3, #13
 80034d8:	3301      	adds	r3, #1
 80034da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80034e2:	4a87      	ldr	r2, [pc, #540]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80034e4:	6892      	ldr	r2, [r2, #8]
 80034e6:	0912      	lsrs	r2, r2, #4
 80034e8:	f002 020f 	and.w	r2, r2, #15
 80034ec:	4985      	ldr	r1, [pc, #532]	@ (8003704 <HAL_RCC_OscConfig+0x4d8>)
 80034ee:	5c8a      	ldrb	r2, [r1, r2]
 80034f0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034f2:	4a85      	ldr	r2, [pc, #532]	@ (8003708 <HAL_RCC_OscConfig+0x4dc>)
 80034f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034f6:	4b85      	ldr	r3, [pc, #532]	@ (800370c <HAL_RCC_OscConfig+0x4e0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe ff64 	bl	80023c8 <HAL_InitTick>
 8003500:	4603      	mov	r3, r0
 8003502:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d045      	beq.n	8003596 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	e1b5      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d029      	beq.n	800356a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003516:	4b7e      	ldr	r3, [pc, #504]	@ (8003710 <HAL_RCC_OscConfig+0x4e4>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fe ffa0 	bl	8002460 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003524:	f7fe ff9c 	bl	8002460 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e1a1      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003536:	4b72      	ldr	r3, [pc, #456]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003542:	4b6f      	ldr	r3, [pc, #444]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	496c      	ldr	r1, [pc, #432]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003554:	4b6a      	ldr	r3, [pc, #424]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	4967      	ldr	r1, [pc, #412]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800356a:	4b69      	ldr	r3, [pc, #420]	@ (8003710 <HAL_RCC_OscConfig+0x4e4>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe ff76 	bl	8002460 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003578:	f7fe ff72 	bl	8002460 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e177      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800358a:	4b5d      	ldr	r3, [pc, #372]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d030      	beq.n	8003604 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d016      	beq.n	80035d8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003714 <HAL_RCC_OscConfig+0x4e8>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7fe ff56 	bl	8002460 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fe ff52 	bl	8002460 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e157      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80035cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x38c>
 80035d6:	e015      	b.n	8003604 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003714 <HAL_RCC_OscConfig+0x4e8>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7fe ff3f 	bl	8002460 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fe ff3b 	bl	8002460 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e140      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035f8:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80035fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80b5 	beq.w	800377c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003616:	4b3a      	ldr	r3, [pc, #232]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10d      	bne.n	800363e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	4b37      	ldr	r3, [pc, #220]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	4a36      	ldr	r2, [pc, #216]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800362c:	6253      	str	r3, [r2, #36]	@ 0x24
 800362e:	4b34      	ldr	r3, [pc, #208]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b36      	ldr	r3, [pc, #216]	@ (8003718 <HAL_RCC_OscConfig+0x4ec>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d118      	bne.n	800367c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4b33      	ldr	r3, [pc, #204]	@ (8003718 <HAL_RCC_OscConfig+0x4ec>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a32      	ldr	r2, [pc, #200]	@ (8003718 <HAL_RCC_OscConfig+0x4ec>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fe ff03 	bl	8002460 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fe feff 	bl	8002460 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b64      	cmp	r3, #100	@ 0x64
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e104      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	4b29      	ldr	r3, [pc, #164]	@ (8003718 <HAL_RCC_OscConfig+0x4ec>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x466>
 8003684:	4b1e      	ldr	r3, [pc, #120]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	4a1d      	ldr	r2, [pc, #116]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800368e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003690:	e02d      	b.n	80036ee <HAL_RCC_OscConfig+0x4c2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x488>
 800369a:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 800369c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369e:	4a18      	ldr	r2, [pc, #96]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036a4:	6353      	str	r3, [r2, #52]	@ 0x34
 80036a6:	4b16      	ldr	r3, [pc, #88]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036aa:	4a15      	ldr	r2, [pc, #84]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036b0:	6353      	str	r3, [r2, #52]	@ 0x34
 80036b2:	e01c      	b.n	80036ee <HAL_RCC_OscConfig+0x4c2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b05      	cmp	r3, #5
 80036ba:	d10c      	bne.n	80036d6 <HAL_RCC_OscConfig+0x4aa>
 80036bc:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80036c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80036d4:	e00b      	b.n	80036ee <HAL_RCC_OscConfig+0x4c2>
 80036d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036da:	4a09      	ldr	r2, [pc, #36]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e0:	6353      	str	r3, [r2, #52]	@ 0x34
 80036e2:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e6:	4a06      	ldr	r2, [pc, #24]	@ (8003700 <HAL_RCC_OscConfig+0x4d4>)
 80036e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036ec:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d024      	beq.n	8003740 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f6:	f7fe feb3 	bl	8002460 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036fc:	e019      	b.n	8003732 <HAL_RCC_OscConfig+0x506>
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	0800a964 	.word	0x0800a964
 8003708:	20000004 	.word	0x20000004
 800370c:	20000008 	.word	0x20000008
 8003710:	42470020 	.word	0x42470020
 8003714:	42470680 	.word	0x42470680
 8003718:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fe fea0 	bl	8002460 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0a3      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003732:	4b54      	ldr	r3, [pc, #336]	@ (8003884 <HAL_RCC_OscConfig+0x658>)
 8003734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003736:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ee      	beq.n	800371c <HAL_RCC_OscConfig+0x4f0>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fe fe8e 	bl	8002460 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003746:	e00a      	b.n	800375e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fe fe8a 	bl	8002460 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e08d      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800375e:	4b49      	ldr	r3, [pc, #292]	@ (8003884 <HAL_RCC_OscConfig+0x658>)
 8003760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003762:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ee      	bne.n	8003748 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800376a:	7ffb      	ldrb	r3, [r7, #31]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d105      	bne.n	800377c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003770:	4b44      	ldr	r3, [pc, #272]	@ (8003884 <HAL_RCC_OscConfig+0x658>)
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	4a43      	ldr	r2, [pc, #268]	@ (8003884 <HAL_RCC_OscConfig+0x658>)
 8003776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800377a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d079      	beq.n	8003878 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2b0c      	cmp	r3, #12
 8003788:	d056      	beq.n	8003838 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	2b02      	cmp	r3, #2
 8003790:	d13b      	bne.n	800380a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b3d      	ldr	r3, [pc, #244]	@ (8003888 <HAL_RCC_OscConfig+0x65c>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fe62 	bl	8002460 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe fe5e 	bl	8002460 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e063      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037b2:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <HAL_RCC_OscConfig+0x658>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037be:	4b31      	ldr	r3, [pc, #196]	@ (8003884 <HAL_RCC_OscConfig+0x658>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	4319      	orrs	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d4:	430b      	orrs	r3, r1
 80037d6:	492b      	ldr	r1, [pc, #172]	@ (8003884 <HAL_RCC_OscConfig+0x658>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003888 <HAL_RCC_OscConfig+0x65c>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe fe3d 	bl	8002460 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fe fe39 	bl	8002460 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e03e      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037fc:	4b21      	ldr	r3, [pc, #132]	@ (8003884 <HAL_RCC_OscConfig+0x658>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x5be>
 8003808:	e036      	b.n	8003878 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	4b1f      	ldr	r3, [pc, #124]	@ (8003888 <HAL_RCC_OscConfig+0x65c>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fe fe26 	bl	8002460 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003818:	f7fe fe22 	bl	8002460 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e027      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800382a:	4b16      	ldr	r3, [pc, #88]	@ (8003884 <HAL_RCC_OscConfig+0x658>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x5ec>
 8003836:	e01f      	b.n	8003878 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e01a      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003844:	4b0f      	ldr	r3, [pc, #60]	@ (8003884 <HAL_RCC_OscConfig+0x658>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	429a      	cmp	r2, r3
 8003856:	d10d      	bne.n	8003874 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	42470060 	.word	0x42470060

0800388c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e11a      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b8f      	ldr	r3, [pc, #572]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d919      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x34>
 80038b4:	4b8a      	ldr	r3, [pc, #552]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a89      	ldr	r2, [pc, #548]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 80038ba:	f043 0304 	orr.w	r3, r3, #4
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	4b87      	ldr	r3, [pc, #540]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 0201 	bic.w	r2, r3, #1
 80038c8:	4985      	ldr	r1, [pc, #532]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d0:	4b83      	ldr	r3, [pc, #524]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d001      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0f9      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ee:	4b7d      	ldr	r3, [pc, #500]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	497a      	ldr	r1, [pc, #488]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 808e 	beq.w	8003a2a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003916:	4b73      	ldr	r3, [pc, #460]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d121      	bne.n	8003966 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e0d7      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b03      	cmp	r3, #3
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800392e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d115      	bne.n	8003966 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0cb      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003946:	4b67      	ldr	r3, [pc, #412]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0bf      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003956:	4b63      	ldr	r3, [pc, #396]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0b7      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003966:	4b5f      	ldr	r3, [pc, #380]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	495c      	ldr	r1, [pc, #368]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003974:	4313      	orrs	r3, r2
 8003976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003978:	f7fe fd72 	bl	8002460 <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d112      	bne.n	80039ac <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003986:	e00a      	b.n	800399e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003988:	f7fe fd6a 	bl	8002460 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e09b      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800399e:	4b51      	ldr	r3, [pc, #324]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d1ee      	bne.n	8003988 <HAL_RCC_ClockConfig+0xfc>
 80039aa:	e03e      	b.n	8003a2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d112      	bne.n	80039da <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b6:	f7fe fd53 	bl	8002460 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e084      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039cc:	4b45      	ldr	r3, [pc, #276]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	d1ee      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x12a>
 80039d8:	e027      	b.n	8003a2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d11d      	bne.n	8003a1e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e4:	f7fe fd3c 	bl	8002460 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e06d      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80039fa:	4b3a      	ldr	r3, [pc, #232]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d1ee      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x158>
 8003a06:	e010      	b.n	8003a2a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fe fd2a 	bl	8002460 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e05b      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1ee      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d219      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <HAL_RCC_ClockConfig+0x1be>
 8003a3e:	4b28      	ldr	r3, [pc, #160]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a27      	ldr	r2, [pc, #156]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 0201 	bic.w	r2, r3, #1
 8003a52:	4923      	ldr	r1, [pc, #140]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e034      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4917      	ldr	r1, [pc, #92]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a96:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	490f      	ldr	r1, [pc, #60]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aaa:	f000 f823 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae4 <HAL_RCC_ClockConfig+0x258>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	490b      	ldr	r1, [pc, #44]	@ (8003ae8 <HAL_RCC_ClockConfig+0x25c>)
 8003abc:	5ccb      	ldrb	r3, [r1, r3]
 8003abe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8003aec <HAL_RCC_ClockConfig+0x260>)
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fc7c 	bl	80023c8 <HAL_InitTick>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023c00 	.word	0x40023c00
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	0800a964 	.word	0x0800a964
 8003aec:	20000004 	.word	0x20000004
 8003af0:	20000008 	.word	0x20000008

08003af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003afa:	4b28      	ldr	r3, [pc, #160]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d00c      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x30>
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	d831      	bhi.n	8003b72 <HAL_RCC_GetSysClockFreq+0x7e>
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d002      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x24>
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_GetSysClockFreq+0x2a>
 8003b16:	e02c      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b18:	4b21      	ldr	r3, [pc, #132]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b1a:	613b      	str	r3, [r7, #16]
      break;
 8003b1c:	e037      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b1e:	4b21      	ldr	r3, [pc, #132]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b20:	613b      	str	r3, [r7, #16]
      break;
 8003b22:	e034      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	0c9b      	lsrs	r3, r3, #18
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	0d9b      	lsrs	r3, r3, #22
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b3e:	4b17      	ldr	r3, [pc, #92]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x68>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b4e:	fb03 f202 	mul.w	r2, r3, r2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e007      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4a10      	ldr	r2, [pc, #64]	@ (8003ba0 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b60:	fb03 f202 	mul.w	r2, r3, r2
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	613b      	str	r3, [r7, #16]
      break;
 8003b70:	e00d      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x9a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003b72:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	0b5b      	lsrs	r3, r3, #13
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	613b      	str	r3, [r7, #16]
      break;
 8003b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8e:	693b      	ldr	r3, [r7, #16]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	00f42400 	.word	0x00f42400
 8003ba4:	007a1200 	.word	0x007a1200
 8003ba8:	0800a958 	.word	0x0800a958

08003bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b02      	ldr	r3, [pc, #8]	@ (8003bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	20000004 	.word	0x20000004

08003bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bc4:	f7ff fff2 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b05      	ldr	r3, [pc, #20]	@ (8003be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	4903      	ldr	r1, [pc, #12]	@ (8003be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	0800a974 	.word	0x0800a974

08003be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bec:	f7ff ffde 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0adb      	lsrs	r3, r3, #11
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4903      	ldr	r1, [pc, #12]	@ (8003c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	0800a974 	.word	0x0800a974

08003c10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c1c:	4b29      	ldr	r3, [pc, #164]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d12c      	bne.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c28:	4b26      	ldr	r3, [pc, #152]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c34:	4b24      	ldr	r3, [pc, #144]	@ (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e016      	b.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c40:	4b20      	ldr	r3, [pc, #128]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	6253      	str	r3, [r2, #36]	@ 0x24
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003c58:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8003c60:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c62:	4b18      	ldr	r3, [pc, #96]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	4a17      	ldr	r2, [pc, #92]	@ (8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8003c74:	d105      	bne.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c7c:	d101      	bne.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003c7e:	2301      	movs	r3, #1
 8003c80:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003c88:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c8e:	f043 0304 	orr.w	r3, r3, #4
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 0201 	bic.w	r2, r3, #1
 8003c9c:	490b      	ldr	r1, [pc, #44]	@ (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ca4:	4b09      	ldr	r3, [pc, #36]	@ (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d001      	beq.n	8003cb6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	40023c00 	.word	0x40023c00

08003cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e056      	b.n	8003d90 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fe f919 	bl	8001f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d18:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	ea42 0103 	orr.w	r1, r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	0c1b      	lsrs	r3, r3, #16
 8003d60:	f003 0104 	and.w	r1, r3, #4
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_SPI_Transmit+0x22>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e11e      	b.n	8003ff8 <HAL_SPI_Transmit+0x260>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dc2:	f7fe fb4d 	bl	8002460 <HAL_GetTick>
 8003dc6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d002      	beq.n	8003dde <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ddc:	e103      	b.n	8003fe6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <HAL_SPI_Transmit+0x52>
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d102      	bne.n	8003df0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dee:	e0fa      	b.n	8003fe6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2203      	movs	r2, #3
 8003df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e36:	d107      	bne.n	8003e48 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e52:	2b40      	cmp	r3, #64	@ 0x40
 8003e54:	d007      	beq.n	8003e66 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e6e:	d14b      	bne.n	8003f08 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_SPI_Transmit+0xe6>
 8003e78:	8afb      	ldrh	r3, [r7, #22]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d13e      	bne.n	8003efc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	881a      	ldrh	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	1c9a      	adds	r2, r3, #2
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ea2:	e02b      	b.n	8003efc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d112      	bne.n	8003ed8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	1c9a      	adds	r2, r3, #2
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ed6:	e011      	b.n	8003efc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed8:	f7fe fac2 	bl	8002460 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d803      	bhi.n	8003ef0 <HAL_SPI_Transmit+0x158>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eee:	d102      	bne.n	8003ef6 <HAL_SPI_Transmit+0x15e>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003efa:	e074      	b.n	8003fe6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ce      	bne.n	8003ea4 <HAL_SPI_Transmit+0x10c>
 8003f06:	e04c      	b.n	8003fa2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_Transmit+0x17e>
 8003f10:	8afb      	ldrh	r3, [r7, #22]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d140      	bne.n	8003f98 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	7812      	ldrb	r2, [r2, #0]
 8003f22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f3c:	e02c      	b.n	8003f98 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d113      	bne.n	8003f74 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	7812      	ldrb	r2, [r2, #0]
 8003f58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f72:	e011      	b.n	8003f98 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f74:	f7fe fa74 	bl	8002460 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d803      	bhi.n	8003f8c <HAL_SPI_Transmit+0x1f4>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d102      	bne.n	8003f92 <HAL_SPI_Transmit+0x1fa>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d102      	bne.n	8003f98 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f96:	e026      	b.n	8003fe6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1cd      	bne.n	8003f3e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	6839      	ldr	r1, [r7, #0]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fbb1 	bl	800470e <SPI_EndRxTxTransaction>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e000      	b.n	8003fe6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003fe4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800401c:	d112      	bne.n	8004044 <HAL_SPI_Receive+0x44>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10e      	bne.n	8004044 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2204      	movs	r2, #4
 800402a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f8e9 	bl	8004212 <HAL_SPI_TransmitReceive>
 8004040:	4603      	mov	r3, r0
 8004042:	e0e2      	b.n	800420a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_SPI_Receive+0x52>
 800404e:	2302      	movs	r3, #2
 8004050:	e0db      	b.n	800420a <HAL_SPI_Receive+0x20a>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800405a:	f7fe fa01 	bl	8002460 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d002      	beq.n	8004072 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800406c:	2302      	movs	r3, #2
 800406e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004070:	e0c2      	b.n	80041f8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_SPI_Receive+0x7e>
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004082:	e0b9      	b.n	80041f8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2204      	movs	r2, #4
 8004088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ca:	d107      	bne.n	80040dc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e6:	2b40      	cmp	r3, #64	@ 0x40
 80040e8:	d007      	beq.n	80040fa <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d162      	bne.n	80041c8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004102:	e02e      	b.n	8004162 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d115      	bne.n	800413e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f103 020c 	add.w	r2, r3, #12
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411e:	7812      	ldrb	r2, [r2, #0]
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800413c:	e011      	b.n	8004162 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800413e:	f7fe f98f 	bl	8002460 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d803      	bhi.n	8004156 <HAL_SPI_Receive+0x156>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004154:	d102      	bne.n	800415c <HAL_SPI_Receive+0x15c>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004160:	e04a      	b.n	80041f8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1cb      	bne.n	8004104 <HAL_SPI_Receive+0x104>
 800416c:	e031      	b.n	80041d2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d113      	bne.n	80041a4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004186:	b292      	uxth	r2, r2
 8004188:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	1c9a      	adds	r2, r3, #2
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041a2:	e011      	b.n	80041c8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041a4:	f7fe f95c 	bl	8002460 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d803      	bhi.n	80041bc <HAL_SPI_Receive+0x1bc>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d102      	bne.n	80041c2 <HAL_SPI_Receive+0x1c2>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041c6:	e017      	b.n	80041f8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1cd      	bne.n	800416e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fa34 	bl	8004644 <SPI_EndRxTransaction>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	75fb      	strb	r3, [r7, #23]
 80041f4:	e000      	b.n	80041f8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80041f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004208:	7dfb      	ldrb	r3, [r7, #23]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b08c      	sub	sp, #48	@ 0x30
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004220:	2301      	movs	r3, #1
 8004222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_SPI_TransmitReceive+0x26>
 8004234:	2302      	movs	r3, #2
 8004236:	e18a      	b.n	800454e <HAL_SPI_TransmitReceive+0x33c>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004240:	f7fe f90e 	bl	8002460 <HAL_GetTick>
 8004244:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800424c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800425a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800425e:	2b01      	cmp	r3, #1
 8004260:	d00f      	beq.n	8004282 <HAL_SPI_TransmitReceive+0x70>
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004268:	d107      	bne.n	800427a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d103      	bne.n	800427a <HAL_SPI_TransmitReceive+0x68>
 8004272:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004276:	2b04      	cmp	r3, #4
 8004278:	d003      	beq.n	8004282 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800427a:	2302      	movs	r3, #2
 800427c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004280:	e15b      	b.n	800453a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x82>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x82>
 800428e:	887b      	ldrh	r3, [r7, #2]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800429a:	e14e      	b.n	800453a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d003      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2205      	movs	r2, #5
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	887a      	ldrh	r2, [r7, #2]
 80042c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	887a      	ldrh	r2, [r7, #2]
 80042c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	887a      	ldrh	r2, [r7, #2]
 80042d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b40      	cmp	r3, #64	@ 0x40
 80042f2:	d007      	beq.n	8004304 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800430c:	d178      	bne.n	8004400 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_TransmitReceive+0x10a>
 8004316:	8b7b      	ldrh	r3, [r7, #26]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d166      	bne.n	80043ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	881a      	ldrh	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	1c9a      	adds	r2, r3, #2
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004340:	e053      	b.n	80043ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	d11b      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x176>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_SPI_TransmitReceive+0x176>
 800435a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d113      	bne.n	8004388 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	881a      	ldrh	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004370:	1c9a      	adds	r2, r3, #2
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b01      	cmp	r3, #1
 8004394:	d119      	bne.n	80043ca <HAL_SPI_TransmitReceive+0x1b8>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d014      	beq.n	80043ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043aa:	b292      	uxth	r2, r2
 80043ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043c6:	2301      	movs	r3, #1
 80043c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043ca:	f7fe f849 	bl	8002460 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d807      	bhi.n	80043ea <HAL_SPI_TransmitReceive+0x1d8>
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d003      	beq.n	80043ea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80043e8:	e0a7      	b.n	800453a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1a6      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x130>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1a1      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x130>
 80043fe:	e07c      	b.n	80044fa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <HAL_SPI_TransmitReceive+0x1fc>
 8004408:	8b7b      	ldrh	r3, [r7, #26]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d16b      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004434:	e057      	b.n	80044e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b02      	cmp	r3, #2
 8004442:	d11c      	bne.n	800447e <HAL_SPI_TransmitReceive+0x26c>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d017      	beq.n	800447e <HAL_SPI_TransmitReceive+0x26c>
 800444e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d114      	bne.n	800447e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	330c      	adds	r3, #12
 800445e:	7812      	ldrb	r2, [r2, #0]
 8004460:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d119      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x2ae>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d014      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044bc:	2301      	movs	r3, #1
 80044be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044c0:	f7fd ffce 	bl	8002460 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d803      	bhi.n	80044d8 <HAL_SPI_TransmitReceive+0x2c6>
 80044d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d102      	bne.n	80044de <HAL_SPI_TransmitReceive+0x2cc>
 80044d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80044e4:	e029      	b.n	800453a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1a2      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x224>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d19d      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f905 	bl	800470e <SPI_EndRxTxTransaction>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004516:	e010      	b.n	800453a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10b      	bne.n	8004538 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	e000      	b.n	800453a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004538:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800454a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800454e:	4618      	mov	r0, r3
 8004550:	3730      	adds	r7, #48	@ 0x30
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004564:	b2db      	uxtb	r3, r3
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004580:	e04c      	b.n	800461c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d048      	beq.n	800461c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800458a:	f7fd ff69 	bl	8002460 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d902      	bls.n	80045a0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d13d      	bne.n	800461c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045b8:	d111      	bne.n	80045de <SPI_WaitFlagStateUntilTimeout+0x6e>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045c2:	d004      	beq.n	80045ce <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045cc:	d107      	bne.n	80045de <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e6:	d10f      	bne.n	8004608 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004606:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e00f      	b.n	800463c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4013      	ands	r3, r2
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	429a      	cmp	r2, r3
 800462a:	bf0c      	ite	eq
 800462c:	2301      	moveq	r3, #1
 800462e:	2300      	movne	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	429a      	cmp	r2, r3
 8004638:	d1a3      	bne.n	8004582 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004658:	d111      	bne.n	800467e <SPI_EndRxTransaction+0x3a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004662:	d004      	beq.n	800466e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466c:	d107      	bne.n	800467e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800467c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004686:	d12a      	bne.n	80046de <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004690:	d012      	beq.n	80046b8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2200      	movs	r2, #0
 800469a:	2180      	movs	r1, #128	@ 0x80
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff ff67 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d02d      	beq.n	8004704 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e026      	b.n	8004706 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	2101      	movs	r1, #1
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff ff54 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01a      	beq.n	8004704 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e013      	b.n	8004706 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2200      	movs	r2, #0
 80046e6:	2101      	movs	r1, #1
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7ff ff41 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e000      	b.n	8004706 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b086      	sub	sp, #24
 8004712:	af02      	add	r7, sp, #8
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004722:	d112      	bne.n	800474a <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2200      	movs	r2, #0
 800472c:	2180      	movs	r1, #128	@ 0x80
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff ff1e 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d020      	beq.n	800477c <SPI_EndRxTxTransaction+0x6e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e019      	b.n	800477e <SPI_EndRxTxTransaction+0x70>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b05      	cmp	r3, #5
 8004754:	d112      	bne.n	800477c <SPI_EndRxTxTransaction+0x6e>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2200      	movs	r2, #0
 800475e:	2101      	movs	r1, #1
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7ff ff05 	bl	8004570 <SPI_WaitFlagStateUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <SPI_EndRxTxTransaction+0x6e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004770:	f043 0220 	orr.w	r2, r3, #32
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e000      	b.n	800477e <SPI_EndRxTxTransaction+0x70>
      }
    }
  }
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e03f      	b.n	8004818 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fd fc55 	bl	800205c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2224      	movs	r2, #36	@ 0x24
 80047b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f90c 	bl	80049e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b20      	cmp	r3, #32
 800483e:	f040 8083 	bne.w	8004948 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_UART_Transmit+0x2e>
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07b      	b.n	800494a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_UART_Transmit+0x40>
 800485c:	2302      	movs	r3, #2
 800485e:	e074      	b.n	800494a <HAL_UART_Transmit+0x12a>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2221      	movs	r2, #33	@ 0x21
 8004872:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004876:	f7fd fdf3 	bl	8002460 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004888:	e042      	b.n	8004910 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a0:	d122      	bne.n	80048e8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2200      	movs	r2, #0
 80048aa:	2180      	movs	r1, #128	@ 0x80
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f850 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e046      	b.n	800494a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ce:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d103      	bne.n	80048e0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	3302      	adds	r3, #2
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	e017      	b.n	8004910 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	e013      	b.n	8004910 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2200      	movs	r2, #0
 80048f0:	2180      	movs	r1, #128	@ 0x80
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f82d 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e023      	b.n	800494a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	60ba      	str	r2, [r7, #8]
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1b7      	bne.n	800488a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2200      	movs	r2, #0
 8004922:	2140      	movs	r1, #64	@ 0x40
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f814 	bl	8004952 <UART_WaitOnFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e00a      	b.n	800494a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	4613      	mov	r3, r2
 8004960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004962:	e02c      	b.n	80049be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d028      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <UART_WaitOnFlagUntilTimeout+0x30>
 8004972:	f7fd fd75 	bl	8002460 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	429a      	cmp	r2, r3
 8004980:	d21d      	bcs.n	80049be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004990:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e00f      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	bf0c      	ite	eq
 80049ce:	2301      	moveq	r3, #1
 80049d0:	2300      	movne	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d0c3      	beq.n	8004964 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004a28:	f023 030c 	bic.w	r3, r3, #12
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	68f9      	ldr	r1, [r7, #12]
 8004a32:	430b      	orrs	r3, r1
 8004a34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699a      	ldr	r2, [r3, #24]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a54:	f040 80a5 	bne.w	8004ba2 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4aa4      	ldr	r2, [pc, #656]	@ (8004cf0 <UART_SetConfig+0x308>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d14f      	bne.n	8004b02 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a62:	f7ff f8c1 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
 8004a66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009a      	lsls	r2, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	4a9d      	ldr	r2, [pc, #628]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	0119      	lsls	r1, r3, #4
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009a      	lsls	r2, r3, #2
 8004a92:	441a      	add	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a9e:	4b95      	ldr	r3, [pc, #596]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004aa0:	fba3 0302 	umull	r0, r3, r3, r2
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	2064      	movs	r0, #100	@ 0x64
 8004aa8:	fb00 f303 	mul.w	r3, r0, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	3332      	adds	r3, #50	@ 0x32
 8004ab2:	4a90      	ldr	r2, [pc, #576]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ac0:	4419      	add	r1, r3
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009a      	lsls	r2, r3, #2
 8004acc:	441a      	add	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ad8:	4b86      	ldr	r3, [pc, #536]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004ada:	fba3 0302 	umull	r0, r3, r3, r2
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2064      	movs	r0, #100	@ 0x64
 8004ae2:	fb00 f303 	mul.w	r3, r0, r3
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	3332      	adds	r3, #50	@ 0x32
 8004aec:	4a81      	ldr	r2, [pc, #516]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	f003 0207 	and.w	r2, r3, #7
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	440a      	add	r2, r1
 8004afe:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b00:	e0f1      	b.n	8004ce6 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b02:	f7ff f85d 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004b06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009a      	lsls	r2, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	4a75      	ldr	r2, [pc, #468]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	0119      	lsls	r1, r3, #4
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009a      	lsls	r2, r3, #2
 8004b32:	441a      	add	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004b40:	fba3 0302 	umull	r0, r3, r3, r2
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	2064      	movs	r0, #100	@ 0x64
 8004b48:	fb00 f303 	mul.w	r3, r0, r3
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	3332      	adds	r3, #50	@ 0x32
 8004b52:	4a68      	ldr	r2, [pc, #416]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b60:	4419      	add	r1, r3
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009a      	lsls	r2, r3, #2
 8004b6c:	441a      	add	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b78:	4b5e      	ldr	r3, [pc, #376]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2064      	movs	r0, #100	@ 0x64
 8004b82:	fb00 f303 	mul.w	r3, r0, r3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	3332      	adds	r3, #50	@ 0x32
 8004b8c:	4a59      	ldr	r2, [pc, #356]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	f003 0207 	and.w	r2, r3, #7
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]
}
 8004ba0:	e0a1      	b.n	8004ce6 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a52      	ldr	r2, [pc, #328]	@ (8004cf0 <UART_SetConfig+0x308>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d14e      	bne.n	8004c4a <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bac:	f7ff f81c 	bl	8003be8 <HAL_RCC_GetPCLK2Freq>
 8004bb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	009a      	lsls	r2, r3, #2
 8004bbc:	441a      	add	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	0119      	lsls	r1, r3, #4
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009a      	lsls	r2, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004be8:	4b42      	ldr	r3, [pc, #264]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004bea:	fba3 0302 	umull	r0, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2064      	movs	r0, #100	@ 0x64
 8004bf2:	fb00 f303 	mul.w	r3, r0, r3
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	3332      	adds	r3, #50	@ 0x32
 8004bfc:	4a3d      	ldr	r2, [pc, #244]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c08:	4419      	add	r1, r3
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009a      	lsls	r2, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c20:	4b34      	ldr	r3, [pc, #208]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004c22:	fba3 0302 	umull	r0, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2064      	movs	r0, #100	@ 0x64
 8004c2a:	fb00 f303 	mul.w	r3, r0, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	3332      	adds	r3, #50	@ 0x32
 8004c34:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	f003 020f 	and.w	r2, r3, #15
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	440a      	add	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]
}
 8004c48:	e04d      	b.n	8004ce6 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c4a:	f7fe ffb9 	bl	8003bc0 <HAL_RCC_GetPCLK1Freq>
 8004c4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009a      	lsls	r2, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	4a23      	ldr	r2, [pc, #140]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	0119      	lsls	r1, r3, #4
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009a      	lsls	r2, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c86:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004c88:	fba3 0302 	umull	r0, r3, r3, r2
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	2064      	movs	r0, #100	@ 0x64
 8004c90:	fb00 f303 	mul.w	r3, r0, r3
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	3332      	adds	r3, #50	@ 0x32
 8004c9a:	4a16      	ldr	r2, [pc, #88]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ca6:	4419      	add	r1, r3
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	009a      	lsls	r2, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004cc0:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	2064      	movs	r0, #100	@ 0x64
 8004cc8:	fb00 f303 	mul.w	r3, r0, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	3332      	adds	r3, #50	@ 0x32
 8004cd2:	4a08      	ldr	r2, [pc, #32]	@ (8004cf4 <UART_SetConfig+0x30c>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	f003 020f 	and.w	r2, r3, #15
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	51eb851f 	.word	0x51eb851f

08004cf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004cfc:	4904      	ldr	r1, [pc, #16]	@ (8004d10 <MX_FATFS_Init+0x18>)
 8004cfe:	4805      	ldr	r0, [pc, #20]	@ (8004d14 <MX_FATFS_Init+0x1c>)
 8004d00:	f002 f9f8 	bl	80070f4 <FATFS_LinkDriver>
 8004d04:	4603      	mov	r3, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	4b03      	ldr	r3, [pc, #12]	@ (8004d18 <MX_FATFS_Init+0x20>)
 8004d0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	200007c4 	.word	0x200007c4
 8004d14:	20000010 	.word	0x20000010
 8004d18:	200007c0 	.word	0x200007c0

08004d1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004d20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr

08004d2a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	4603      	mov	r3, r0
 8004d32:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fac0 	bl	80012bc <SD_disk_initialize>
 8004d3c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fc fb9c 	bl	8001490 <SD_disk_status>
 8004d58:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
 8004d6e:	4603      	mov	r3, r0
 8004d70:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8004d72:	7bf8      	ldrb	r0, [r7, #15]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	f7fc fb9d 	bl	80014b8 <SD_disk_read>
 8004d7e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8004d98:	7bf8      	ldrb	r0, [r7, #15]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	f7fc fbf4 	bl	800158c <SD_disk_write>
 8004da4:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	4603      	mov	r3, r0
 8004db6:	603a      	str	r2, [r7, #0]
 8004db8:	71fb      	strb	r3, [r7, #7]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004dbe:	79b9      	ldrb	r1, [r7, #6]
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fc fc65 	bl	8001694 <SD_disk_ioctl>
 8004dca:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	4a08      	ldr	r2, [pc, #32]	@ (8004e04 <disk_status+0x30>)
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	79fa      	ldrb	r2, [r7, #7]
 8004dec:	4905      	ldr	r1, [pc, #20]	@ (8004e04 <disk_status+0x30>)
 8004dee:	440a      	add	r2, r1
 8004df0:	7a12      	ldrb	r2, [r2, #8]
 8004df2:	4610      	mov	r0, r2
 8004df4:	4798      	blx	r3
 8004df6:	4603      	mov	r3, r0
 8004df8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	200007f0 	.word	0x200007f0

08004e08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	4a0d      	ldr	r2, [pc, #52]	@ (8004e50 <disk_initialize+0x48>)
 8004e1a:	5cd3      	ldrb	r3, [r2, r3]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d111      	bne.n	8004e44 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	4a0b      	ldr	r2, [pc, #44]	@ (8004e50 <disk_initialize+0x48>)
 8004e24:	2101      	movs	r1, #1
 8004e26:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	4a09      	ldr	r2, [pc, #36]	@ (8004e50 <disk_initialize+0x48>)
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	79fa      	ldrb	r2, [r7, #7]
 8004e36:	4906      	ldr	r1, [pc, #24]	@ (8004e50 <disk_initialize+0x48>)
 8004e38:	440a      	add	r2, r1
 8004e3a:	7a12      	ldrb	r2, [r2, #8]
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4798      	blx	r3
 8004e40:	4603      	mov	r3, r0
 8004e42:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	200007f0 	.word	0x200007f0

08004e54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	607a      	str	r2, [r7, #4]
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	4603      	mov	r3, r0
 8004e62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	4a0a      	ldr	r2, [pc, #40]	@ (8004e90 <disk_read+0x3c>)
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	689c      	ldr	r4, [r3, #8]
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	4a07      	ldr	r2, [pc, #28]	@ (8004e90 <disk_read+0x3c>)
 8004e74:	4413      	add	r3, r2
 8004e76:	7a18      	ldrb	r0, [r3, #8]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	47a0      	blx	r4
 8004e80:	4603      	mov	r3, r0
 8004e82:	75fb      	strb	r3, [r7, #23]
  return res;
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd90      	pop	{r4, r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	200007f0 	.word	0x200007f0

08004e94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed0 <disk_write+0x3c>)
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	68dc      	ldr	r4, [r3, #12]
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	4a07      	ldr	r2, [pc, #28]	@ (8004ed0 <disk_write+0x3c>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	7a18      	ldrb	r0, [r3, #8]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	47a0      	blx	r4
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd90      	pop	{r4, r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	200007f0 	.word	0x200007f0

08004ed4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	603a      	str	r2, [r7, #0]
 8004ede:	71fb      	strb	r3, [r7, #7]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	4a09      	ldr	r2, [pc, #36]	@ (8004f0c <disk_ioctl+0x38>)
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	79fa      	ldrb	r2, [r7, #7]
 8004ef2:	4906      	ldr	r1, [pc, #24]	@ (8004f0c <disk_ioctl+0x38>)
 8004ef4:	440a      	add	r2, r1
 8004ef6:	7a10      	ldrb	r0, [r2, #8]
 8004ef8:	79b9      	ldrb	r1, [r7, #6]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	4798      	blx	r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	73fb      	strb	r3, [r7, #15]
  return res;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	200007f0 	.word	0x200007f0

08004f10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004f20:	89fb      	ldrh	r3, [r7, #14]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	b21a      	sxth	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	b21b      	sxth	r3, r3
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	b21b      	sxth	r3, r3
 8004f30:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004f32:	89fb      	ldrh	r3, [r7, #14]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr

08004f3e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3303      	adds	r3, #3
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	3202      	adds	r2, #2
 8004f56:	7812      	ldrb	r2, [r2, #0]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	3201      	adds	r2, #1
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	7812      	ldrb	r2, [r2, #0]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
	return rv;
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	887a      	ldrh	r2, [r7, #2]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	887b      	ldrh	r3, [r7, #2]
 8004f9c:	0a1b      	lsrs	r3, r3, #8
 8004f9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	607a      	str	r2, [r7, #4]
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	607a      	str	r2, [r7, #4]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	0a1b      	lsrs	r3, r3, #8
 8004fe2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00d      	beq.n	8005042 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	1c53      	adds	r3, r2, #1
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	1c59      	adds	r1, r3, #1
 8005030:	6179      	str	r1, [r7, #20]
 8005032:	7812      	ldrb	r2, [r2, #0]
 8005034:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3b01      	subs	r3, #1
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f1      	bne.n	8005026 <mem_cpy+0x1a>
	}
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	617a      	str	r2, [r7, #20]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3b01      	subs	r3, #1
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f3      	bne.n	800505c <mem_set+0x10>
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005080:	b480      	push	{r7}
 8005082:	b089      	sub	sp, #36	@ 0x24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	61fa      	str	r2, [r7, #28]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	4619      	mov	r1, r3
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	61ba      	str	r2, [r7, #24]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	1acb      	subs	r3, r1, r3
 80050ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <mem_cmp+0x40>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0eb      	beq.n	8005098 <mem_cmp+0x18>

	return r;
 80050c0:	697b      	ldr	r3, [r7, #20]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3724      	adds	r7, #36	@ 0x24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80050d6:	e002      	b.n	80050de <chk_chr+0x12>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3301      	adds	r3, #1
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <chk_chr+0x26>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d1f2      	bne.n	80050d8 <chk_chr+0xc>
	return *str;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	781b      	ldrb	r3, [r3, #0]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr

08005100 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	e029      	b.n	8005168 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005114:	4a26      	ldr	r2, [pc, #152]	@ (80051b0 <chk_lock+0xb0>)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	4413      	add	r3, r2
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01d      	beq.n	800515e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005122:	4a23      	ldr	r2, [pc, #140]	@ (80051b0 <chk_lock+0xb0>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	4413      	add	r3, r2
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d116      	bne.n	8005162 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005134:	4a1e      	ldr	r2, [pc, #120]	@ (80051b0 <chk_lock+0xb0>)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	4413      	add	r3, r2
 800513c:	3304      	adds	r3, #4
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005144:	429a      	cmp	r2, r3
 8005146:	d10c      	bne.n	8005162 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005148:	4a19      	ldr	r2, [pc, #100]	@ (80051b0 <chk_lock+0xb0>)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	4413      	add	r3, r2
 8005150:	3308      	adds	r3, #8
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005158:	429a      	cmp	r2, r3
 800515a:	d102      	bne.n	8005162 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800515c:	e007      	b.n	800516e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800515e:	2301      	movs	r3, #1
 8005160:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3301      	adds	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d9d2      	bls.n	8005114 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d109      	bne.n	8005188 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <chk_lock+0x80>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d101      	bne.n	8005184 <chk_lock+0x84>
 8005180:	2300      	movs	r3, #0
 8005182:	e010      	b.n	80051a6 <chk_lock+0xa6>
 8005184:	2312      	movs	r3, #18
 8005186:	e00e      	b.n	80051a6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d108      	bne.n	80051a0 <chk_lock+0xa0>
 800518e:	4a08      	ldr	r2, [pc, #32]	@ (80051b0 <chk_lock+0xb0>)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	4413      	add	r3, r2
 8005196:	330c      	adds	r3, #12
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519e:	d101      	bne.n	80051a4 <chk_lock+0xa4>
 80051a0:	2310      	movs	r3, #16
 80051a2:	e000      	b.n	80051a6 <chk_lock+0xa6>
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr
 80051b0:	200007d0 	.word	0x200007d0

080051b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80051ba:	2300      	movs	r3, #0
 80051bc:	607b      	str	r3, [r7, #4]
 80051be:	e002      	b.n	80051c6 <enq_lock+0x12>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3301      	adds	r3, #1
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d806      	bhi.n	80051da <enq_lock+0x26>
 80051cc:	4a08      	ldr	r2, [pc, #32]	@ (80051f0 <enq_lock+0x3c>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	4413      	add	r3, r2
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f2      	bne.n	80051c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	bf14      	ite	ne
 80051e0:	2301      	movne	r3, #1
 80051e2:	2300      	moveq	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr
 80051f0:	200007d0 	.word	0x200007d0

080051f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	e01f      	b.n	8005244 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005204:	4a41      	ldr	r2, [pc, #260]	@ (800530c <inc_lock+0x118>)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	4413      	add	r3, r2
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d113      	bne.n	800523e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005216:	4a3d      	ldr	r2, [pc, #244]	@ (800530c <inc_lock+0x118>)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	4413      	add	r3, r2
 800521e:	3304      	adds	r3, #4
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005226:	429a      	cmp	r2, r3
 8005228:	d109      	bne.n	800523e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800522a:	4a38      	ldr	r2, [pc, #224]	@ (800530c <inc_lock+0x118>)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	4413      	add	r3, r2
 8005232:	3308      	adds	r3, #8
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800523a:	429a      	cmp	r2, r3
 800523c:	d006      	beq.n	800524c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d9dc      	bls.n	8005204 <inc_lock+0x10>
 800524a:	e000      	b.n	800524e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800524c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d132      	bne.n	80052ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e002      	b.n	8005260 <inc_lock+0x6c>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3301      	adds	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d806      	bhi.n	8005274 <inc_lock+0x80>
 8005266:	4a29      	ldr	r2, [pc, #164]	@ (800530c <inc_lock+0x118>)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	4413      	add	r3, r2
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f2      	bne.n	800525a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d101      	bne.n	800527e <inc_lock+0x8a>
 800527a:	2300      	movs	r3, #0
 800527c:	e040      	b.n	8005300 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4922      	ldr	r1, [pc, #136]	@ (800530c <inc_lock+0x118>)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	440b      	add	r3, r1
 800528a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	491e      	ldr	r1, [pc, #120]	@ (800530c <inc_lock+0x118>)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	440b      	add	r3, r1
 8005298:	3304      	adds	r3, #4
 800529a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	491a      	ldr	r1, [pc, #104]	@ (800530c <inc_lock+0x118>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	440b      	add	r3, r1
 80052a8:	3308      	adds	r3, #8
 80052aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80052ac:	4a17      	ldr	r2, [pc, #92]	@ (800530c <inc_lock+0x118>)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	4413      	add	r3, r2
 80052b4:	330c      	adds	r3, #12
 80052b6:	2200      	movs	r2, #0
 80052b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <inc_lock+0xe0>
 80052c0:	4a12      	ldr	r2, [pc, #72]	@ (800530c <inc_lock+0x118>)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	4413      	add	r3, r2
 80052c8:	330c      	adds	r3, #12
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <inc_lock+0xe0>
 80052d0:	2300      	movs	r3, #0
 80052d2:	e015      	b.n	8005300 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d108      	bne.n	80052ec <inc_lock+0xf8>
 80052da:	4a0c      	ldr	r2, [pc, #48]	@ (800530c <inc_lock+0x118>)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	4413      	add	r3, r2
 80052e2:	330c      	adds	r3, #12
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	e001      	b.n	80052f0 <inc_lock+0xfc>
 80052ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052f0:	4906      	ldr	r1, [pc, #24]	@ (800530c <inc_lock+0x118>)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	440b      	add	r3, r1
 80052f8:	330c      	adds	r3, #12
 80052fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	200007d0 	.word	0x200007d0

08005310 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3b01      	subs	r3, #1
 800531c:	607b      	str	r3, [r7, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d825      	bhi.n	8005370 <dec_lock+0x60>
		n = Files[i].ctr;
 8005324:	4a16      	ldr	r2, [pc, #88]	@ (8005380 <dec_lock+0x70>)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	4413      	add	r3, r2
 800532c:	330c      	adds	r3, #12
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005332:	89fb      	ldrh	r3, [r7, #14]
 8005334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005338:	d101      	bne.n	800533e <dec_lock+0x2e>
 800533a:	2300      	movs	r3, #0
 800533c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <dec_lock+0x3a>
 8005344:	89fb      	ldrh	r3, [r7, #14]
 8005346:	3b01      	subs	r3, #1
 8005348:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800534a:	4a0d      	ldr	r2, [pc, #52]	@ (8005380 <dec_lock+0x70>)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	4413      	add	r3, r2
 8005352:	330c      	adds	r3, #12
 8005354:	89fa      	ldrh	r2, [r7, #14]
 8005356:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005358:	89fb      	ldrh	r3, [r7, #14]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <dec_lock+0x5a>
 800535e:	4a08      	ldr	r2, [pc, #32]	@ (8005380 <dec_lock+0x70>)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	4413      	add	r3, r2
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	737b      	strb	r3, [r7, #13]
 800536e:	e001      	b.n	8005374 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005370:	2302      	movs	r3, #2
 8005372:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005374:	7b7b      	ldrb	r3, [r7, #13]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr
 8005380:	200007d0 	.word	0x200007d0

08005384 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	e010      	b.n	80053b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005392:	4a0d      	ldr	r2, [pc, #52]	@ (80053c8 <clear_lock+0x44>)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	4413      	add	r3, r2
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d105      	bne.n	80053ae <clear_lock+0x2a>
 80053a2:	4a09      	ldr	r2, [pc, #36]	@ (80053c8 <clear_lock+0x44>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	4413      	add	r3, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3301      	adds	r3, #1
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d9eb      	bls.n	8005392 <clear_lock+0xe>
	}
}
 80053ba:	bf00      	nop
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	200007d0 	.word	0x200007d0

080053cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	78db      	ldrb	r3, [r3, #3]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d034      	beq.n	800544a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	7858      	ldrb	r0, [r3, #1]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80053f0:	2301      	movs	r3, #1
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	f7ff fd4e 	bl	8004e94 <disk_write>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <sync_window+0x38>
			res = FR_DISK_ERR;
 80053fe:	2301      	movs	r3, #1
 8005400:	73fb      	strb	r3, [r7, #15]
 8005402:	e022      	b.n	800544a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	1ad2      	subs	r2, r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	429a      	cmp	r2, r3
 8005418:	d217      	bcs.n	800544a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	789b      	ldrb	r3, [r3, #2]
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e010      	b.n	8005444 <sync_window+0x78>
					wsect += fs->fsize;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	7858      	ldrb	r0, [r3, #1]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005436:	2301      	movs	r3, #1
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	f7ff fd2b 	bl	8004e94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	3b01      	subs	r3, #1
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d8eb      	bhi.n	8005422 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d01b      	beq.n	80054a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff ffad 	bl	80053cc <sync_window>
 8005472:	4603      	mov	r3, r0
 8005474:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d113      	bne.n	80054a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	7858      	ldrb	r0, [r3, #1]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005486:	2301      	movs	r3, #1
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	f7ff fce3 	bl	8004e54 <disk_read>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005494:	f04f 33ff 	mov.w	r3, #4294967295
 8005498:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff ff87 	bl	80053cc <sync_window>
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d158      	bne.n	800557a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d148      	bne.n	8005562 <sync_fs+0xb2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	791b      	ldrb	r3, [r3, #4]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d144      	bne.n	8005562 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3330      	adds	r3, #48	@ 0x30
 80054dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fdb2 	bl	800504c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3330      	adds	r3, #48	@ 0x30
 80054ec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80054f0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fd44 	bl	8004f82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3330      	adds	r3, #48	@ 0x30
 80054fe:	4921      	ldr	r1, [pc, #132]	@ (8005584 <sync_fs+0xd4>)
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff fd58 	bl	8004fb6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3330      	adds	r3, #48	@ 0x30
 800550a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800550e:	491e      	ldr	r1, [pc, #120]	@ (8005588 <sync_fs+0xd8>)
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fd50 	bl	8004fb6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3330      	adds	r3, #48	@ 0x30
 800551a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f7ff fd46 	bl	8004fb6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3330      	adds	r3, #48	@ 0x30
 800552e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f7ff fd3c 	bl	8004fb6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7858      	ldrb	r0, [r3, #1]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005556:	2301      	movs	r3, #1
 8005558:	f7ff fc9c 	bl	8004e94 <disk_write>
			fs->fsi_flag = 0;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	785b      	ldrb	r3, [r3, #1]
 8005566:	2200      	movs	r2, #0
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fcb2 	bl	8004ed4 <disk_ioctl>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <sync_fs+0xca>
 8005576:	2301      	movs	r3, #1
 8005578:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	41615252 	.word	0x41615252
 8005588:	61417272 	.word	0x61417272

0800558c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	3b02      	subs	r3, #2
 800559a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	3b02      	subs	r3, #2
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d301      	bcc.n	80055ac <clust2sect+0x20>
 80055a8:	2300      	movs	r3, #0
 80055aa:	e008      	b.n	80055be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	895b      	ldrh	r3, [r3, #10]
 80055b0:	461a      	mov	r2, r3
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	fb03 f202 	mul.w	r2, r3, r2
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	4413      	add	r3, r2
}
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d904      	bls.n	80055e8 <get_fat+0x20>
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d302      	bcc.n	80055ee <get_fat+0x26>
		val = 1;	/* Internal error */
 80055e8:	2301      	movs	r3, #1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e08e      	b.n	800570c <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295
 80055f2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d061      	beq.n	80056c0 <get_fat+0xf8>
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	dc7b      	bgt.n	80056f8 <get_fat+0x130>
 8005600:	2b01      	cmp	r3, #1
 8005602:	d002      	beq.n	800560a <get_fat+0x42>
 8005604:	2b02      	cmp	r3, #2
 8005606:	d041      	beq.n	800568c <get_fat+0xc4>
 8005608:	e076      	b.n	80056f8 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	085b      	lsrs	r3, r3, #1
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	0a5b      	lsrs	r3, r3, #9
 8005620:	4413      	add	r3, r2
 8005622:	4619      	mov	r1, r3
 8005624:	6938      	ldr	r0, [r7, #16]
 8005626:	f7ff ff15 	bl	8005454 <move_window>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d166      	bne.n	80056fe <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	60fa      	str	r2, [r7, #12]
 8005636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4413      	add	r3, r2
 800563e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005642:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6a1a      	ldr	r2, [r3, #32]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	0a5b      	lsrs	r3, r3, #9
 800564c:	4413      	add	r3, r2
 800564e:	4619      	mov	r1, r3
 8005650:	6938      	ldr	r0, [r7, #16]
 8005652:	f7ff feff 	bl	8005454 <move_window>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d152      	bne.n	8005702 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4413      	add	r3, r2
 8005666:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <get_fat+0xba>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	e002      	b.n	8005688 <get_fat+0xc0>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005688:	617b      	str	r3, [r7, #20]
			break;
 800568a:	e03f      	b.n	800570c <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	6a1a      	ldr	r2, [r3, #32]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	0a1b      	lsrs	r3, r3, #8
 8005694:	4413      	add	r3, r2
 8005696:	4619      	mov	r1, r3
 8005698:	6938      	ldr	r0, [r7, #16]
 800569a:	f7ff fedb 	bl	8005454 <move_window>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d130      	bne.n	8005706 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80056b2:	4413      	add	r3, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fc2b 	bl	8004f10 <ld_word>
 80056ba:	4603      	mov	r3, r0
 80056bc:	617b      	str	r3, [r7, #20]
			break;
 80056be:	e025      	b.n	800570c <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	6a1a      	ldr	r2, [r3, #32]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	09db      	lsrs	r3, r3, #7
 80056c8:	4413      	add	r3, r2
 80056ca:	4619      	mov	r1, r3
 80056cc:	6938      	ldr	r0, [r7, #16]
 80056ce:	f7ff fec1 	bl	8005454 <move_window>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d118      	bne.n	800570a <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80056e6:	4413      	add	r3, r2
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff fc28 	bl	8004f3e <ld_dword>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80056f4:	617b      	str	r3, [r7, #20]
			break;
 80056f6:	e009      	b.n	800570c <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80056f8:	2301      	movs	r3, #1
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	e006      	b.n	800570c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056fe:	bf00      	nop
 8005700:	e004      	b.n	800570c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005702:	bf00      	nop
 8005704:	e002      	b.n	800570c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005706:	bf00      	nop
 8005708:	e000      	b.n	800570c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800570a:	bf00      	nop
		}
	}

	return val;
 800570c:	697b      	ldr	r3, [r7, #20]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005716:	b590      	push	{r4, r7, lr}
 8005718:	b089      	sub	sp, #36	@ 0x24
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005722:	2302      	movs	r3, #2
 8005724:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b01      	cmp	r3, #1
 800572a:	f240 80d9 	bls.w	80058e0 <put_fat+0x1ca>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	429a      	cmp	r2, r3
 8005736:	f080 80d3 	bcs.w	80058e0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b03      	cmp	r3, #3
 8005740:	f000 8096 	beq.w	8005870 <put_fat+0x15a>
 8005744:	2b03      	cmp	r3, #3
 8005746:	f300 80cb 	bgt.w	80058e0 <put_fat+0x1ca>
 800574a:	2b01      	cmp	r3, #1
 800574c:	d002      	beq.n	8005754 <put_fat+0x3e>
 800574e:	2b02      	cmp	r3, #2
 8005750:	d06e      	beq.n	8005830 <put_fat+0x11a>
 8005752:	e0c5      	b.n	80058e0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4413      	add	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1a      	ldr	r2, [r3, #32]
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	0a5b      	lsrs	r3, r3, #9
 800576a:	4413      	add	r3, r2
 800576c:	4619      	mov	r1, r3
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff fe70 	bl	8005454 <move_window>
 8005774:	4603      	mov	r3, r0
 8005776:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005778:	7ffb      	ldrb	r3, [r7, #31]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 80a9 	bne.w	80058d2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	1c59      	adds	r1, r3, #1
 800578a:	61b9      	str	r1, [r7, #24]
 800578c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005790:	4413      	add	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <put_fat+0xa4>
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	b25b      	sxtb	r3, r3
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	b25a      	sxtb	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	b25b      	sxtb	r3, r3
 80057b2:	4313      	orrs	r3, r2
 80057b4:	b25b      	sxtb	r3, r3
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	e001      	b.n	80057be <put_fat+0xa8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	0a5b      	lsrs	r3, r3, #9
 80057d0:	4413      	add	r3, r2
 80057d2:	4619      	mov	r1, r3
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff fe3d 	bl	8005454 <move_window>
 80057da:	4603      	mov	r3, r0
 80057dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057de:	7ffb      	ldrb	r3, [r7, #31]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d178      	bne.n	80058d6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f0:	4413      	add	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <put_fat+0xf0>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	b2db      	uxtb	r3, r3
 8005804:	e00e      	b.n	8005824 <put_fat+0x10e>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	b25b      	sxtb	r3, r3
 800580c:	f023 030f 	bic.w	r3, r3, #15
 8005810:	b25a      	sxtb	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	0a1b      	lsrs	r3, r3, #8
 8005816:	b25b      	sxtb	r3, r3
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	b25b      	sxtb	r3, r3
 800581e:	4313      	orrs	r3, r2
 8005820:	b25b      	sxtb	r3, r3
 8005822:	b2db      	uxtb	r3, r3
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	70da      	strb	r2, [r3, #3]
			break;
 800582e:	e057      	b.n	80058e0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	4413      	add	r3, r2
 800583a:	4619      	mov	r1, r3
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff fe09 	bl	8005454 <move_window>
 8005842:	4603      	mov	r3, r0
 8005844:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005846:	7ffb      	ldrb	r3, [r7, #31]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d146      	bne.n	80058da <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800585a:	4413      	add	r3, r2
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	b292      	uxth	r2, r2
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fb8d 	bl	8004f82 <st_word>
			fs->wflag = 1;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	70da      	strb	r2, [r3, #3]
			break;
 800586e:	e037      	b.n	80058e0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1a      	ldr	r2, [r3, #32]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	09db      	lsrs	r3, r3, #7
 8005878:	4413      	add	r3, r2
 800587a:	4619      	mov	r1, r3
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff fde9 	bl	8005454 <move_window>
 8005882:	4603      	mov	r3, r0
 8005884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005886:	7ffb      	ldrb	r3, [r7, #31]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d128      	bne.n	80058de <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80058a0:	4413      	add	r3, r2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fb4b 	bl	8004f3e <ld_dword>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80058ae:	4323      	orrs	r3, r4
 80058b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80058c0:	4413      	add	r3, r2
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff fb76 	bl	8004fb6 <st_dword>
			fs->wflag = 1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	70da      	strb	r2, [r3, #3]
			break;
 80058d0:	e006      	b.n	80058e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80058d2:	bf00      	nop
 80058d4:	e004      	b.n	80058e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80058d6:	bf00      	nop
 80058d8:	e002      	b.n	80058e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80058da:	bf00      	nop
 80058dc:	e000      	b.n	80058e0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80058de:	bf00      	nop
		}
	}
	return res;
 80058e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3724      	adds	r7, #36	@ 0x24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd90      	pop	{r4, r7, pc}

080058ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b088      	sub	sp, #32
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d904      	bls.n	8005910 <remove_chain+0x26>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	429a      	cmp	r2, r3
 800590e:	d301      	bcc.n	8005914 <remove_chain+0x2a>
 8005910:	2302      	movs	r3, #2
 8005912:	e04b      	b.n	80059ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00c      	beq.n	8005934 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800591a:	f04f 32ff 	mov.w	r2, #4294967295
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	69b8      	ldr	r0, [r7, #24]
 8005922:	f7ff fef8 	bl	8005716 <put_fat>
 8005926:	4603      	mov	r3, r0
 8005928:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800592a:	7ffb      	ldrb	r3, [r7, #31]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <remove_chain+0x4a>
 8005930:	7ffb      	ldrb	r3, [r7, #31]
 8005932:	e03b      	b.n	80059ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7ff fe46 	bl	80055c8 <get_fat>
 800593c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d031      	beq.n	80059a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <remove_chain+0x64>
 800594a:	2302      	movs	r3, #2
 800594c:	e02e      	b.n	80059ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d101      	bne.n	800595a <remove_chain+0x70>
 8005956:	2301      	movs	r3, #1
 8005958:	e028      	b.n	80059ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800595a:	2200      	movs	r2, #0
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	69b8      	ldr	r0, [r7, #24]
 8005960:	f7ff fed9 	bl	8005716 <put_fat>
 8005964:	4603      	mov	r3, r0
 8005966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005968:	7ffb      	ldrb	r3, [r7, #31]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <remove_chain+0x88>
 800596e:	7ffb      	ldrb	r3, [r7, #31]
 8005970:	e01c      	b.n	80059ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	3b02      	subs	r3, #2
 800597c:	429a      	cmp	r2, r3
 800597e:	d20b      	bcs.n	8005998 <remove_chain+0xae>
			fs->free_clst++;
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	791b      	ldrb	r3, [r3, #4]
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	b2da      	uxtb	r2, r3
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d3c6      	bcc.n	8005934 <remove_chain+0x4a>
 80059a6:	e000      	b.n	80059aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80059a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3720      	adds	r7, #32
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <create_chain+0x2c>
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d31b      	bcc.n	8005a18 <create_chain+0x64>
 80059e0:	2301      	movs	r3, #1
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	e018      	b.n	8005a18 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff fded 	bl	80055c8 <get_fat>
 80059ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d801      	bhi.n	80059fa <create_chain+0x46>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e070      	b.n	8005adc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d101      	bne.n	8005a06 <create_chain+0x52>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	e06a      	b.n	8005adc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d201      	bcs.n	8005a14 <create_chain+0x60>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	e063      	b.n	8005adc <create_chain+0x128>
		scl = clst;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d307      	bcc.n	8005a3c <create_chain+0x88>
				ncl = 2;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d901      	bls.n	8005a3c <create_chain+0x88>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e04f      	b.n	8005adc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005a3c:	69f9      	ldr	r1, [r7, #28]
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff fdc2 	bl	80055c8 <get_fat>
 8005a44:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00e      	beq.n	8005a6a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d003      	beq.n	8005a5a <create_chain+0xa6>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d101      	bne.n	8005a5e <create_chain+0xaa>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	e03e      	b.n	8005adc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d1da      	bne.n	8005a1c <create_chain+0x68>
 8005a66:	2300      	movs	r3, #0
 8005a68:	e038      	b.n	8005adc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005a6a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a70:	69f9      	ldr	r1, [r7, #28]
 8005a72:	6938      	ldr	r0, [r7, #16]
 8005a74:	f7ff fe4f 	bl	8005716 <put_fat>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <create_chain+0xe2>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6938      	ldr	r0, [r7, #16]
 8005a8e:	f7ff fe42 	bl	8005716 <put_fat>
 8005a92:	4603      	mov	r3, r0
 8005a94:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d116      	bne.n	8005aca <create_chain+0x116>
		fs->last_clst = ncl;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	3b02      	subs	r3, #2
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d804      	bhi.n	8005aba <create_chain+0x106>
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	1e5a      	subs	r2, r3, #1
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	791b      	ldrb	r3, [r3, #4]
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	711a      	strb	r2, [r3, #4]
 8005ac8:	e007      	b.n	8005ada <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d102      	bne.n	8005ad6 <create_chain+0x122>
 8005ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad4:	e000      	b.n	8005ad8 <create_chain+0x124>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005ada:	69fb      	ldr	r3, [r7, #28]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	3304      	adds	r3, #4
 8005afa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	0a5b      	lsrs	r3, r3, #9
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	8952      	ldrh	r2, [r2, #10]
 8005b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1d1a      	adds	r2, r3, #4
 8005b0e:	613a      	str	r2, [r7, #16]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <clmt_clust+0x3a>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e010      	b.n	8005b40 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d307      	bcc.n	8005b36 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	3304      	adds	r3, #4
 8005b32:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005b34:	e7e9      	b.n	8005b0a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005b36:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	4413      	add	r3, r2
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr

08005b4a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b086      	sub	sp, #24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b60:	d204      	bcs.n	8005b6c <dir_sdi+0x22>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e063      	b.n	8005c38 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <dir_sdi+0x46>
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d902      	bls.n	8005b90 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10c      	bne.n	8005bb0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	8912      	ldrh	r2, [r2, #8]
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d301      	bcc.n	8005ba6 <dir_sdi+0x5c>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e048      	b.n	8005c38 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	61da      	str	r2, [r3, #28]
 8005bae:	e029      	b.n	8005c04 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	895b      	ldrh	r3, [r3, #10]
 8005bb4:	025b      	lsls	r3, r3, #9
 8005bb6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005bb8:	e019      	b.n	8005bee <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff fd02 	bl	80055c8 <get_fat>
 8005bc4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d101      	bne.n	8005bd2 <dir_sdi+0x88>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e032      	b.n	8005c38 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d904      	bls.n	8005be2 <dir_sdi+0x98>
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d301      	bcc.n	8005be6 <dir_sdi+0x9c>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e028      	b.n	8005c38 <dir_sdi+0xee>
			ofs -= csz;
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d2e1      	bcs.n	8005bba <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005bf6:	6979      	ldr	r1, [r7, #20]
 8005bf8:	6938      	ldr	r0, [r7, #16]
 8005bfa:	f7ff fcc7 	bl	800558c <clust2sect>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <dir_sdi+0xcc>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e010      	b.n	8005c38 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	0a5b      	lsrs	r3, r3, #9
 8005c1e:	441a      	add	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c30:	441a      	add	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	3320      	adds	r3, #32
 8005c56:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <dir_next+0x28>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c66:	d301      	bcc.n	8005c6c <dir_next+0x2c>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	e0aa      	b.n	8005dc2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f040 8098 	bne.w	8005da8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	8912      	ldrh	r2, [r2, #8]
 8005c92:	4293      	cmp	r3, r2
 8005c94:	f0c0 8088 	bcc.w	8005da8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	61da      	str	r2, [r3, #28]
 8005c9e:	2304      	movs	r3, #4
 8005ca0:	e08f      	b.n	8005dc2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	0a5b      	lsrs	r3, r3, #9
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	8952      	ldrh	r2, [r2, #10]
 8005caa:	3a01      	subs	r2, #1
 8005cac:	4013      	ands	r3, r2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d17a      	bne.n	8005da8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f7ff fc84 	bl	80055c8 <get_fat>
 8005cc0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d801      	bhi.n	8005ccc <dir_next+0x8c>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e07a      	b.n	8005dc2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d101      	bne.n	8005cd8 <dir_next+0x98>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e074      	b.n	8005dc2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d358      	bcc.n	8005d94 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	61da      	str	r2, [r3, #28]
 8005cee:	2304      	movs	r3, #4
 8005cf0:	e067      	b.n	8005dc2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f7ff fe5a 	bl	80059b4 <create_chain>
 8005d00:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <dir_next+0xcc>
 8005d08:	2307      	movs	r3, #7
 8005d0a:	e05a      	b.n	8005dc2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <dir_next+0xd6>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e055      	b.n	8005dc2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d101      	bne.n	8005d22 <dir_next+0xe2>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e04f      	b.n	8005dc2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff fb52 	bl	80053cc <sync_window>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <dir_next+0xf2>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e047      	b.n	8005dc2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3330      	adds	r3, #48	@ 0x30
 8005d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff f985 	bl	800504c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	6979      	ldr	r1, [r7, #20]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7ff fc1f 	bl	800558c <clust2sect>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d54:	e012      	b.n	8005d7c <dir_next+0x13c>
						fs->wflag = 1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f7ff fb35 	bl	80053cc <sync_window>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <dir_next+0x12c>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e02a      	b.n	8005dc2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	895b      	ldrh	r3, [r3, #10]
 8005d80:	461a      	mov	r2, r3
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d3e6      	bcc.n	8005d56 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005d9a:	6979      	ldr	r1, [r7, #20]
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f7ff fbf5 	bl	800558c <clust2sect>
 8005da2:	4602      	mov	r2, r0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dba:	441a      	add	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b086      	sub	sp, #24
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005dda:	2100      	movs	r1, #0
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff feb4 	bl	8005b4a <dir_sdi>
 8005de2:	4603      	mov	r3, r0
 8005de4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d12b      	bne.n	8005e44 <dir_alloc+0x7a>
		n = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	4619      	mov	r1, r3
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff fb2c 	bl	8005454 <move_window>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d11d      	bne.n	8005e42 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2be5      	cmp	r3, #229	@ 0xe5
 8005e0e:	d004      	beq.n	8005e1a <dir_alloc+0x50>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d107      	bne.n	8005e2a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d102      	bne.n	8005e2e <dir_alloc+0x64>
 8005e28:	e00c      	b.n	8005e44 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005e2e:	2101      	movs	r1, #1
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff ff05 	bl	8005c40 <dir_next>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0d7      	beq.n	8005df0 <dir_alloc+0x26>
 8005e40:	e000      	b.n	8005e44 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005e42:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d101      	bne.n	8005e4e <dir_alloc+0x84>
 8005e4a:	2307      	movs	r3, #7
 8005e4c:	75fb      	strb	r3, [r7, #23]
	return res;
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	331a      	adds	r3, #26
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff f852 	bl	8004f10 <ld_word>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d109      	bne.n	8005e8c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	3314      	adds	r3, #20
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff f847 	bl	8004f10 <ld_word>
 8005e82:	4603      	mov	r3, r0
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	331a      	adds	r3, #26
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	b292      	uxth	r2, r2
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff f868 	bl	8004f82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d109      	bne.n	8005ece <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f103 0214 	add.w	r2, r3, #20
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f7ff f85a 	bl	8004f82 <st_word>
	}
}
 8005ece:	bf00      	nop
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fe2f 	bl	8005b4a <dir_sdi>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <dir_find+0x24>
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	e03e      	b.n	8005f78 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	4619      	mov	r1, r3
 8005f00:	6938      	ldr	r0, [r7, #16]
 8005f02:	f7ff faa7 	bl	8005454 <move_window>
 8005f06:	4603      	mov	r3, r0
 8005f08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d12f      	bne.n	8005f70 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <dir_find+0x4e>
 8005f1e:	2304      	movs	r3, #4
 8005f20:	75fb      	strb	r3, [r7, #23]
 8005f22:	e028      	b.n	8005f76 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	330b      	adds	r3, #11
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	330b      	adds	r3, #11
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	f003 0308 	and.w	r3, r3, #8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <dir_find+0x86>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a18      	ldr	r0, [r3, #32]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3324      	adds	r3, #36	@ 0x24
 8005f4e:	220b      	movs	r2, #11
 8005f50:	4619      	mov	r1, r3
 8005f52:	f7ff f895 	bl	8005080 <mem_cmp>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fe6e 	bl	8005c40 <dir_next>
 8005f64:	4603      	mov	r3, r0
 8005f66:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0c5      	beq.n	8005efa <dir_find+0x24>
 8005f6e:	e002      	b.n	8005f76 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005f70:	bf00      	nop
 8005f72:	e000      	b.n	8005f76 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005f74:	bf00      	nop

	return res;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005f8e:	2101      	movs	r1, #1
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ff1a 	bl	8005dca <dir_alloc>
 8005f96:	4603      	mov	r3, r0
 8005f98:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11c      	bne.n	8005fda <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	68b8      	ldr	r0, [r7, #8]
 8005fa8:	f7ff fa54 	bl	8005454 <move_window>
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d111      	bne.n	8005fda <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff f844 	bl	800504c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a18      	ldr	r0, [r3, #32]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3324      	adds	r3, #36	@ 0x24
 8005fcc:	220b      	movs	r2, #11
 8005fce:	4619      	mov	r1, r3
 8005fd0:	f7ff f81c 	bl	800500c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3324      	adds	r3, #36	@ 0x24
 8005ff8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005ffa:	220b      	movs	r2, #11
 8005ffc:	2120      	movs	r1, #32
 8005ffe:	68b8      	ldr	r0, [r7, #8]
 8006000:	f7ff f824 	bl	800504c <mem_set>
	si = i = 0; ni = 8;
 8006004:	2300      	movs	r3, #0
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	2308      	movs	r3, #8
 800600e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	61fa      	str	r2, [r7, #28]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4413      	add	r3, r2
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800601e:	7efb      	ldrb	r3, [r7, #27]
 8006020:	2b20      	cmp	r3, #32
 8006022:	d94e      	bls.n	80060c2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006024:	7efb      	ldrb	r3, [r7, #27]
 8006026:	2b2f      	cmp	r3, #47	@ 0x2f
 8006028:	d006      	beq.n	8006038 <create_name+0x54>
 800602a:	7efb      	ldrb	r3, [r7, #27]
 800602c:	2b5c      	cmp	r3, #92	@ 0x5c
 800602e:	d110      	bne.n	8006052 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006030:	e002      	b.n	8006038 <create_name+0x54>
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3301      	adds	r3, #1
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b2f      	cmp	r3, #47	@ 0x2f
 8006042:	d0f6      	beq.n	8006032 <create_name+0x4e>
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b5c      	cmp	r3, #92	@ 0x5c
 800604e:	d0f0      	beq.n	8006032 <create_name+0x4e>
			break;
 8006050:	e038      	b.n	80060c4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006052:	7efb      	ldrb	r3, [r7, #27]
 8006054:	2b2e      	cmp	r3, #46	@ 0x2e
 8006056:	d003      	beq.n	8006060 <create_name+0x7c>
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	429a      	cmp	r2, r3
 800605e:	d30c      	bcc.n	800607a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b0b      	cmp	r3, #11
 8006064:	d002      	beq.n	800606c <create_name+0x88>
 8006066:	7efb      	ldrb	r3, [r7, #27]
 8006068:	2b2e      	cmp	r3, #46	@ 0x2e
 800606a:	d001      	beq.n	8006070 <create_name+0x8c>
 800606c:	2306      	movs	r3, #6
 800606e:	e044      	b.n	80060fa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006070:	2308      	movs	r3, #8
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	230b      	movs	r3, #11
 8006076:	617b      	str	r3, [r7, #20]
			continue;
 8006078:	e022      	b.n	80060c0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800607a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800607e:	2b00      	cmp	r3, #0
 8006080:	da04      	bge.n	800608c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006082:	7efb      	ldrb	r3, [r7, #27]
 8006084:	3b80      	subs	r3, #128	@ 0x80
 8006086:	4a1f      	ldr	r2, [pc, #124]	@ (8006104 <create_name+0x120>)
 8006088:	5cd3      	ldrb	r3, [r2, r3]
 800608a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800608c:	7efb      	ldrb	r3, [r7, #27]
 800608e:	4619      	mov	r1, r3
 8006090:	481d      	ldr	r0, [pc, #116]	@ (8006108 <create_name+0x124>)
 8006092:	f7ff f81b 	bl	80050cc <chk_chr>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <create_name+0xbc>
 800609c:	2306      	movs	r3, #6
 800609e:	e02c      	b.n	80060fa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80060a0:	7efb      	ldrb	r3, [r7, #27]
 80060a2:	2b60      	cmp	r3, #96	@ 0x60
 80060a4:	d905      	bls.n	80060b2 <create_name+0xce>
 80060a6:	7efb      	ldrb	r3, [r7, #27]
 80060a8:	2b7a      	cmp	r3, #122	@ 0x7a
 80060aa:	d802      	bhi.n	80060b2 <create_name+0xce>
 80060ac:	7efb      	ldrb	r3, [r7, #27]
 80060ae:	3b20      	subs	r3, #32
 80060b0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1c5a      	adds	r2, r3, #1
 80060b6:	613a      	str	r2, [r7, #16]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	4413      	add	r3, r2
 80060bc:	7efa      	ldrb	r2, [r7, #27]
 80060be:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80060c0:	e7a6      	b.n	8006010 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80060c2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	441a      	add	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <create_name+0xf4>
 80060d4:	2306      	movs	r3, #6
 80060d6:	e010      	b.n	80060fa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2be5      	cmp	r3, #229	@ 0xe5
 80060de:	d102      	bne.n	80060e6 <create_name+0x102>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2205      	movs	r2, #5
 80060e4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80060e6:	7efb      	ldrb	r3, [r7, #27]
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d801      	bhi.n	80060f0 <create_name+0x10c>
 80060ec:	2204      	movs	r2, #4
 80060ee:	e000      	b.n	80060f2 <create_name+0x10e>
 80060f0:	2200      	movs	r2, #0
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	330b      	adds	r3, #11
 80060f6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80060f8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	0800a97c 	.word	0x0800a97c
 8006108:	0800a48c 	.word	0x0800a48c

0800610c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006120:	e002      	b.n	8006128 <follow_path+0x1c>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	3301      	adds	r3, #1
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b2f      	cmp	r3, #47	@ 0x2f
 800612e:	d0f8      	beq.n	8006122 <follow_path+0x16>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b5c      	cmp	r3, #92	@ 0x5c
 8006136:	d0f4      	beq.n	8006122 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2200      	movs	r2, #0
 800613c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b1f      	cmp	r3, #31
 8006144:	d80a      	bhi.n	800615c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2280      	movs	r2, #128	@ 0x80
 800614a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800614e:	2100      	movs	r1, #0
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fcfa 	bl	8005b4a <dir_sdi>
 8006156:	4603      	mov	r3, r0
 8006158:	75fb      	strb	r3, [r7, #23]
 800615a:	e043      	b.n	80061e4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800615c:	463b      	mov	r3, r7
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ff3f 	bl	8005fe4 <create_name>
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d134      	bne.n	80061da <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff feb0 	bl	8005ed6 <dir_find>
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006180:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006188:	7dfb      	ldrb	r3, [r7, #23]
 800618a:	2b04      	cmp	r3, #4
 800618c:	d127      	bne.n	80061de <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800618e:	7afb      	ldrb	r3, [r7, #11]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d122      	bne.n	80061de <follow_path+0xd2>
 8006198:	2305      	movs	r3, #5
 800619a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800619c:	e01f      	b.n	80061de <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800619e:	7afb      	ldrb	r3, [r7, #11]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d11c      	bne.n	80061e2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	799b      	ldrb	r3, [r3, #6]
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d102      	bne.n	80061ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 80061b4:	2305      	movs	r3, #5
 80061b6:	75fb      	strb	r3, [r7, #23]
 80061b8:	e014      	b.n	80061e4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c8:	4413      	add	r3, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff fe43 	bl	8005e58 <ld_clust>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80061d8:	e7c0      	b.n	800615c <follow_path+0x50>
			if (res != FR_OK) break;
 80061da:	bf00      	nop
 80061dc:	e002      	b.n	80061e4 <follow_path+0xd8>
				break;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80061e2:	bf00      	nop
			}
		}
	}

	return res;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b087      	sub	sp, #28
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d031      	beq.n	8006268 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e002      	b.n	8006212 <get_ldnumber+0x24>
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	3301      	adds	r3, #1
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b20      	cmp	r3, #32
 8006218:	d903      	bls.n	8006222 <get_ldnumber+0x34>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006220:	d1f4      	bne.n	800620c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b3a      	cmp	r3, #58	@ 0x3a
 8006228:	d11c      	bne.n	8006264 <get_ldnumber+0x76>
			tp = *path;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	60fa      	str	r2, [r7, #12]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	3b30      	subs	r3, #48	@ 0x30
 800623a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b09      	cmp	r3, #9
 8006240:	d80e      	bhi.n	8006260 <get_ldnumber+0x72>
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	429a      	cmp	r2, r3
 8006248:	d10a      	bne.n	8006260 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d107      	bne.n	8006260 <get_ldnumber+0x72>
					vol = (int)i;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	3301      	adds	r3, #1
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	e002      	b.n	800626a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006268:	693b      	ldr	r3, [r7, #16]
}
 800626a:	4618      	mov	r0, r3
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	70da      	strb	r2, [r3, #3]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f04f 32ff 	mov.w	r2, #4294967295
 800628a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff f8e0 	bl	8005454 <move_window>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <check_fs+0x2a>
 800629a:	2304      	movs	r3, #4
 800629c:	e038      	b.n	8006310 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3330      	adds	r3, #48	@ 0x30
 80062a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fe32 	bl	8004f10 <ld_word>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <check_fs+0x48>
 80062b8:	2303      	movs	r3, #3
 80062ba:	e029      	b.n	8006310 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80062c2:	2be9      	cmp	r3, #233	@ 0xe9
 80062c4:	d009      	beq.n	80062da <check_fs+0x66>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80062cc:	2beb      	cmp	r3, #235	@ 0xeb
 80062ce:	d11e      	bne.n	800630e <check_fs+0x9a>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80062d6:	2b90      	cmp	r3, #144	@ 0x90
 80062d8:	d119      	bne.n	800630e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3330      	adds	r3, #48	@ 0x30
 80062de:	3336      	adds	r3, #54	@ 0x36
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fe2c 	bl	8004f3e <ld_dword>
 80062e6:	4603      	mov	r3, r0
 80062e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80062ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006318 <check_fs+0xa4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d101      	bne.n	80062f6 <check_fs+0x82>
 80062f2:	2300      	movs	r3, #0
 80062f4:	e00c      	b.n	8006310 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3330      	adds	r3, #48	@ 0x30
 80062fa:	3352      	adds	r3, #82	@ 0x52
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe fe1e 	bl	8004f3e <ld_dword>
 8006302:	4603      	mov	r3, r0
 8006304:	4a05      	ldr	r2, [pc, #20]	@ (800631c <check_fs+0xa8>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d101      	bne.n	800630e <check_fs+0x9a>
 800630a:	2300      	movs	r3, #0
 800630c:	e000      	b.n	8006310 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800630e:	2302      	movs	r3, #2
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	00544146 	.word	0x00544146
 800631c:	33544146 	.word	0x33544146

08006320 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b096      	sub	sp, #88	@ 0x58
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	4613      	mov	r3, r2
 800632c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f7ff ff5a 	bl	80061ee <get_ldnumber>
 800633a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800633c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633e:	2b00      	cmp	r3, #0
 8006340:	da01      	bge.n	8006346 <find_volume+0x26>
 8006342:	230b      	movs	r3, #11
 8006344:	e22d      	b.n	80067a2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006346:	4aa1      	ldr	r2, [pc, #644]	@ (80065cc <find_volume+0x2ac>)
 8006348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <find_volume+0x3a>
 8006356:	230c      	movs	r3, #12
 8006358:	e223      	b.n	80067a2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800635e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01a      	beq.n	80063a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	785b      	ldrb	r3, [r3, #1]
 8006374:	4618      	mov	r0, r3
 8006376:	f7fe fd2d 	bl	8004dd4 <disk_status>
 800637a:	4603      	mov	r3, r0
 800637c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006380:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10c      	bne.n	80063a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <find_volume+0x82>
 8006392:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800639e:	230a      	movs	r3, #10
 80063a0:	e1ff      	b.n	80067a2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80063a2:	2300      	movs	r3, #0
 80063a4:	e1fd      	b.n	80067a2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80063a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80063ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80063b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fe fd25 	bl	8004e08 <disk_initialize>
 80063be:	4603      	mov	r3, r0
 80063c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80063c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80063d0:	2303      	movs	r3, #3
 80063d2:	e1e6      	b.n	80067a2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <find_volume+0xca>
 80063da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80063e6:	230a      	movs	r3, #10
 80063e8:	e1db      	b.n	80067a2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80063ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063f2:	f7ff ff3f 	bl	8006274 <check_fs>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80063fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006400:	2b02      	cmp	r3, #2
 8006402:	d149      	bne.n	8006498 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006404:	2300      	movs	r3, #0
 8006406:	643b      	str	r3, [r7, #64]	@ 0x40
 8006408:	e01e      	b.n	8006448 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800640a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006418:	4413      	add	r3, r2
 800641a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	3304      	adds	r3, #4
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d006      	beq.n	8006434 <find_volume+0x114>
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	3308      	adds	r3, #8
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe fd87 	bl	8004f3e <ld_dword>
 8006430:	4602      	mov	r2, r0
 8006432:	e000      	b.n	8006436 <find_volume+0x116>
 8006434:	2200      	movs	r2, #0
 8006436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	3358      	adds	r3, #88	@ 0x58
 800643c:	443b      	add	r3, r7
 800643e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006444:	3301      	adds	r3, #1
 8006446:	643b      	str	r3, [r7, #64]	@ 0x40
 8006448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800644a:	2b03      	cmp	r3, #3
 800644c:	d9dd      	bls.n	800640a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800644e:	2300      	movs	r3, #0
 8006450:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <find_volume+0x13e>
 8006458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800645a:	3b01      	subs	r3, #1
 800645c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800645e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	3358      	adds	r3, #88	@ 0x58
 8006464:	443b      	add	r3, r7
 8006466:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800646a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800646c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <find_volume+0x15e>
 8006472:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006474:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006476:	f7ff fefd 	bl	8006274 <check_fs>
 800647a:	4603      	mov	r3, r0
 800647c:	e000      	b.n	8006480 <find_volume+0x160>
 800647e:	2303      	movs	r3, #3
 8006480:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006484:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006488:	2b01      	cmp	r3, #1
 800648a:	d905      	bls.n	8006498 <find_volume+0x178>
 800648c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800648e:	3301      	adds	r3, #1
 8006490:	643b      	str	r3, [r7, #64]	@ 0x40
 8006492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006494:	2b03      	cmp	r3, #3
 8006496:	d9e2      	bls.n	800645e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006498:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800649c:	2b04      	cmp	r3, #4
 800649e:	d101      	bne.n	80064a4 <find_volume+0x184>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e17e      	b.n	80067a2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80064a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d901      	bls.n	80064b0 <find_volume+0x190>
 80064ac:	230d      	movs	r3, #13
 80064ae:	e178      	b.n	80067a2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80064b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b2:	3330      	adds	r3, #48	@ 0x30
 80064b4:	330b      	adds	r3, #11
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fd2a 	bl	8004f10 <ld_word>
 80064bc:	4603      	mov	r3, r0
 80064be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064c2:	d001      	beq.n	80064c8 <find_volume+0x1a8>
 80064c4:	230d      	movs	r3, #13
 80064c6:	e16c      	b.n	80067a2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	3330      	adds	r3, #48	@ 0x30
 80064cc:	3316      	adds	r3, #22
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fd1e 	bl	8004f10 <ld_word>
 80064d4:	4603      	mov	r3, r0
 80064d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80064d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <find_volume+0x1cc>
 80064de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e0:	3330      	adds	r3, #48	@ 0x30
 80064e2:	3324      	adds	r3, #36	@ 0x24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fe fd2a 	bl	8004f3e <ld_dword>
 80064ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80064ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064f0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80064f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80064f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80064fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fe:	789b      	ldrb	r3, [r3, #2]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d005      	beq.n	8006510 <find_volume+0x1f0>
 8006504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006506:	789b      	ldrb	r3, [r3, #2]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d001      	beq.n	8006510 <find_volume+0x1f0>
 800650c:	230d      	movs	r3, #13
 800650e:	e148      	b.n	80067a2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006512:	789b      	ldrb	r3, [r3, #2]
 8006514:	461a      	mov	r2, r3
 8006516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006518:	fb02 f303 	mul.w	r3, r2, r3
 800651c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006524:	461a      	mov	r2, r3
 8006526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006528:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800652a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652c:	895b      	ldrh	r3, [r3, #10]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <find_volume+0x224>
 8006532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006534:	895b      	ldrh	r3, [r3, #10]
 8006536:	461a      	mov	r2, r3
 8006538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653a:	895b      	ldrh	r3, [r3, #10]
 800653c:	3b01      	subs	r3, #1
 800653e:	4013      	ands	r3, r2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <find_volume+0x228>
 8006544:	230d      	movs	r3, #13
 8006546:	e12c      	b.n	80067a2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654a:	3330      	adds	r3, #48	@ 0x30
 800654c:	3311      	adds	r3, #17
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fcde 	bl	8004f10 <ld_word>
 8006554:	4603      	mov	r3, r0
 8006556:	461a      	mov	r2, r3
 8006558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800655c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655e:	891b      	ldrh	r3, [r3, #8]
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <find_volume+0x24e>
 800656a:	230d      	movs	r3, #13
 800656c:	e119      	b.n	80067a2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006570:	3330      	adds	r3, #48	@ 0x30
 8006572:	3313      	adds	r3, #19
 8006574:	4618      	mov	r0, r3
 8006576:	f7fe fccb 	bl	8004f10 <ld_word>
 800657a:	4603      	mov	r3, r0
 800657c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800657e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006580:	2b00      	cmp	r3, #0
 8006582:	d106      	bne.n	8006592 <find_volume+0x272>
 8006584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006586:	3330      	adds	r3, #48	@ 0x30
 8006588:	3320      	adds	r3, #32
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe fcd7 	bl	8004f3e <ld_dword>
 8006590:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	3330      	adds	r3, #48	@ 0x30
 8006596:	330e      	adds	r3, #14
 8006598:	4618      	mov	r0, r3
 800659a:	f7fe fcb9 	bl	8004f10 <ld_word>
 800659e:	4603      	mov	r3, r0
 80065a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80065a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <find_volume+0x28c>
 80065a8:	230d      	movs	r3, #13
 80065aa:	e0fa      	b.n	80067a2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80065ac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80065ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b0:	4413      	add	r3, r2
 80065b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065b4:	8912      	ldrh	r2, [r2, #8]
 80065b6:	0912      	lsrs	r2, r2, #4
 80065b8:	b292      	uxth	r2, r2
 80065ba:	4413      	add	r3, r2
 80065bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80065be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d204      	bcs.n	80065d0 <find_volume+0x2b0>
 80065c6:	230d      	movs	r3, #13
 80065c8:	e0eb      	b.n	80067a2 <find_volume+0x482>
 80065ca:	bf00      	nop
 80065cc:	200007c8 	.word	0x200007c8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80065d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065d8:	8952      	ldrh	r2, [r2, #10]
 80065da:	fbb3 f3f2 	udiv	r3, r3, r2
 80065de:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <find_volume+0x2ca>
 80065e6:	230d      	movs	r3, #13
 80065e8:	e0db      	b.n	80067a2 <find_volume+0x482>
		fmt = FS_FAT32;
 80065ea:	2303      	movs	r3, #3
 80065ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d802      	bhi.n	8006600 <find_volume+0x2e0>
 80065fa:	2302      	movs	r3, #2
 80065fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006606:	4293      	cmp	r3, r2
 8006608:	d802      	bhi.n	8006610 <find_volume+0x2f0>
 800660a:	2301      	movs	r3, #1
 800660c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006612:	1c9a      	adds	r2, r3, #2
 8006614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006616:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800661c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800661e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006622:	441a      	add	r2, r3
 8006624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006626:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006628:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	441a      	add	r2, r3
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8006632:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006636:	2b03      	cmp	r3, #3
 8006638:	d11e      	bne.n	8006678 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663c:	3330      	adds	r3, #48	@ 0x30
 800663e:	332a      	adds	r3, #42	@ 0x2a
 8006640:	4618      	mov	r0, r3
 8006642:	f7fe fc65 	bl	8004f10 <ld_word>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <find_volume+0x330>
 800664c:	230d      	movs	r3, #13
 800664e:	e0a8      	b.n	80067a2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006652:	891b      	ldrh	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <find_volume+0x33c>
 8006658:	230d      	movs	r3, #13
 800665a:	e0a2      	b.n	80067a2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	3330      	adds	r3, #48	@ 0x30
 8006660:	332c      	adds	r3, #44	@ 0x2c
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fc6b 	bl	8004f3e <ld_dword>
 8006668:	4602      	mov	r2, r0
 800666a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	647b      	str	r3, [r7, #68]	@ 0x44
 8006676:	e01f      	b.n	80066b8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667a:	891b      	ldrh	r3, [r3, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <find_volume+0x364>
 8006680:	230d      	movs	r3, #13
 8006682:	e08e      	b.n	80067a2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	6a1a      	ldr	r2, [r3, #32]
 8006688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800668a:	441a      	add	r2, r3
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006690:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006694:	2b02      	cmp	r3, #2
 8006696:	d103      	bne.n	80066a0 <find_volume+0x380>
 8006698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	e00a      	b.n	80066b6 <find_volume+0x396>
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	4613      	mov	r3, r2
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	4413      	add	r3, r2
 80066aa:	085a      	lsrs	r2, r3, #1
 80066ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80066b6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	699a      	ldr	r2, [r3, #24]
 80066bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066be:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80066c2:	0a5b      	lsrs	r3, r3, #9
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d201      	bcs.n	80066cc <find_volume+0x3ac>
 80066c8:	230d      	movs	r3, #13
 80066ca:	e06a      	b.n	80067a2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80066cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ce:	f04f 32ff 	mov.w	r2, #4294967295
 80066d2:	611a      	str	r2, [r3, #16]
 80066d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066da:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80066dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066de:	2280      	movs	r2, #128	@ 0x80
 80066e0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80066e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d149      	bne.n	800677e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	3330      	adds	r3, #48	@ 0x30
 80066ee:	3330      	adds	r3, #48	@ 0x30
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe fc0d 	bl	8004f10 <ld_word>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d140      	bne.n	800677e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80066fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066fe:	3301      	adds	r3, #1
 8006700:	4619      	mov	r1, r3
 8006702:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006704:	f7fe fea6 	bl	8005454 <move_window>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d137      	bne.n	800677e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800670e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006710:	2200      	movs	r2, #0
 8006712:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006716:	3330      	adds	r3, #48	@ 0x30
 8006718:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe fbf7 	bl	8004f10 <ld_word>
 8006722:	4603      	mov	r3, r0
 8006724:	461a      	mov	r2, r3
 8006726:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800672a:	429a      	cmp	r2, r3
 800672c:	d127      	bne.n	800677e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	3330      	adds	r3, #48	@ 0x30
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe fc03 	bl	8004f3e <ld_dword>
 8006738:	4603      	mov	r3, r0
 800673a:	4a1c      	ldr	r2, [pc, #112]	@ (80067ac <find_volume+0x48c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d11e      	bne.n	800677e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006742:	3330      	adds	r3, #48	@ 0x30
 8006744:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe fbf8 	bl	8004f3e <ld_dword>
 800674e:	4603      	mov	r3, r0
 8006750:	4a17      	ldr	r2, [pc, #92]	@ (80067b0 <find_volume+0x490>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d113      	bne.n	800677e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	3330      	adds	r3, #48	@ 0x30
 800675a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fbed 	bl	8004f3e <ld_dword>
 8006764:	4602      	mov	r2, r0
 8006766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006768:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	3330      	adds	r3, #48	@ 0x30
 800676e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fbe3 	bl	8004f3e <ld_dword>
 8006778:	4602      	mov	r2, r0
 800677a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800677e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006780:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006784:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006786:	4b0b      	ldr	r3, [pc, #44]	@ (80067b4 <find_volume+0x494>)
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	3301      	adds	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	4b09      	ldr	r3, [pc, #36]	@ (80067b4 <find_volume+0x494>)
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	4b08      	ldr	r3, [pc, #32]	@ (80067b4 <find_volume+0x494>)
 8006794:	881a      	ldrh	r2, [r3, #0]
 8006796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006798:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800679a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800679c:	f7fe fdf2 	bl	8005384 <clear_lock>
#endif
	return FR_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3758      	adds	r7, #88	@ 0x58
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	41615252 	.word	0x41615252
 80067b0:	61417272 	.word	0x61417272
 80067b4:	200007cc 	.word	0x200007cc

080067b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80067c2:	2309      	movs	r3, #9
 80067c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01c      	beq.n	8006806 <validate+0x4e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d018      	beq.n	8006806 <validate+0x4e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d013      	beq.n	8006806 <validate+0x4e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	889a      	ldrh	r2, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	88db      	ldrh	r3, [r3, #6]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d10c      	bne.n	8006806 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe faee 	bl	8004dd4 <disk_status>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <validate+0x4e>
			res = FR_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <validate+0x5a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	e000      	b.n	8006814 <validate+0x5c>
 8006812:	2300      	movs	r3, #0
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	6013      	str	r3, [r2, #0]
	return res;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006836:	f107 0310 	add.w	r3, r7, #16
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff fcd7 	bl	80061ee <get_ldnumber>
 8006840:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	2b00      	cmp	r3, #0
 8006846:	da01      	bge.n	800684c <f_mount+0x28>
 8006848:	230b      	movs	r3, #11
 800684a:	e02b      	b.n	80068a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800684c:	4a17      	ldr	r2, [pc, #92]	@ (80068ac <f_mount+0x88>)
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006854:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800685c:	69b8      	ldr	r0, [r7, #24]
 800685e:	f7fe fd91 	bl	8005384 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	490d      	ldr	r1, [pc, #52]	@ (80068ac <f_mount+0x88>)
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <f_mount+0x66>
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d001      	beq.n	800688e <f_mount+0x6a>
 800688a:	2300      	movs	r3, #0
 800688c:	e00a      	b.n	80068a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800688e:	f107 010c 	add.w	r1, r7, #12
 8006892:	f107 0308 	add.w	r3, r7, #8
 8006896:	2200      	movs	r2, #0
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fd41 	bl	8006320 <find_volume>
 800689e:	4603      	mov	r3, r0
 80068a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80068a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3720      	adds	r7, #32
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	200007c8 	.word	0x200007c8

080068b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b098      	sub	sp, #96	@ 0x60
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <f_open+0x18>
 80068c4:	2309      	movs	r3, #9
 80068c6:	e1a9      	b.n	8006c1c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80068d0:	79fa      	ldrb	r2, [r7, #7]
 80068d2:	f107 0110 	add.w	r1, r7, #16
 80068d6:	f107 0308 	add.w	r3, r7, #8
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff fd20 	bl	8006320 <find_volume>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80068e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f040 818d 	bne.w	8006c0a <f_open+0x35a>
		dj.obj.fs = fs;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	f107 0314 	add.w	r3, r7, #20
 80068fa:	4611      	mov	r1, r2
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff fc05 	bl	800610c <follow_path>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006908:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800690c:	2b00      	cmp	r3, #0
 800690e:	d118      	bne.n	8006942 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006910:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006914:	b25b      	sxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	da03      	bge.n	8006922 <f_open+0x72>
				res = FR_INVALID_NAME;
 800691a:	2306      	movs	r3, #6
 800691c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006920:	e00f      	b.n	8006942 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	2b01      	cmp	r3, #1
 8006926:	bf8c      	ite	hi
 8006928:	2301      	movhi	r3, #1
 800692a:	2300      	movls	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	f107 0314 	add.w	r3, r7, #20
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fbe2 	bl	8005100 <chk_lock>
 800693c:	4603      	mov	r3, r0
 800693e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	f003 031c 	and.w	r3, r3, #28
 8006948:	2b00      	cmp	r3, #0
 800694a:	d07f      	beq.n	8006a4c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800694c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006950:	2b00      	cmp	r3, #0
 8006952:	d017      	beq.n	8006984 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006954:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006958:	2b04      	cmp	r3, #4
 800695a:	d10e      	bne.n	800697a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800695c:	f7fe fc2a 	bl	80051b4 <enq_lock>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d006      	beq.n	8006974 <f_open+0xc4>
 8006966:	f107 0314 	add.w	r3, r7, #20
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff fb08 	bl	8005f80 <dir_register>
 8006970:	4603      	mov	r3, r0
 8006972:	e000      	b.n	8006976 <f_open+0xc6>
 8006974:	2312      	movs	r3, #18
 8006976:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	f043 0308 	orr.w	r3, r3, #8
 8006980:	71fb      	strb	r3, [r7, #7]
 8006982:	e010      	b.n	80069a6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006984:	7ebb      	ldrb	r3, [r7, #26]
 8006986:	f003 0311 	and.w	r3, r3, #17
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <f_open+0xe6>
					res = FR_DENIED;
 800698e:	2307      	movs	r3, #7
 8006990:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006994:	e007      	b.n	80069a6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006996:	79fb      	ldrb	r3, [r7, #7]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <f_open+0xf6>
 80069a0:	2308      	movs	r3, #8
 80069a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80069a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d168      	bne.n	8006a80 <f_open+0x1d0>
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d063      	beq.n	8006a80 <f_open+0x1d0>
				dw = GET_FATTIME();
 80069b8:	f7fe f9b0 	bl	8004d1c <get_fattime>
 80069bc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80069be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c0:	330e      	adds	r3, #14
 80069c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fe faf6 	bl	8004fb6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80069ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069cc:	3316      	adds	r3, #22
 80069ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe faf0 	bl	8004fb6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80069d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d8:	330b      	adds	r3, #11
 80069da:	2220      	movs	r2, #32
 80069dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069e2:	4611      	mov	r1, r2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff fa37 	bl	8005e58 <ld_clust>
 80069ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80069f0:	2200      	movs	r2, #0
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fa4f 	bl	8005e96 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	331c      	adds	r3, #28
 80069fc:	2100      	movs	r1, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fad9 	bl	8004fb6 <st_dword>
					fs->wflag = 1;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2201      	movs	r2, #1
 8006a08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d037      	beq.n	8006a80 <f_open+0x1d0>
						dw = fs->winsect;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006a16:	f107 0314 	add.w	r3, r7, #20
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe ff63 	bl	80058ea <remove_chain>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d126      	bne.n	8006a80 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fd0c 	bl	8005454 <move_window>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a46:	3a01      	subs	r2, #1
 8006a48:	60da      	str	r2, [r3, #12]
 8006a4a:	e019      	b.n	8006a80 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d115      	bne.n	8006a80 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006a54:	7ebb      	ldrb	r3, [r7, #26]
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <f_open+0x1b6>
					res = FR_NO_FILE;
 8006a5e:	2304      	movs	r3, #4
 8006a60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006a64:	e00c      	b.n	8006a80 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <f_open+0x1d0>
 8006a70:	7ebb      	ldrb	r3, [r7, #26]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <f_open+0x1d0>
						res = FR_DENIED;
 8006a7a:	2307      	movs	r3, #7
 8006a7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006a80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d126      	bne.n	8006ad6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006aa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	bf8c      	ite	hi
 8006aae:	2301      	movhi	r3, #1
 8006ab0:	2300      	movls	r3, #0
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f107 0314 	add.w	r3, r7, #20
 8006aba:	4611      	mov	r1, r2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe fb99 	bl	80051f4 <inc_lock>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d102      	bne.n	8006ad6 <f_open+0x226>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f040 8095 	bne.w	8006c0a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff f9b6 	bl	8005e58 <ld_clust>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af4:	331c      	adds	r3, #28
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fa21 	bl	8004f3e <ld_dword>
 8006afc:	4602      	mov	r2, r0
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	88da      	ldrh	r2, [r3, #6]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	79fa      	ldrb	r2, [r7, #7]
 8006b1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3330      	adds	r3, #48	@ 0x30
 8006b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b36:	2100      	movs	r1, #0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe fa87 	bl	800504c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d060      	beq.n	8006c0a <f_open+0x35a>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d05c      	beq.n	8006c0a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	895b      	ldrh	r3, [r3, #10]
 8006b5c:	025b      	lsls	r3, r3, #9
 8006b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b6c:	e016      	b.n	8006b9c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fd28 	bl	80055c8 <get_fat>
 8006b78:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006b7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d802      	bhi.n	8006b86 <f_open+0x2d6>
 8006b80:	2302      	movs	r3, #2
 8006b82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006b86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8c:	d102      	bne.n	8006b94 <f_open+0x2e4>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d103      	bne.n	8006bac <f_open+0x2fc>
 8006ba4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d8e0      	bhi.n	8006b6e <f_open+0x2be>
				}
				fp->clust = clst;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006bb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d127      	bne.n	8006c0a <f_open+0x35a>
 8006bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d022      	beq.n	8006c0a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe fcdf 	bl	800558c <clust2sect>
 8006bce:	6478      	str	r0, [r7, #68]	@ 0x44
 8006bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <f_open+0x32e>
						res = FR_INT_ERR;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006bdc:	e015      	b.n	8006c0a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006be0:	0a5a      	lsrs	r2, r3, #9
 8006be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006be4:	441a      	add	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	7858      	ldrb	r0, [r3, #1]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a1a      	ldr	r2, [r3, #32]
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f7fe f92b 	bl	8004e54 <disk_read>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <f_open+0x35a>
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006c0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <f_open+0x368>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006c18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3760      	adds	r7, #96	@ 0x60
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08c      	sub	sp, #48	@ 0x30
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f107 0210 	add.w	r2, r7, #16
 8006c42:	4611      	mov	r1, r2
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fdb7 	bl	80067b8 <validate>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d107      	bne.n	8006c68 <f_write+0x44>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	7d5b      	ldrb	r3, [r3, #21]
 8006c5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006c60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <f_write+0x4a>
 8006c68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c6c:	e14b      	b.n	8006f06 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	7d1b      	ldrb	r3, [r3, #20]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <f_write+0x5a>
 8006c7a:	2307      	movs	r3, #7
 8006c7c:	e143      	b.n	8006f06 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	441a      	add	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	f080 812d 	bcs.w	8006eea <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	43db      	mvns	r3, r3
 8006c96:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006c98:	e127      	b.n	8006eea <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f040 80e3 	bne.w	8006e6e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	0a5b      	lsrs	r3, r3, #9
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	8952      	ldrh	r2, [r2, #10]
 8006cb2:	3a01      	subs	r2, #1
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d143      	bne.n	8006d46 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10c      	bne.n	8006ce0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d11a      	bne.n	8006d08 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe fe6c 	bl	80059b4 <create_chain>
 8006cdc:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006cde:	e013      	b.n	8006d08 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d007      	beq.n	8006cf8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	4619      	mov	r1, r3
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7fe fef8 	bl	8005ae4 <clmt_clust>
 8006cf4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006cf6:	e007      	b.n	8006d08 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4610      	mov	r0, r2
 8006d02:	f7fe fe57 	bl	80059b4 <create_chain>
 8006d06:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80f2 	beq.w	8006ef4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d104      	bne.n	8006d20 <f_write+0xfc>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	755a      	strb	r2, [r3, #21]
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e0f2      	b.n	8006f06 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d26:	d104      	bne.n	8006d32 <f_write+0x10e>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	755a      	strb	r2, [r3, #21]
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e0e9      	b.n	8006f06 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d36:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d102      	bne.n	8006d46 <f_write+0x122>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d44:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	7d1b      	ldrb	r3, [r3, #20]
 8006d4a:	b25b      	sxtb	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	da18      	bge.n	8006d82 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	7858      	ldrb	r0, [r3, #1]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1a      	ldr	r2, [r3, #32]
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f7fe f898 	bl	8004e94 <disk_write>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <f_write+0x150>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	755a      	strb	r2, [r3, #21]
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0c8      	b.n	8006f06 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	7d1b      	ldrb	r3, [r3, #20]
 8006d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	f7fe fbfe 	bl	800558c <clust2sect>
 8006d90:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d104      	bne.n	8006da2 <f_write+0x17e>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	755a      	strb	r2, [r3, #21]
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e0b1      	b.n	8006f06 <f_write+0x2e2>
			sect += csect;
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	4413      	add	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	0a5b      	lsrs	r3, r3, #9
 8006dae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d03c      	beq.n	8006e30 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	4413      	add	r3, r2
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	8952      	ldrh	r2, [r2, #10]
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d905      	bls.n	8006dd0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	895b      	ldrh	r3, [r3, #10]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	7858      	ldrb	r0, [r3, #1]
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	69f9      	ldr	r1, [r7, #28]
 8006dda:	f7fe f85b 	bl	8004e94 <disk_write>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <f_write+0x1ca>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	755a      	strb	r2, [r3, #21]
 8006dea:	2301      	movs	r3, #1
 8006dec:	e08b      	b.n	8006f06 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1a      	ldr	r2, [r3, #32]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	6a3a      	ldr	r2, [r7, #32]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d915      	bls.n	8006e28 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a1a      	ldr	r2, [r3, #32]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	025b      	lsls	r3, r3, #9
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e14:	4619      	mov	r1, r3
 8006e16:	f7fe f8f9 	bl	800500c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	7d1b      	ldrb	r3, [r3, #20]
 8006e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	025b      	lsls	r3, r3, #9
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006e2e:	e03f      	b.n	8006eb0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d016      	beq.n	8006e68 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	699a      	ldr	r2, [r3, #24]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d210      	bcs.n	8006e68 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	7858      	ldrb	r0, [r3, #1]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006e50:	2301      	movs	r3, #1
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	f7fd fffe 	bl	8004e54 <disk_read>
 8006e58:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	755a      	strb	r2, [r3, #21]
 8006e64:	2301      	movs	r3, #1
 8006e66:	e04e      	b.n	8006f06 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e76:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006e7a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d901      	bls.n	8006e88 <f_write+0x264>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e96:	4413      	add	r3, r2
 8006e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe f8b5 	bl	800500c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	7d1b      	ldrb	r3, [r3, #20]
 8006ea6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	4413      	add	r3, r2
 8006eb6:	61fb      	str	r3, [r7, #28]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	699a      	ldr	r2, [r3, #24]
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	441a      	add	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	619a      	str	r2, [r3, #24]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	bf38      	it	cc
 8006ed0:	461a      	movcc	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	60da      	str	r2, [r3, #12]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	441a      	add	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f47f aed4 	bne.w	8006c9a <f_write+0x76>
 8006ef2:	e000      	b.n	8006ef6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006ef4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	7d1b      	ldrb	r3, [r3, #20]
 8006efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3730      	adds	r7, #48	@ 0x30
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f107 0208 	add.w	r2, r7, #8
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff fc4a 	bl	80067b8 <validate>
 8006f24:	4603      	mov	r3, r0
 8006f26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d168      	bne.n	8007000 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7d1b      	ldrb	r3, [r3, #20]
 8006f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d062      	beq.n	8007000 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	7d1b      	ldrb	r3, [r3, #20]
 8006f3e:	b25b      	sxtb	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da15      	bge.n	8006f70 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	7858      	ldrb	r0, [r3, #1]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1a      	ldr	r2, [r3, #32]
 8006f52:	2301      	movs	r3, #1
 8006f54:	f7fd ff9e 	bl	8004e94 <disk_write>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <f_sync+0x54>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e04f      	b.n	8007002 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	7d1b      	ldrb	r3, [r3, #20]
 8006f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006f70:	f7fd fed4 	bl	8004d1c <get_fattime>
 8006f74:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f7fe fa68 	bl	8005454 <move_window>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d138      	bne.n	8007000 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f92:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	330b      	adds	r3, #11
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	330b      	adds	r3, #11
 8006f9e:	f042 0220 	orr.w	r2, r2, #32
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	68f9      	ldr	r1, [r7, #12]
 8006fb2:	f7fe ff70 	bl	8005e96 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f103 021c 	add.w	r2, r3, #28
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f7fd fff7 	bl	8004fb6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3316      	adds	r3, #22
 8006fcc:	6939      	ldr	r1, [r7, #16]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fd fff1 	bl	8004fb6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3312      	adds	r3, #18
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fd ffd1 	bl	8004f82 <st_word>
					fs->wflag = 1;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe fa61 	bl	80054b0 <sync_fs>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7d1b      	ldrb	r3, [r3, #20]
 8006ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007000:	7dfb      	ldrb	r3, [r7, #23]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff ff7b 	bl	8006f0e <f_sync>
 8007018:	4603      	mov	r3, r0
 800701a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d118      	bne.n	8007054 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f107 0208 	add.w	r2, r7, #8
 8007028:	4611      	mov	r1, r2
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fbc4 	bl	80067b8 <validate>
 8007030:	4603      	mov	r3, r0
 8007032:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10c      	bne.n	8007054 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe f966 	bl	8005310 <dec_lock>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d102      	bne.n	8007054 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007054:	7bfb      	ldrb	r3, [r7, #15]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	4613      	mov	r3, r2
 800706c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800706e:	2301      	movs	r3, #1
 8007070:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007076:	4b1e      	ldr	r3, [pc, #120]	@ (80070f0 <FATFS_LinkDriverEx+0x90>)
 8007078:	7a5b      	ldrb	r3, [r3, #9]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d131      	bne.n	80070e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007080:	4b1b      	ldr	r3, [pc, #108]	@ (80070f0 <FATFS_LinkDriverEx+0x90>)
 8007082:	7a5b      	ldrb	r3, [r3, #9]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	4b19      	ldr	r3, [pc, #100]	@ (80070f0 <FATFS_LinkDriverEx+0x90>)
 800708a:	2100      	movs	r1, #0
 800708c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800708e:	4b18      	ldr	r3, [pc, #96]	@ (80070f0 <FATFS_LinkDriverEx+0x90>)
 8007090:	7a5b      	ldrb	r3, [r3, #9]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	4a16      	ldr	r2, [pc, #88]	@ (80070f0 <FATFS_LinkDriverEx+0x90>)
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800709e:	4b14      	ldr	r3, [pc, #80]	@ (80070f0 <FATFS_LinkDriverEx+0x90>)
 80070a0:	7a5b      	ldrb	r3, [r3, #9]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	4b12      	ldr	r3, [pc, #72]	@ (80070f0 <FATFS_LinkDriverEx+0x90>)
 80070a8:	4413      	add	r3, r2
 80070aa:	79fa      	ldrb	r2, [r7, #7]
 80070ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80070ae:	4b10      	ldr	r3, [pc, #64]	@ (80070f0 <FATFS_LinkDriverEx+0x90>)
 80070b0:	7a5b      	ldrb	r3, [r3, #9]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	b2d1      	uxtb	r1, r2
 80070b8:	4a0d      	ldr	r2, [pc, #52]	@ (80070f0 <FATFS_LinkDriverEx+0x90>)
 80070ba:	7251      	strb	r1, [r2, #9]
 80070bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80070be:	7dbb      	ldrb	r3, [r7, #22]
 80070c0:	3330      	adds	r3, #48	@ 0x30
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	3301      	adds	r3, #1
 80070cc:	223a      	movs	r2, #58	@ 0x3a
 80070ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	3302      	adds	r3, #2
 80070d4:	222f      	movs	r2, #47	@ 0x2f
 80070d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3303      	adds	r3, #3
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr
 80070f0:	200007f0 	.word	0x200007f0

080070f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80070fe:	2200      	movs	r2, #0
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff ffac 	bl	8007060 <FATFS_LinkDriverEx>
 8007108:	4603      	mov	r3, r0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <malloc>:
 8007114:	4b02      	ldr	r3, [pc, #8]	@ (8007120 <malloc+0xc>)
 8007116:	4601      	mov	r1, r0
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	f000 b82d 	b.w	8007178 <_malloc_r>
 800711e:	bf00      	nop
 8007120:	20000030 	.word	0x20000030

08007124 <free>:
 8007124:	4b02      	ldr	r3, [pc, #8]	@ (8007130 <free+0xc>)
 8007126:	4601      	mov	r1, r0
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	f001 be39 	b.w	8008da0 <_free_r>
 800712e:	bf00      	nop
 8007130:	20000030 	.word	0x20000030

08007134 <sbrk_aligned>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	4e0f      	ldr	r6, [pc, #60]	@ (8007174 <sbrk_aligned+0x40>)
 8007138:	460c      	mov	r4, r1
 800713a:	6831      	ldr	r1, [r6, #0]
 800713c:	4605      	mov	r5, r0
 800713e:	b911      	cbnz	r1, 8007146 <sbrk_aligned+0x12>
 8007140:	f000 ff80 	bl	8008044 <_sbrk_r>
 8007144:	6030      	str	r0, [r6, #0]
 8007146:	4621      	mov	r1, r4
 8007148:	4628      	mov	r0, r5
 800714a:	f000 ff7b 	bl	8008044 <_sbrk_r>
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	d103      	bne.n	800715a <sbrk_aligned+0x26>
 8007152:	f04f 34ff 	mov.w	r4, #4294967295
 8007156:	4620      	mov	r0, r4
 8007158:	bd70      	pop	{r4, r5, r6, pc}
 800715a:	1cc4      	adds	r4, r0, #3
 800715c:	f024 0403 	bic.w	r4, r4, #3
 8007160:	42a0      	cmp	r0, r4
 8007162:	d0f8      	beq.n	8007156 <sbrk_aligned+0x22>
 8007164:	1a21      	subs	r1, r4, r0
 8007166:	4628      	mov	r0, r5
 8007168:	f000 ff6c 	bl	8008044 <_sbrk_r>
 800716c:	3001      	adds	r0, #1
 800716e:	d1f2      	bne.n	8007156 <sbrk_aligned+0x22>
 8007170:	e7ef      	b.n	8007152 <sbrk_aligned+0x1e>
 8007172:	bf00      	nop
 8007174:	200007fc 	.word	0x200007fc

08007178 <_malloc_r>:
 8007178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800717c:	1ccd      	adds	r5, r1, #3
 800717e:	f025 0503 	bic.w	r5, r5, #3
 8007182:	3508      	adds	r5, #8
 8007184:	2d0c      	cmp	r5, #12
 8007186:	bf38      	it	cc
 8007188:	250c      	movcc	r5, #12
 800718a:	2d00      	cmp	r5, #0
 800718c:	4606      	mov	r6, r0
 800718e:	db01      	blt.n	8007194 <_malloc_r+0x1c>
 8007190:	42a9      	cmp	r1, r5
 8007192:	d904      	bls.n	800719e <_malloc_r+0x26>
 8007194:	230c      	movs	r3, #12
 8007196:	6033      	str	r3, [r6, #0]
 8007198:	2000      	movs	r0, #0
 800719a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800719e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007274 <_malloc_r+0xfc>
 80071a2:	f000 f869 	bl	8007278 <__malloc_lock>
 80071a6:	f8d8 3000 	ldr.w	r3, [r8]
 80071aa:	461c      	mov	r4, r3
 80071ac:	bb44      	cbnz	r4, 8007200 <_malloc_r+0x88>
 80071ae:	4629      	mov	r1, r5
 80071b0:	4630      	mov	r0, r6
 80071b2:	f7ff ffbf 	bl	8007134 <sbrk_aligned>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	4604      	mov	r4, r0
 80071ba:	d158      	bne.n	800726e <_malloc_r+0xf6>
 80071bc:	f8d8 4000 	ldr.w	r4, [r8]
 80071c0:	4627      	mov	r7, r4
 80071c2:	2f00      	cmp	r7, #0
 80071c4:	d143      	bne.n	800724e <_malloc_r+0xd6>
 80071c6:	2c00      	cmp	r4, #0
 80071c8:	d04b      	beq.n	8007262 <_malloc_r+0xea>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	4639      	mov	r1, r7
 80071ce:	4630      	mov	r0, r6
 80071d0:	eb04 0903 	add.w	r9, r4, r3
 80071d4:	f000 ff36 	bl	8008044 <_sbrk_r>
 80071d8:	4581      	cmp	r9, r0
 80071da:	d142      	bne.n	8007262 <_malloc_r+0xea>
 80071dc:	6821      	ldr	r1, [r4, #0]
 80071de:	4630      	mov	r0, r6
 80071e0:	1a6d      	subs	r5, r5, r1
 80071e2:	4629      	mov	r1, r5
 80071e4:	f7ff ffa6 	bl	8007134 <sbrk_aligned>
 80071e8:	3001      	adds	r0, #1
 80071ea:	d03a      	beq.n	8007262 <_malloc_r+0xea>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	442b      	add	r3, r5
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	f8d8 3000 	ldr.w	r3, [r8]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	bb62      	cbnz	r2, 8007254 <_malloc_r+0xdc>
 80071fa:	f8c8 7000 	str.w	r7, [r8]
 80071fe:	e00f      	b.n	8007220 <_malloc_r+0xa8>
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	1b52      	subs	r2, r2, r5
 8007204:	d420      	bmi.n	8007248 <_malloc_r+0xd0>
 8007206:	2a0b      	cmp	r2, #11
 8007208:	d917      	bls.n	800723a <_malloc_r+0xc2>
 800720a:	1961      	adds	r1, r4, r5
 800720c:	42a3      	cmp	r3, r4
 800720e:	6025      	str	r5, [r4, #0]
 8007210:	bf18      	it	ne
 8007212:	6059      	strne	r1, [r3, #4]
 8007214:	6863      	ldr	r3, [r4, #4]
 8007216:	bf08      	it	eq
 8007218:	f8c8 1000 	streq.w	r1, [r8]
 800721c:	5162      	str	r2, [r4, r5]
 800721e:	604b      	str	r3, [r1, #4]
 8007220:	4630      	mov	r0, r6
 8007222:	f000 f82f 	bl	8007284 <__malloc_unlock>
 8007226:	f104 000b 	add.w	r0, r4, #11
 800722a:	1d23      	adds	r3, r4, #4
 800722c:	f020 0007 	bic.w	r0, r0, #7
 8007230:	1ac2      	subs	r2, r0, r3
 8007232:	bf1c      	itt	ne
 8007234:	1a1b      	subne	r3, r3, r0
 8007236:	50a3      	strne	r3, [r4, r2]
 8007238:	e7af      	b.n	800719a <_malloc_r+0x22>
 800723a:	6862      	ldr	r2, [r4, #4]
 800723c:	42a3      	cmp	r3, r4
 800723e:	bf0c      	ite	eq
 8007240:	f8c8 2000 	streq.w	r2, [r8]
 8007244:	605a      	strne	r2, [r3, #4]
 8007246:	e7eb      	b.n	8007220 <_malloc_r+0xa8>
 8007248:	4623      	mov	r3, r4
 800724a:	6864      	ldr	r4, [r4, #4]
 800724c:	e7ae      	b.n	80071ac <_malloc_r+0x34>
 800724e:	463c      	mov	r4, r7
 8007250:	687f      	ldr	r7, [r7, #4]
 8007252:	e7b6      	b.n	80071c2 <_malloc_r+0x4a>
 8007254:	461a      	mov	r2, r3
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	42a3      	cmp	r3, r4
 800725a:	d1fb      	bne.n	8007254 <_malloc_r+0xdc>
 800725c:	2300      	movs	r3, #0
 800725e:	6053      	str	r3, [r2, #4]
 8007260:	e7de      	b.n	8007220 <_malloc_r+0xa8>
 8007262:	230c      	movs	r3, #12
 8007264:	4630      	mov	r0, r6
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	f000 f80c 	bl	8007284 <__malloc_unlock>
 800726c:	e794      	b.n	8007198 <_malloc_r+0x20>
 800726e:	6005      	str	r5, [r0, #0]
 8007270:	e7d6      	b.n	8007220 <_malloc_r+0xa8>
 8007272:	bf00      	nop
 8007274:	20000800 	.word	0x20000800

08007278 <__malloc_lock>:
 8007278:	4801      	ldr	r0, [pc, #4]	@ (8007280 <__malloc_lock+0x8>)
 800727a:	f000 bf30 	b.w	80080de <__retarget_lock_acquire_recursive>
 800727e:	bf00      	nop
 8007280:	20000944 	.word	0x20000944

08007284 <__malloc_unlock>:
 8007284:	4801      	ldr	r0, [pc, #4]	@ (800728c <__malloc_unlock+0x8>)
 8007286:	f000 bf2b 	b.w	80080e0 <__retarget_lock_release_recursive>
 800728a:	bf00      	nop
 800728c:	20000944 	.word	0x20000944

08007290 <__cvt>:
 8007290:	2b00      	cmp	r3, #0
 8007292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007296:	461d      	mov	r5, r3
 8007298:	bfbb      	ittet	lt
 800729a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800729e:	461d      	movlt	r5, r3
 80072a0:	2300      	movge	r3, #0
 80072a2:	232d      	movlt	r3, #45	@ 0x2d
 80072a4:	b088      	sub	sp, #32
 80072a6:	4614      	mov	r4, r2
 80072a8:	bfb8      	it	lt
 80072aa:	4614      	movlt	r4, r2
 80072ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072ae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80072b0:	7013      	strb	r3, [r2, #0]
 80072b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80072b8:	f023 0820 	bic.w	r8, r3, #32
 80072bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072c0:	d005      	beq.n	80072ce <__cvt+0x3e>
 80072c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072c6:	d100      	bne.n	80072ca <__cvt+0x3a>
 80072c8:	3601      	adds	r6, #1
 80072ca:	2302      	movs	r3, #2
 80072cc:	e000      	b.n	80072d0 <__cvt+0x40>
 80072ce:	2303      	movs	r3, #3
 80072d0:	aa07      	add	r2, sp, #28
 80072d2:	9204      	str	r2, [sp, #16]
 80072d4:	aa06      	add	r2, sp, #24
 80072d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80072da:	e9cd 3600 	strd	r3, r6, [sp]
 80072de:	4622      	mov	r2, r4
 80072e0:	462b      	mov	r3, r5
 80072e2:	f000 ff95 	bl	8008210 <_dtoa_r>
 80072e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072ea:	4607      	mov	r7, r0
 80072ec:	d119      	bne.n	8007322 <__cvt+0x92>
 80072ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072f0:	07db      	lsls	r3, r3, #31
 80072f2:	d50e      	bpl.n	8007312 <__cvt+0x82>
 80072f4:	eb00 0906 	add.w	r9, r0, r6
 80072f8:	2200      	movs	r2, #0
 80072fa:	2300      	movs	r3, #0
 80072fc:	4620      	mov	r0, r4
 80072fe:	4629      	mov	r1, r5
 8007300:	f7f9 fb6a 	bl	80009d8 <__aeabi_dcmpeq>
 8007304:	b108      	cbz	r0, 800730a <__cvt+0x7a>
 8007306:	f8cd 901c 	str.w	r9, [sp, #28]
 800730a:	2230      	movs	r2, #48	@ 0x30
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	454b      	cmp	r3, r9
 8007310:	d31e      	bcc.n	8007350 <__cvt+0xc0>
 8007312:	4638      	mov	r0, r7
 8007314:	9b07      	ldr	r3, [sp, #28]
 8007316:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007318:	1bdb      	subs	r3, r3, r7
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	b008      	add	sp, #32
 800731e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007322:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007326:	eb00 0906 	add.w	r9, r0, r6
 800732a:	d1e5      	bne.n	80072f8 <__cvt+0x68>
 800732c:	7803      	ldrb	r3, [r0, #0]
 800732e:	2b30      	cmp	r3, #48	@ 0x30
 8007330:	d10a      	bne.n	8007348 <__cvt+0xb8>
 8007332:	2200      	movs	r2, #0
 8007334:	2300      	movs	r3, #0
 8007336:	4620      	mov	r0, r4
 8007338:	4629      	mov	r1, r5
 800733a:	f7f9 fb4d 	bl	80009d8 <__aeabi_dcmpeq>
 800733e:	b918      	cbnz	r0, 8007348 <__cvt+0xb8>
 8007340:	f1c6 0601 	rsb	r6, r6, #1
 8007344:	f8ca 6000 	str.w	r6, [sl]
 8007348:	f8da 3000 	ldr.w	r3, [sl]
 800734c:	4499      	add	r9, r3
 800734e:	e7d3      	b.n	80072f8 <__cvt+0x68>
 8007350:	1c59      	adds	r1, r3, #1
 8007352:	9107      	str	r1, [sp, #28]
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e7d9      	b.n	800730c <__cvt+0x7c>

08007358 <__exponent>:
 8007358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800735a:	2900      	cmp	r1, #0
 800735c:	bfb6      	itet	lt
 800735e:	232d      	movlt	r3, #45	@ 0x2d
 8007360:	232b      	movge	r3, #43	@ 0x2b
 8007362:	4249      	neglt	r1, r1
 8007364:	2909      	cmp	r1, #9
 8007366:	7002      	strb	r2, [r0, #0]
 8007368:	7043      	strb	r3, [r0, #1]
 800736a:	dd29      	ble.n	80073c0 <__exponent+0x68>
 800736c:	f10d 0307 	add.w	r3, sp, #7
 8007370:	461d      	mov	r5, r3
 8007372:	270a      	movs	r7, #10
 8007374:	fbb1 f6f7 	udiv	r6, r1, r7
 8007378:	461a      	mov	r2, r3
 800737a:	fb07 1416 	mls	r4, r7, r6, r1
 800737e:	3430      	adds	r4, #48	@ 0x30
 8007380:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007384:	460c      	mov	r4, r1
 8007386:	2c63      	cmp	r4, #99	@ 0x63
 8007388:	4631      	mov	r1, r6
 800738a:	f103 33ff 	add.w	r3, r3, #4294967295
 800738e:	dcf1      	bgt.n	8007374 <__exponent+0x1c>
 8007390:	3130      	adds	r1, #48	@ 0x30
 8007392:	1e94      	subs	r4, r2, #2
 8007394:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007398:	4623      	mov	r3, r4
 800739a:	1c41      	adds	r1, r0, #1
 800739c:	42ab      	cmp	r3, r5
 800739e:	d30a      	bcc.n	80073b6 <__exponent+0x5e>
 80073a0:	f10d 0309 	add.w	r3, sp, #9
 80073a4:	1a9b      	subs	r3, r3, r2
 80073a6:	42ac      	cmp	r4, r5
 80073a8:	bf88      	it	hi
 80073aa:	2300      	movhi	r3, #0
 80073ac:	3302      	adds	r3, #2
 80073ae:	4403      	add	r3, r0
 80073b0:	1a18      	subs	r0, r3, r0
 80073b2:	b003      	add	sp, #12
 80073b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073be:	e7ed      	b.n	800739c <__exponent+0x44>
 80073c0:	2330      	movs	r3, #48	@ 0x30
 80073c2:	3130      	adds	r1, #48	@ 0x30
 80073c4:	7083      	strb	r3, [r0, #2]
 80073c6:	70c1      	strb	r1, [r0, #3]
 80073c8:	1d03      	adds	r3, r0, #4
 80073ca:	e7f1      	b.n	80073b0 <__exponent+0x58>

080073cc <_printf_float>:
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	b091      	sub	sp, #68	@ 0x44
 80073d2:	460c      	mov	r4, r1
 80073d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80073d8:	4616      	mov	r6, r2
 80073da:	461f      	mov	r7, r3
 80073dc:	4605      	mov	r5, r0
 80073de:	f000 fdf9 	bl	8007fd4 <_localeconv_r>
 80073e2:	6803      	ldr	r3, [r0, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	9308      	str	r3, [sp, #32]
 80073e8:	f7f8 feca 	bl	8000180 <strlen>
 80073ec:	2300      	movs	r3, #0
 80073ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80073f0:	f8d8 3000 	ldr.w	r3, [r8]
 80073f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80073f6:	3307      	adds	r3, #7
 80073f8:	f023 0307 	bic.w	r3, r3, #7
 80073fc:	f103 0208 	add.w	r2, r3, #8
 8007400:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007404:	f8d4 b000 	ldr.w	fp, [r4]
 8007408:	f8c8 2000 	str.w	r2, [r8]
 800740c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007410:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007414:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007416:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800741a:	f04f 32ff 	mov.w	r2, #4294967295
 800741e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007422:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007426:	4b9c      	ldr	r3, [pc, #624]	@ (8007698 <_printf_float+0x2cc>)
 8007428:	f7f9 fb08 	bl	8000a3c <__aeabi_dcmpun>
 800742c:	bb70      	cbnz	r0, 800748c <_printf_float+0xc0>
 800742e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	4b98      	ldr	r3, [pc, #608]	@ (8007698 <_printf_float+0x2cc>)
 8007438:	f7f9 fae2 	bl	8000a00 <__aeabi_dcmple>
 800743c:	bb30      	cbnz	r0, 800748c <_printf_float+0xc0>
 800743e:	2200      	movs	r2, #0
 8007440:	2300      	movs	r3, #0
 8007442:	4640      	mov	r0, r8
 8007444:	4649      	mov	r1, r9
 8007446:	f7f9 fad1 	bl	80009ec <__aeabi_dcmplt>
 800744a:	b110      	cbz	r0, 8007452 <_printf_float+0x86>
 800744c:	232d      	movs	r3, #45	@ 0x2d
 800744e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007452:	4a92      	ldr	r2, [pc, #584]	@ (800769c <_printf_float+0x2d0>)
 8007454:	4b92      	ldr	r3, [pc, #584]	@ (80076a0 <_printf_float+0x2d4>)
 8007456:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800745a:	bf94      	ite	ls
 800745c:	4690      	movls	r8, r2
 800745e:	4698      	movhi	r8, r3
 8007460:	2303      	movs	r3, #3
 8007462:	f04f 0900 	mov.w	r9, #0
 8007466:	6123      	str	r3, [r4, #16]
 8007468:	f02b 0304 	bic.w	r3, fp, #4
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	4633      	mov	r3, r6
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	9700      	str	r7, [sp, #0]
 8007476:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007478:	f000 f9d4 	bl	8007824 <_printf_common>
 800747c:	3001      	adds	r0, #1
 800747e:	f040 8090 	bne.w	80075a2 <_printf_float+0x1d6>
 8007482:	f04f 30ff 	mov.w	r0, #4294967295
 8007486:	b011      	add	sp, #68	@ 0x44
 8007488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748c:	4642      	mov	r2, r8
 800748e:	464b      	mov	r3, r9
 8007490:	4640      	mov	r0, r8
 8007492:	4649      	mov	r1, r9
 8007494:	f7f9 fad2 	bl	8000a3c <__aeabi_dcmpun>
 8007498:	b148      	cbz	r0, 80074ae <_printf_float+0xe2>
 800749a:	464b      	mov	r3, r9
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfb8      	it	lt
 80074a0:	232d      	movlt	r3, #45	@ 0x2d
 80074a2:	4a80      	ldr	r2, [pc, #512]	@ (80076a4 <_printf_float+0x2d8>)
 80074a4:	bfb8      	it	lt
 80074a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074aa:	4b7f      	ldr	r3, [pc, #508]	@ (80076a8 <_printf_float+0x2dc>)
 80074ac:	e7d3      	b.n	8007456 <_printf_float+0x8a>
 80074ae:	6863      	ldr	r3, [r4, #4]
 80074b0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	d13f      	bne.n	8007538 <_printf_float+0x16c>
 80074b8:	2306      	movs	r3, #6
 80074ba:	6063      	str	r3, [r4, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	9206      	str	r2, [sp, #24]
 80074c6:	aa0e      	add	r2, sp, #56	@ 0x38
 80074c8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80074cc:	aa0d      	add	r2, sp, #52	@ 0x34
 80074ce:	9203      	str	r2, [sp, #12]
 80074d0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80074d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80074d8:	6863      	ldr	r3, [r4, #4]
 80074da:	4642      	mov	r2, r8
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	4628      	mov	r0, r5
 80074e0:	464b      	mov	r3, r9
 80074e2:	910a      	str	r1, [sp, #40]	@ 0x28
 80074e4:	f7ff fed4 	bl	8007290 <__cvt>
 80074e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074ea:	4680      	mov	r8, r0
 80074ec:	2947      	cmp	r1, #71	@ 0x47
 80074ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80074f0:	d128      	bne.n	8007544 <_printf_float+0x178>
 80074f2:	1cc8      	adds	r0, r1, #3
 80074f4:	db02      	blt.n	80074fc <_printf_float+0x130>
 80074f6:	6863      	ldr	r3, [r4, #4]
 80074f8:	4299      	cmp	r1, r3
 80074fa:	dd40      	ble.n	800757e <_printf_float+0x1b2>
 80074fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8007500:	fa5f fa8a 	uxtb.w	sl, sl
 8007504:	4652      	mov	r2, sl
 8007506:	3901      	subs	r1, #1
 8007508:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800750c:	910d      	str	r1, [sp, #52]	@ 0x34
 800750e:	f7ff ff23 	bl	8007358 <__exponent>
 8007512:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007514:	4681      	mov	r9, r0
 8007516:	1813      	adds	r3, r2, r0
 8007518:	2a01      	cmp	r2, #1
 800751a:	6123      	str	r3, [r4, #16]
 800751c:	dc02      	bgt.n	8007524 <_printf_float+0x158>
 800751e:	6822      	ldr	r2, [r4, #0]
 8007520:	07d2      	lsls	r2, r2, #31
 8007522:	d501      	bpl.n	8007528 <_printf_float+0x15c>
 8007524:	3301      	adds	r3, #1
 8007526:	6123      	str	r3, [r4, #16]
 8007528:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800752c:	2b00      	cmp	r3, #0
 800752e:	d09e      	beq.n	800746e <_printf_float+0xa2>
 8007530:	232d      	movs	r3, #45	@ 0x2d
 8007532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007536:	e79a      	b.n	800746e <_printf_float+0xa2>
 8007538:	2947      	cmp	r1, #71	@ 0x47
 800753a:	d1bf      	bne.n	80074bc <_printf_float+0xf0>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1bd      	bne.n	80074bc <_printf_float+0xf0>
 8007540:	2301      	movs	r3, #1
 8007542:	e7ba      	b.n	80074ba <_printf_float+0xee>
 8007544:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007548:	d9dc      	bls.n	8007504 <_printf_float+0x138>
 800754a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800754e:	d118      	bne.n	8007582 <_printf_float+0x1b6>
 8007550:	2900      	cmp	r1, #0
 8007552:	6863      	ldr	r3, [r4, #4]
 8007554:	dd0b      	ble.n	800756e <_printf_float+0x1a2>
 8007556:	6121      	str	r1, [r4, #16]
 8007558:	b913      	cbnz	r3, 8007560 <_printf_float+0x194>
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	07d0      	lsls	r0, r2, #31
 800755e:	d502      	bpl.n	8007566 <_printf_float+0x19a>
 8007560:	3301      	adds	r3, #1
 8007562:	440b      	add	r3, r1
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	f04f 0900 	mov.w	r9, #0
 800756a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800756c:	e7dc      	b.n	8007528 <_printf_float+0x15c>
 800756e:	b913      	cbnz	r3, 8007576 <_printf_float+0x1aa>
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	07d2      	lsls	r2, r2, #31
 8007574:	d501      	bpl.n	800757a <_printf_float+0x1ae>
 8007576:	3302      	adds	r3, #2
 8007578:	e7f4      	b.n	8007564 <_printf_float+0x198>
 800757a:	2301      	movs	r3, #1
 800757c:	e7f2      	b.n	8007564 <_printf_float+0x198>
 800757e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007584:	4299      	cmp	r1, r3
 8007586:	db05      	blt.n	8007594 <_printf_float+0x1c8>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	6121      	str	r1, [r4, #16]
 800758c:	07d8      	lsls	r0, r3, #31
 800758e:	d5ea      	bpl.n	8007566 <_printf_float+0x19a>
 8007590:	1c4b      	adds	r3, r1, #1
 8007592:	e7e7      	b.n	8007564 <_printf_float+0x198>
 8007594:	2900      	cmp	r1, #0
 8007596:	bfcc      	ite	gt
 8007598:	2201      	movgt	r2, #1
 800759a:	f1c1 0202 	rsble	r2, r1, #2
 800759e:	4413      	add	r3, r2
 80075a0:	e7e0      	b.n	8007564 <_printf_float+0x198>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	055a      	lsls	r2, r3, #21
 80075a6:	d407      	bmi.n	80075b8 <_printf_float+0x1ec>
 80075a8:	6923      	ldr	r3, [r4, #16]
 80075aa:	4642      	mov	r2, r8
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	d12b      	bne.n	800760e <_printf_float+0x242>
 80075b6:	e764      	b.n	8007482 <_printf_float+0xb6>
 80075b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075bc:	f240 80dc 	bls.w	8007778 <_printf_float+0x3ac>
 80075c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075c4:	2200      	movs	r2, #0
 80075c6:	2300      	movs	r3, #0
 80075c8:	f7f9 fa06 	bl	80009d8 <__aeabi_dcmpeq>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d033      	beq.n	8007638 <_printf_float+0x26c>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4631      	mov	r1, r6
 80075d4:	4628      	mov	r0, r5
 80075d6:	4a35      	ldr	r2, [pc, #212]	@ (80076ac <_printf_float+0x2e0>)
 80075d8:	47b8      	blx	r7
 80075da:	3001      	adds	r0, #1
 80075dc:	f43f af51 	beq.w	8007482 <_printf_float+0xb6>
 80075e0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80075e4:	4543      	cmp	r3, r8
 80075e6:	db02      	blt.n	80075ee <_printf_float+0x222>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	07d8      	lsls	r0, r3, #31
 80075ec:	d50f      	bpl.n	800760e <_printf_float+0x242>
 80075ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075f2:	4631      	mov	r1, r6
 80075f4:	4628      	mov	r0, r5
 80075f6:	47b8      	blx	r7
 80075f8:	3001      	adds	r0, #1
 80075fa:	f43f af42 	beq.w	8007482 <_printf_float+0xb6>
 80075fe:	f04f 0900 	mov.w	r9, #0
 8007602:	f108 38ff 	add.w	r8, r8, #4294967295
 8007606:	f104 0a1a 	add.w	sl, r4, #26
 800760a:	45c8      	cmp	r8, r9
 800760c:	dc09      	bgt.n	8007622 <_printf_float+0x256>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	079b      	lsls	r3, r3, #30
 8007612:	f100 8102 	bmi.w	800781a <_printf_float+0x44e>
 8007616:	68e0      	ldr	r0, [r4, #12]
 8007618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800761a:	4298      	cmp	r0, r3
 800761c:	bfb8      	it	lt
 800761e:	4618      	movlt	r0, r3
 8007620:	e731      	b.n	8007486 <_printf_float+0xba>
 8007622:	2301      	movs	r3, #1
 8007624:	4652      	mov	r2, sl
 8007626:	4631      	mov	r1, r6
 8007628:	4628      	mov	r0, r5
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	f43f af28 	beq.w	8007482 <_printf_float+0xb6>
 8007632:	f109 0901 	add.w	r9, r9, #1
 8007636:	e7e8      	b.n	800760a <_printf_float+0x23e>
 8007638:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800763a:	2b00      	cmp	r3, #0
 800763c:	dc38      	bgt.n	80076b0 <_printf_float+0x2e4>
 800763e:	2301      	movs	r3, #1
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	4a19      	ldr	r2, [pc, #100]	@ (80076ac <_printf_float+0x2e0>)
 8007646:	47b8      	blx	r7
 8007648:	3001      	adds	r0, #1
 800764a:	f43f af1a 	beq.w	8007482 <_printf_float+0xb6>
 800764e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007652:	ea59 0303 	orrs.w	r3, r9, r3
 8007656:	d102      	bne.n	800765e <_printf_float+0x292>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	07d9      	lsls	r1, r3, #31
 800765c:	d5d7      	bpl.n	800760e <_printf_float+0x242>
 800765e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007662:	4631      	mov	r1, r6
 8007664:	4628      	mov	r0, r5
 8007666:	47b8      	blx	r7
 8007668:	3001      	adds	r0, #1
 800766a:	f43f af0a 	beq.w	8007482 <_printf_float+0xb6>
 800766e:	f04f 0a00 	mov.w	sl, #0
 8007672:	f104 0b1a 	add.w	fp, r4, #26
 8007676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007678:	425b      	negs	r3, r3
 800767a:	4553      	cmp	r3, sl
 800767c:	dc01      	bgt.n	8007682 <_printf_float+0x2b6>
 800767e:	464b      	mov	r3, r9
 8007680:	e793      	b.n	80075aa <_printf_float+0x1de>
 8007682:	2301      	movs	r3, #1
 8007684:	465a      	mov	r2, fp
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	47b8      	blx	r7
 800768c:	3001      	adds	r0, #1
 800768e:	f43f aef8 	beq.w	8007482 <_printf_float+0xb6>
 8007692:	f10a 0a01 	add.w	sl, sl, #1
 8007696:	e7ee      	b.n	8007676 <_printf_float+0x2aa>
 8007698:	7fefffff 	.word	0x7fefffff
 800769c:	0800a9fc 	.word	0x0800a9fc
 80076a0:	0800aa00 	.word	0x0800aa00
 80076a4:	0800aa04 	.word	0x0800aa04
 80076a8:	0800aa08 	.word	0x0800aa08
 80076ac:	0800aa0c 	.word	0x0800aa0c
 80076b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076b2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80076b6:	4553      	cmp	r3, sl
 80076b8:	bfa8      	it	ge
 80076ba:	4653      	movge	r3, sl
 80076bc:	2b00      	cmp	r3, #0
 80076be:	4699      	mov	r9, r3
 80076c0:	dc36      	bgt.n	8007730 <_printf_float+0x364>
 80076c2:	f04f 0b00 	mov.w	fp, #0
 80076c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076ca:	f104 021a 	add.w	r2, r4, #26
 80076ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80076d2:	eba3 0309 	sub.w	r3, r3, r9
 80076d6:	455b      	cmp	r3, fp
 80076d8:	dc31      	bgt.n	800773e <_printf_float+0x372>
 80076da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076dc:	459a      	cmp	sl, r3
 80076de:	dc3a      	bgt.n	8007756 <_printf_float+0x38a>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	07da      	lsls	r2, r3, #31
 80076e4:	d437      	bmi.n	8007756 <_printf_float+0x38a>
 80076e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076e8:	ebaa 0903 	sub.w	r9, sl, r3
 80076ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ee:	ebaa 0303 	sub.w	r3, sl, r3
 80076f2:	4599      	cmp	r9, r3
 80076f4:	bfa8      	it	ge
 80076f6:	4699      	movge	r9, r3
 80076f8:	f1b9 0f00 	cmp.w	r9, #0
 80076fc:	dc33      	bgt.n	8007766 <_printf_float+0x39a>
 80076fe:	f04f 0800 	mov.w	r8, #0
 8007702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007706:	f104 0b1a 	add.w	fp, r4, #26
 800770a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800770c:	ebaa 0303 	sub.w	r3, sl, r3
 8007710:	eba3 0309 	sub.w	r3, r3, r9
 8007714:	4543      	cmp	r3, r8
 8007716:	f77f af7a 	ble.w	800760e <_printf_float+0x242>
 800771a:	2301      	movs	r3, #1
 800771c:	465a      	mov	r2, fp
 800771e:	4631      	mov	r1, r6
 8007720:	4628      	mov	r0, r5
 8007722:	47b8      	blx	r7
 8007724:	3001      	adds	r0, #1
 8007726:	f43f aeac 	beq.w	8007482 <_printf_float+0xb6>
 800772a:	f108 0801 	add.w	r8, r8, #1
 800772e:	e7ec      	b.n	800770a <_printf_float+0x33e>
 8007730:	4642      	mov	r2, r8
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	d1c2      	bne.n	80076c2 <_printf_float+0x2f6>
 800773c:	e6a1      	b.n	8007482 <_printf_float+0xb6>
 800773e:	2301      	movs	r3, #1
 8007740:	4631      	mov	r1, r6
 8007742:	4628      	mov	r0, r5
 8007744:	920a      	str	r2, [sp, #40]	@ 0x28
 8007746:	47b8      	blx	r7
 8007748:	3001      	adds	r0, #1
 800774a:	f43f ae9a 	beq.w	8007482 <_printf_float+0xb6>
 800774e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007750:	f10b 0b01 	add.w	fp, fp, #1
 8007754:	e7bb      	b.n	80076ce <_printf_float+0x302>
 8007756:	4631      	mov	r1, r6
 8007758:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800775c:	4628      	mov	r0, r5
 800775e:	47b8      	blx	r7
 8007760:	3001      	adds	r0, #1
 8007762:	d1c0      	bne.n	80076e6 <_printf_float+0x31a>
 8007764:	e68d      	b.n	8007482 <_printf_float+0xb6>
 8007766:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007768:	464b      	mov	r3, r9
 800776a:	4631      	mov	r1, r6
 800776c:	4628      	mov	r0, r5
 800776e:	4442      	add	r2, r8
 8007770:	47b8      	blx	r7
 8007772:	3001      	adds	r0, #1
 8007774:	d1c3      	bne.n	80076fe <_printf_float+0x332>
 8007776:	e684      	b.n	8007482 <_printf_float+0xb6>
 8007778:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800777c:	f1ba 0f01 	cmp.w	sl, #1
 8007780:	dc01      	bgt.n	8007786 <_printf_float+0x3ba>
 8007782:	07db      	lsls	r3, r3, #31
 8007784:	d536      	bpl.n	80077f4 <_printf_float+0x428>
 8007786:	2301      	movs	r3, #1
 8007788:	4642      	mov	r2, r8
 800778a:	4631      	mov	r1, r6
 800778c:	4628      	mov	r0, r5
 800778e:	47b8      	blx	r7
 8007790:	3001      	adds	r0, #1
 8007792:	f43f ae76 	beq.w	8007482 <_printf_float+0xb6>
 8007796:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	47b8      	blx	r7
 80077a0:	3001      	adds	r0, #1
 80077a2:	f43f ae6e 	beq.w	8007482 <_printf_float+0xb6>
 80077a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077aa:	2200      	movs	r2, #0
 80077ac:	2300      	movs	r3, #0
 80077ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077b2:	f7f9 f911 	bl	80009d8 <__aeabi_dcmpeq>
 80077b6:	b9c0      	cbnz	r0, 80077ea <_printf_float+0x41e>
 80077b8:	4653      	mov	r3, sl
 80077ba:	f108 0201 	add.w	r2, r8, #1
 80077be:	4631      	mov	r1, r6
 80077c0:	4628      	mov	r0, r5
 80077c2:	47b8      	blx	r7
 80077c4:	3001      	adds	r0, #1
 80077c6:	d10c      	bne.n	80077e2 <_printf_float+0x416>
 80077c8:	e65b      	b.n	8007482 <_printf_float+0xb6>
 80077ca:	2301      	movs	r3, #1
 80077cc:	465a      	mov	r2, fp
 80077ce:	4631      	mov	r1, r6
 80077d0:	4628      	mov	r0, r5
 80077d2:	47b8      	blx	r7
 80077d4:	3001      	adds	r0, #1
 80077d6:	f43f ae54 	beq.w	8007482 <_printf_float+0xb6>
 80077da:	f108 0801 	add.w	r8, r8, #1
 80077de:	45d0      	cmp	r8, sl
 80077e0:	dbf3      	blt.n	80077ca <_printf_float+0x3fe>
 80077e2:	464b      	mov	r3, r9
 80077e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077e8:	e6e0      	b.n	80075ac <_printf_float+0x1e0>
 80077ea:	f04f 0800 	mov.w	r8, #0
 80077ee:	f104 0b1a 	add.w	fp, r4, #26
 80077f2:	e7f4      	b.n	80077de <_printf_float+0x412>
 80077f4:	2301      	movs	r3, #1
 80077f6:	4642      	mov	r2, r8
 80077f8:	e7e1      	b.n	80077be <_printf_float+0x3f2>
 80077fa:	2301      	movs	r3, #1
 80077fc:	464a      	mov	r2, r9
 80077fe:	4631      	mov	r1, r6
 8007800:	4628      	mov	r0, r5
 8007802:	47b8      	blx	r7
 8007804:	3001      	adds	r0, #1
 8007806:	f43f ae3c 	beq.w	8007482 <_printf_float+0xb6>
 800780a:	f108 0801 	add.w	r8, r8, #1
 800780e:	68e3      	ldr	r3, [r4, #12]
 8007810:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007812:	1a5b      	subs	r3, r3, r1
 8007814:	4543      	cmp	r3, r8
 8007816:	dcf0      	bgt.n	80077fa <_printf_float+0x42e>
 8007818:	e6fd      	b.n	8007616 <_printf_float+0x24a>
 800781a:	f04f 0800 	mov.w	r8, #0
 800781e:	f104 0919 	add.w	r9, r4, #25
 8007822:	e7f4      	b.n	800780e <_printf_float+0x442>

08007824 <_printf_common>:
 8007824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007828:	4616      	mov	r6, r2
 800782a:	4698      	mov	r8, r3
 800782c:	688a      	ldr	r2, [r1, #8]
 800782e:	690b      	ldr	r3, [r1, #16]
 8007830:	4607      	mov	r7, r0
 8007832:	4293      	cmp	r3, r2
 8007834:	bfb8      	it	lt
 8007836:	4613      	movlt	r3, r2
 8007838:	6033      	str	r3, [r6, #0]
 800783a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800783e:	460c      	mov	r4, r1
 8007840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007844:	b10a      	cbz	r2, 800784a <_printf_common+0x26>
 8007846:	3301      	adds	r3, #1
 8007848:	6033      	str	r3, [r6, #0]
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	0699      	lsls	r1, r3, #26
 800784e:	bf42      	ittt	mi
 8007850:	6833      	ldrmi	r3, [r6, #0]
 8007852:	3302      	addmi	r3, #2
 8007854:	6033      	strmi	r3, [r6, #0]
 8007856:	6825      	ldr	r5, [r4, #0]
 8007858:	f015 0506 	ands.w	r5, r5, #6
 800785c:	d106      	bne.n	800786c <_printf_common+0x48>
 800785e:	f104 0a19 	add.w	sl, r4, #25
 8007862:	68e3      	ldr	r3, [r4, #12]
 8007864:	6832      	ldr	r2, [r6, #0]
 8007866:	1a9b      	subs	r3, r3, r2
 8007868:	42ab      	cmp	r3, r5
 800786a:	dc2b      	bgt.n	80078c4 <_printf_common+0xa0>
 800786c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007870:	6822      	ldr	r2, [r4, #0]
 8007872:	3b00      	subs	r3, #0
 8007874:	bf18      	it	ne
 8007876:	2301      	movne	r3, #1
 8007878:	0692      	lsls	r2, r2, #26
 800787a:	d430      	bmi.n	80078de <_printf_common+0xba>
 800787c:	4641      	mov	r1, r8
 800787e:	4638      	mov	r0, r7
 8007880:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007884:	47c8      	blx	r9
 8007886:	3001      	adds	r0, #1
 8007888:	d023      	beq.n	80078d2 <_printf_common+0xae>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	6922      	ldr	r2, [r4, #16]
 800788e:	f003 0306 	and.w	r3, r3, #6
 8007892:	2b04      	cmp	r3, #4
 8007894:	bf14      	ite	ne
 8007896:	2500      	movne	r5, #0
 8007898:	6833      	ldreq	r3, [r6, #0]
 800789a:	f04f 0600 	mov.w	r6, #0
 800789e:	bf08      	it	eq
 80078a0:	68e5      	ldreq	r5, [r4, #12]
 80078a2:	f104 041a 	add.w	r4, r4, #26
 80078a6:	bf08      	it	eq
 80078a8:	1aed      	subeq	r5, r5, r3
 80078aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80078ae:	bf08      	it	eq
 80078b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078b4:	4293      	cmp	r3, r2
 80078b6:	bfc4      	itt	gt
 80078b8:	1a9b      	subgt	r3, r3, r2
 80078ba:	18ed      	addgt	r5, r5, r3
 80078bc:	42b5      	cmp	r5, r6
 80078be:	d11a      	bne.n	80078f6 <_printf_common+0xd2>
 80078c0:	2000      	movs	r0, #0
 80078c2:	e008      	b.n	80078d6 <_printf_common+0xb2>
 80078c4:	2301      	movs	r3, #1
 80078c6:	4652      	mov	r2, sl
 80078c8:	4641      	mov	r1, r8
 80078ca:	4638      	mov	r0, r7
 80078cc:	47c8      	blx	r9
 80078ce:	3001      	adds	r0, #1
 80078d0:	d103      	bne.n	80078da <_printf_common+0xb6>
 80078d2:	f04f 30ff 	mov.w	r0, #4294967295
 80078d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078da:	3501      	adds	r5, #1
 80078dc:	e7c1      	b.n	8007862 <_printf_common+0x3e>
 80078de:	2030      	movs	r0, #48	@ 0x30
 80078e0:	18e1      	adds	r1, r4, r3
 80078e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078ec:	4422      	add	r2, r4
 80078ee:	3302      	adds	r3, #2
 80078f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078f4:	e7c2      	b.n	800787c <_printf_common+0x58>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4622      	mov	r2, r4
 80078fa:	4641      	mov	r1, r8
 80078fc:	4638      	mov	r0, r7
 80078fe:	47c8      	blx	r9
 8007900:	3001      	adds	r0, #1
 8007902:	d0e6      	beq.n	80078d2 <_printf_common+0xae>
 8007904:	3601      	adds	r6, #1
 8007906:	e7d9      	b.n	80078bc <_printf_common+0x98>

08007908 <_printf_i>:
 8007908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800790c:	7e0f      	ldrb	r7, [r1, #24]
 800790e:	4691      	mov	r9, r2
 8007910:	2f78      	cmp	r7, #120	@ 0x78
 8007912:	4680      	mov	r8, r0
 8007914:	460c      	mov	r4, r1
 8007916:	469a      	mov	sl, r3
 8007918:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800791a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800791e:	d807      	bhi.n	8007930 <_printf_i+0x28>
 8007920:	2f62      	cmp	r7, #98	@ 0x62
 8007922:	d80a      	bhi.n	800793a <_printf_i+0x32>
 8007924:	2f00      	cmp	r7, #0
 8007926:	f000 80d3 	beq.w	8007ad0 <_printf_i+0x1c8>
 800792a:	2f58      	cmp	r7, #88	@ 0x58
 800792c:	f000 80ba 	beq.w	8007aa4 <_printf_i+0x19c>
 8007930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007934:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007938:	e03a      	b.n	80079b0 <_printf_i+0xa8>
 800793a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800793e:	2b15      	cmp	r3, #21
 8007940:	d8f6      	bhi.n	8007930 <_printf_i+0x28>
 8007942:	a101      	add	r1, pc, #4	@ (adr r1, 8007948 <_printf_i+0x40>)
 8007944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007948:	080079a1 	.word	0x080079a1
 800794c:	080079b5 	.word	0x080079b5
 8007950:	08007931 	.word	0x08007931
 8007954:	08007931 	.word	0x08007931
 8007958:	08007931 	.word	0x08007931
 800795c:	08007931 	.word	0x08007931
 8007960:	080079b5 	.word	0x080079b5
 8007964:	08007931 	.word	0x08007931
 8007968:	08007931 	.word	0x08007931
 800796c:	08007931 	.word	0x08007931
 8007970:	08007931 	.word	0x08007931
 8007974:	08007ab7 	.word	0x08007ab7
 8007978:	080079df 	.word	0x080079df
 800797c:	08007a71 	.word	0x08007a71
 8007980:	08007931 	.word	0x08007931
 8007984:	08007931 	.word	0x08007931
 8007988:	08007ad9 	.word	0x08007ad9
 800798c:	08007931 	.word	0x08007931
 8007990:	080079df 	.word	0x080079df
 8007994:	08007931 	.word	0x08007931
 8007998:	08007931 	.word	0x08007931
 800799c:	08007a79 	.word	0x08007a79
 80079a0:	6833      	ldr	r3, [r6, #0]
 80079a2:	1d1a      	adds	r2, r3, #4
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6032      	str	r2, [r6, #0]
 80079a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079b0:	2301      	movs	r3, #1
 80079b2:	e09e      	b.n	8007af2 <_printf_i+0x1ea>
 80079b4:	6833      	ldr	r3, [r6, #0]
 80079b6:	6820      	ldr	r0, [r4, #0]
 80079b8:	1d19      	adds	r1, r3, #4
 80079ba:	6031      	str	r1, [r6, #0]
 80079bc:	0606      	lsls	r6, r0, #24
 80079be:	d501      	bpl.n	80079c4 <_printf_i+0xbc>
 80079c0:	681d      	ldr	r5, [r3, #0]
 80079c2:	e003      	b.n	80079cc <_printf_i+0xc4>
 80079c4:	0645      	lsls	r5, r0, #25
 80079c6:	d5fb      	bpl.n	80079c0 <_printf_i+0xb8>
 80079c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079cc:	2d00      	cmp	r5, #0
 80079ce:	da03      	bge.n	80079d8 <_printf_i+0xd0>
 80079d0:	232d      	movs	r3, #45	@ 0x2d
 80079d2:	426d      	negs	r5, r5
 80079d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079d8:	230a      	movs	r3, #10
 80079da:	4859      	ldr	r0, [pc, #356]	@ (8007b40 <_printf_i+0x238>)
 80079dc:	e011      	b.n	8007a02 <_printf_i+0xfa>
 80079de:	6821      	ldr	r1, [r4, #0]
 80079e0:	6833      	ldr	r3, [r6, #0]
 80079e2:	0608      	lsls	r0, r1, #24
 80079e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80079e8:	d402      	bmi.n	80079f0 <_printf_i+0xe8>
 80079ea:	0649      	lsls	r1, r1, #25
 80079ec:	bf48      	it	mi
 80079ee:	b2ad      	uxthmi	r5, r5
 80079f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80079f2:	6033      	str	r3, [r6, #0]
 80079f4:	bf14      	ite	ne
 80079f6:	230a      	movne	r3, #10
 80079f8:	2308      	moveq	r3, #8
 80079fa:	4851      	ldr	r0, [pc, #324]	@ (8007b40 <_printf_i+0x238>)
 80079fc:	2100      	movs	r1, #0
 80079fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a02:	6866      	ldr	r6, [r4, #4]
 8007a04:	2e00      	cmp	r6, #0
 8007a06:	bfa8      	it	ge
 8007a08:	6821      	ldrge	r1, [r4, #0]
 8007a0a:	60a6      	str	r6, [r4, #8]
 8007a0c:	bfa4      	itt	ge
 8007a0e:	f021 0104 	bicge.w	r1, r1, #4
 8007a12:	6021      	strge	r1, [r4, #0]
 8007a14:	b90d      	cbnz	r5, 8007a1a <_printf_i+0x112>
 8007a16:	2e00      	cmp	r6, #0
 8007a18:	d04b      	beq.n	8007ab2 <_printf_i+0x1aa>
 8007a1a:	4616      	mov	r6, r2
 8007a1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a20:	fb03 5711 	mls	r7, r3, r1, r5
 8007a24:	5dc7      	ldrb	r7, [r0, r7]
 8007a26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a2a:	462f      	mov	r7, r5
 8007a2c:	42bb      	cmp	r3, r7
 8007a2e:	460d      	mov	r5, r1
 8007a30:	d9f4      	bls.n	8007a1c <_printf_i+0x114>
 8007a32:	2b08      	cmp	r3, #8
 8007a34:	d10b      	bne.n	8007a4e <_printf_i+0x146>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	07df      	lsls	r7, r3, #31
 8007a3a:	d508      	bpl.n	8007a4e <_printf_i+0x146>
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	6861      	ldr	r1, [r4, #4]
 8007a40:	4299      	cmp	r1, r3
 8007a42:	bfde      	ittt	le
 8007a44:	2330      	movle	r3, #48	@ 0x30
 8007a46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a4e:	1b92      	subs	r2, r2, r6
 8007a50:	6122      	str	r2, [r4, #16]
 8007a52:	464b      	mov	r3, r9
 8007a54:	4621      	mov	r1, r4
 8007a56:	4640      	mov	r0, r8
 8007a58:	f8cd a000 	str.w	sl, [sp]
 8007a5c:	aa03      	add	r2, sp, #12
 8007a5e:	f7ff fee1 	bl	8007824 <_printf_common>
 8007a62:	3001      	adds	r0, #1
 8007a64:	d14a      	bne.n	8007afc <_printf_i+0x1f4>
 8007a66:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6a:	b004      	add	sp, #16
 8007a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	f043 0320 	orr.w	r3, r3, #32
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	2778      	movs	r7, #120	@ 0x78
 8007a7a:	4832      	ldr	r0, [pc, #200]	@ (8007b44 <_printf_i+0x23c>)
 8007a7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	6831      	ldr	r1, [r6, #0]
 8007a84:	061f      	lsls	r7, r3, #24
 8007a86:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a8a:	d402      	bmi.n	8007a92 <_printf_i+0x18a>
 8007a8c:	065f      	lsls	r7, r3, #25
 8007a8e:	bf48      	it	mi
 8007a90:	b2ad      	uxthmi	r5, r5
 8007a92:	6031      	str	r1, [r6, #0]
 8007a94:	07d9      	lsls	r1, r3, #31
 8007a96:	bf44      	itt	mi
 8007a98:	f043 0320 	orrmi.w	r3, r3, #32
 8007a9c:	6023      	strmi	r3, [r4, #0]
 8007a9e:	b11d      	cbz	r5, 8007aa8 <_printf_i+0x1a0>
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	e7ab      	b.n	80079fc <_printf_i+0xf4>
 8007aa4:	4826      	ldr	r0, [pc, #152]	@ (8007b40 <_printf_i+0x238>)
 8007aa6:	e7e9      	b.n	8007a7c <_printf_i+0x174>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	f023 0320 	bic.w	r3, r3, #32
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	e7f6      	b.n	8007aa0 <_printf_i+0x198>
 8007ab2:	4616      	mov	r6, r2
 8007ab4:	e7bd      	b.n	8007a32 <_printf_i+0x12a>
 8007ab6:	6833      	ldr	r3, [r6, #0]
 8007ab8:	6825      	ldr	r5, [r4, #0]
 8007aba:	1d18      	adds	r0, r3, #4
 8007abc:	6961      	ldr	r1, [r4, #20]
 8007abe:	6030      	str	r0, [r6, #0]
 8007ac0:	062e      	lsls	r6, r5, #24
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	d501      	bpl.n	8007aca <_printf_i+0x1c2>
 8007ac6:	6019      	str	r1, [r3, #0]
 8007ac8:	e002      	b.n	8007ad0 <_printf_i+0x1c8>
 8007aca:	0668      	lsls	r0, r5, #25
 8007acc:	d5fb      	bpl.n	8007ac6 <_printf_i+0x1be>
 8007ace:	8019      	strh	r1, [r3, #0]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4616      	mov	r6, r2
 8007ad4:	6123      	str	r3, [r4, #16]
 8007ad6:	e7bc      	b.n	8007a52 <_printf_i+0x14a>
 8007ad8:	6833      	ldr	r3, [r6, #0]
 8007ada:	2100      	movs	r1, #0
 8007adc:	1d1a      	adds	r2, r3, #4
 8007ade:	6032      	str	r2, [r6, #0]
 8007ae0:	681e      	ldr	r6, [r3, #0]
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f000 fafc 	bl	80080e2 <memchr>
 8007aea:	b108      	cbz	r0, 8007af0 <_printf_i+0x1e8>
 8007aec:	1b80      	subs	r0, r0, r6
 8007aee:	6060      	str	r0, [r4, #4]
 8007af0:	6863      	ldr	r3, [r4, #4]
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	2300      	movs	r3, #0
 8007af6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007afa:	e7aa      	b.n	8007a52 <_printf_i+0x14a>
 8007afc:	4632      	mov	r2, r6
 8007afe:	4649      	mov	r1, r9
 8007b00:	4640      	mov	r0, r8
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	47d0      	blx	sl
 8007b06:	3001      	adds	r0, #1
 8007b08:	d0ad      	beq.n	8007a66 <_printf_i+0x15e>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	079b      	lsls	r3, r3, #30
 8007b0e:	d413      	bmi.n	8007b38 <_printf_i+0x230>
 8007b10:	68e0      	ldr	r0, [r4, #12]
 8007b12:	9b03      	ldr	r3, [sp, #12]
 8007b14:	4298      	cmp	r0, r3
 8007b16:	bfb8      	it	lt
 8007b18:	4618      	movlt	r0, r3
 8007b1a:	e7a6      	b.n	8007a6a <_printf_i+0x162>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4632      	mov	r2, r6
 8007b20:	4649      	mov	r1, r9
 8007b22:	4640      	mov	r0, r8
 8007b24:	47d0      	blx	sl
 8007b26:	3001      	adds	r0, #1
 8007b28:	d09d      	beq.n	8007a66 <_printf_i+0x15e>
 8007b2a:	3501      	adds	r5, #1
 8007b2c:	68e3      	ldr	r3, [r4, #12]
 8007b2e:	9903      	ldr	r1, [sp, #12]
 8007b30:	1a5b      	subs	r3, r3, r1
 8007b32:	42ab      	cmp	r3, r5
 8007b34:	dcf2      	bgt.n	8007b1c <_printf_i+0x214>
 8007b36:	e7eb      	b.n	8007b10 <_printf_i+0x208>
 8007b38:	2500      	movs	r5, #0
 8007b3a:	f104 0619 	add.w	r6, r4, #25
 8007b3e:	e7f5      	b.n	8007b2c <_printf_i+0x224>
 8007b40:	0800aa0e 	.word	0x0800aa0e
 8007b44:	0800aa1f 	.word	0x0800aa1f

08007b48 <std>:
 8007b48:	2300      	movs	r3, #0
 8007b4a:	b510      	push	{r4, lr}
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b56:	6083      	str	r3, [r0, #8]
 8007b58:	8181      	strh	r1, [r0, #12]
 8007b5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b5c:	81c2      	strh	r2, [r0, #14]
 8007b5e:	6183      	str	r3, [r0, #24]
 8007b60:	4619      	mov	r1, r3
 8007b62:	2208      	movs	r2, #8
 8007b64:	305c      	adds	r0, #92	@ 0x5c
 8007b66:	f000 fa2d 	bl	8007fc4 <memset>
 8007b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba0 <std+0x58>)
 8007b6c:	6224      	str	r4, [r4, #32]
 8007b6e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b70:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba4 <std+0x5c>)
 8007b72:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba8 <std+0x60>)
 8007b76:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b78:	4b0c      	ldr	r3, [pc, #48]	@ (8007bac <std+0x64>)
 8007b7a:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb0 <std+0x68>)
 8007b7e:	429c      	cmp	r4, r3
 8007b80:	d006      	beq.n	8007b90 <std+0x48>
 8007b82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b86:	4294      	cmp	r4, r2
 8007b88:	d002      	beq.n	8007b90 <std+0x48>
 8007b8a:	33d0      	adds	r3, #208	@ 0xd0
 8007b8c:	429c      	cmp	r4, r3
 8007b8e:	d105      	bne.n	8007b9c <std+0x54>
 8007b90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b98:	f000 baa0 	b.w	80080dc <__retarget_lock_init_recursive>
 8007b9c:	bd10      	pop	{r4, pc}
 8007b9e:	bf00      	nop
 8007ba0:	08007e15 	.word	0x08007e15
 8007ba4:	08007e37 	.word	0x08007e37
 8007ba8:	08007e6f 	.word	0x08007e6f
 8007bac:	08007e93 	.word	0x08007e93
 8007bb0:	20000804 	.word	0x20000804

08007bb4 <stdio_exit_handler>:
 8007bb4:	4a02      	ldr	r2, [pc, #8]	@ (8007bc0 <stdio_exit_handler+0xc>)
 8007bb6:	4903      	ldr	r1, [pc, #12]	@ (8007bc4 <stdio_exit_handler+0x10>)
 8007bb8:	4803      	ldr	r0, [pc, #12]	@ (8007bc8 <stdio_exit_handler+0x14>)
 8007bba:	f000 b869 	b.w	8007c90 <_fwalk_sglue>
 8007bbe:	bf00      	nop
 8007bc0:	20000024 	.word	0x20000024
 8007bc4:	08009b61 	.word	0x08009b61
 8007bc8:	20000034 	.word	0x20000034

08007bcc <cleanup_stdio>:
 8007bcc:	6841      	ldr	r1, [r0, #4]
 8007bce:	4b0c      	ldr	r3, [pc, #48]	@ (8007c00 <cleanup_stdio+0x34>)
 8007bd0:	b510      	push	{r4, lr}
 8007bd2:	4299      	cmp	r1, r3
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	d001      	beq.n	8007bdc <cleanup_stdio+0x10>
 8007bd8:	f001 ffc2 	bl	8009b60 <_fflush_r>
 8007bdc:	68a1      	ldr	r1, [r4, #8]
 8007bde:	4b09      	ldr	r3, [pc, #36]	@ (8007c04 <cleanup_stdio+0x38>)
 8007be0:	4299      	cmp	r1, r3
 8007be2:	d002      	beq.n	8007bea <cleanup_stdio+0x1e>
 8007be4:	4620      	mov	r0, r4
 8007be6:	f001 ffbb 	bl	8009b60 <_fflush_r>
 8007bea:	68e1      	ldr	r1, [r4, #12]
 8007bec:	4b06      	ldr	r3, [pc, #24]	@ (8007c08 <cleanup_stdio+0x3c>)
 8007bee:	4299      	cmp	r1, r3
 8007bf0:	d004      	beq.n	8007bfc <cleanup_stdio+0x30>
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf8:	f001 bfb2 	b.w	8009b60 <_fflush_r>
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000804 	.word	0x20000804
 8007c04:	2000086c 	.word	0x2000086c
 8007c08:	200008d4 	.word	0x200008d4

08007c0c <global_stdio_init.part.0>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c3c <global_stdio_init.part.0+0x30>)
 8007c10:	4c0b      	ldr	r4, [pc, #44]	@ (8007c40 <global_stdio_init.part.0+0x34>)
 8007c12:	4a0c      	ldr	r2, [pc, #48]	@ (8007c44 <global_stdio_init.part.0+0x38>)
 8007c14:	4620      	mov	r0, r4
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	2104      	movs	r1, #4
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f7ff ff94 	bl	8007b48 <std>
 8007c20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c24:	2201      	movs	r2, #1
 8007c26:	2109      	movs	r1, #9
 8007c28:	f7ff ff8e 	bl	8007b48 <std>
 8007c2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c30:	2202      	movs	r2, #2
 8007c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c36:	2112      	movs	r1, #18
 8007c38:	f7ff bf86 	b.w	8007b48 <std>
 8007c3c:	2000093c 	.word	0x2000093c
 8007c40:	20000804 	.word	0x20000804
 8007c44:	08007bb5 	.word	0x08007bb5

08007c48 <__sfp_lock_acquire>:
 8007c48:	4801      	ldr	r0, [pc, #4]	@ (8007c50 <__sfp_lock_acquire+0x8>)
 8007c4a:	f000 ba48 	b.w	80080de <__retarget_lock_acquire_recursive>
 8007c4e:	bf00      	nop
 8007c50:	20000945 	.word	0x20000945

08007c54 <__sfp_lock_release>:
 8007c54:	4801      	ldr	r0, [pc, #4]	@ (8007c5c <__sfp_lock_release+0x8>)
 8007c56:	f000 ba43 	b.w	80080e0 <__retarget_lock_release_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	20000945 	.word	0x20000945

08007c60 <__sinit>:
 8007c60:	b510      	push	{r4, lr}
 8007c62:	4604      	mov	r4, r0
 8007c64:	f7ff fff0 	bl	8007c48 <__sfp_lock_acquire>
 8007c68:	6a23      	ldr	r3, [r4, #32]
 8007c6a:	b11b      	cbz	r3, 8007c74 <__sinit+0x14>
 8007c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c70:	f7ff bff0 	b.w	8007c54 <__sfp_lock_release>
 8007c74:	4b04      	ldr	r3, [pc, #16]	@ (8007c88 <__sinit+0x28>)
 8007c76:	6223      	str	r3, [r4, #32]
 8007c78:	4b04      	ldr	r3, [pc, #16]	@ (8007c8c <__sinit+0x2c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1f5      	bne.n	8007c6c <__sinit+0xc>
 8007c80:	f7ff ffc4 	bl	8007c0c <global_stdio_init.part.0>
 8007c84:	e7f2      	b.n	8007c6c <__sinit+0xc>
 8007c86:	bf00      	nop
 8007c88:	08007bcd 	.word	0x08007bcd
 8007c8c:	2000093c 	.word	0x2000093c

08007c90 <_fwalk_sglue>:
 8007c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c94:	4607      	mov	r7, r0
 8007c96:	4688      	mov	r8, r1
 8007c98:	4614      	mov	r4, r2
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ca4:	d505      	bpl.n	8007cb2 <_fwalk_sglue+0x22>
 8007ca6:	6824      	ldr	r4, [r4, #0]
 8007ca8:	2c00      	cmp	r4, #0
 8007caa:	d1f7      	bne.n	8007c9c <_fwalk_sglue+0xc>
 8007cac:	4630      	mov	r0, r6
 8007cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cb2:	89ab      	ldrh	r3, [r5, #12]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d907      	bls.n	8007cc8 <_fwalk_sglue+0x38>
 8007cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	d003      	beq.n	8007cc8 <_fwalk_sglue+0x38>
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	47c0      	blx	r8
 8007cc6:	4306      	orrs	r6, r0
 8007cc8:	3568      	adds	r5, #104	@ 0x68
 8007cca:	e7e9      	b.n	8007ca0 <_fwalk_sglue+0x10>

08007ccc <iprintf>:
 8007ccc:	b40f      	push	{r0, r1, r2, r3}
 8007cce:	b507      	push	{r0, r1, r2, lr}
 8007cd0:	4906      	ldr	r1, [pc, #24]	@ (8007cec <iprintf+0x20>)
 8007cd2:	ab04      	add	r3, sp, #16
 8007cd4:	6808      	ldr	r0, [r1, #0]
 8007cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cda:	6881      	ldr	r1, [r0, #8]
 8007cdc:	9301      	str	r3, [sp, #4]
 8007cde:	f001 fda7 	bl	8009830 <_vfiprintf_r>
 8007ce2:	b003      	add	sp, #12
 8007ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ce8:	b004      	add	sp, #16
 8007cea:	4770      	bx	lr
 8007cec:	20000030 	.word	0x20000030

08007cf0 <_puts_r>:
 8007cf0:	6a03      	ldr	r3, [r0, #32]
 8007cf2:	b570      	push	{r4, r5, r6, lr}
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	460e      	mov	r6, r1
 8007cf8:	6884      	ldr	r4, [r0, #8]
 8007cfa:	b90b      	cbnz	r3, 8007d00 <_puts_r+0x10>
 8007cfc:	f7ff ffb0 	bl	8007c60 <__sinit>
 8007d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d02:	07db      	lsls	r3, r3, #31
 8007d04:	d405      	bmi.n	8007d12 <_puts_r+0x22>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	0598      	lsls	r0, r3, #22
 8007d0a:	d402      	bmi.n	8007d12 <_puts_r+0x22>
 8007d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d0e:	f000 f9e6 	bl	80080de <__retarget_lock_acquire_recursive>
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	0719      	lsls	r1, r3, #28
 8007d16:	d502      	bpl.n	8007d1e <_puts_r+0x2e>
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d135      	bne.n	8007d8a <_puts_r+0x9a>
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4628      	mov	r0, r5
 8007d22:	f000 f8f9 	bl	8007f18 <__swsetup_r>
 8007d26:	b380      	cbz	r0, 8007d8a <_puts_r+0x9a>
 8007d28:	f04f 35ff 	mov.w	r5, #4294967295
 8007d2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d2e:	07da      	lsls	r2, r3, #31
 8007d30:	d405      	bmi.n	8007d3e <_puts_r+0x4e>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	059b      	lsls	r3, r3, #22
 8007d36:	d402      	bmi.n	8007d3e <_puts_r+0x4e>
 8007d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d3a:	f000 f9d1 	bl	80080e0 <__retarget_lock_release_recursive>
 8007d3e:	4628      	mov	r0, r5
 8007d40:	bd70      	pop	{r4, r5, r6, pc}
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	da04      	bge.n	8007d50 <_puts_r+0x60>
 8007d46:	69a2      	ldr	r2, [r4, #24]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	dc17      	bgt.n	8007d7c <_puts_r+0x8c>
 8007d4c:	290a      	cmp	r1, #10
 8007d4e:	d015      	beq.n	8007d7c <_puts_r+0x8c>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	6022      	str	r2, [r4, #0]
 8007d56:	7019      	strb	r1, [r3, #0]
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	60a3      	str	r3, [r4, #8]
 8007d62:	2900      	cmp	r1, #0
 8007d64:	d1ed      	bne.n	8007d42 <_puts_r+0x52>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	da11      	bge.n	8007d8e <_puts_r+0x9e>
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	210a      	movs	r1, #10
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 f893 	bl	8007e9a <__swbuf_r>
 8007d74:	3001      	adds	r0, #1
 8007d76:	d0d7      	beq.n	8007d28 <_puts_r+0x38>
 8007d78:	250a      	movs	r5, #10
 8007d7a:	e7d7      	b.n	8007d2c <_puts_r+0x3c>
 8007d7c:	4622      	mov	r2, r4
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f000 f88b 	bl	8007e9a <__swbuf_r>
 8007d84:	3001      	adds	r0, #1
 8007d86:	d1e7      	bne.n	8007d58 <_puts_r+0x68>
 8007d88:	e7ce      	b.n	8007d28 <_puts_r+0x38>
 8007d8a:	3e01      	subs	r6, #1
 8007d8c:	e7e4      	b.n	8007d58 <_puts_r+0x68>
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	6022      	str	r2, [r4, #0]
 8007d94:	220a      	movs	r2, #10
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	e7ee      	b.n	8007d78 <_puts_r+0x88>
	...

08007d9c <puts>:
 8007d9c:	4b02      	ldr	r3, [pc, #8]	@ (8007da8 <puts+0xc>)
 8007d9e:	4601      	mov	r1, r0
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	f7ff bfa5 	b.w	8007cf0 <_puts_r>
 8007da6:	bf00      	nop
 8007da8:	20000030 	.word	0x20000030

08007dac <sniprintf>:
 8007dac:	b40c      	push	{r2, r3}
 8007dae:	b530      	push	{r4, r5, lr}
 8007db0:	4b17      	ldr	r3, [pc, #92]	@ (8007e10 <sniprintf+0x64>)
 8007db2:	1e0c      	subs	r4, r1, #0
 8007db4:	681d      	ldr	r5, [r3, #0]
 8007db6:	b09d      	sub	sp, #116	@ 0x74
 8007db8:	da08      	bge.n	8007dcc <sniprintf+0x20>
 8007dba:	238b      	movs	r3, #139	@ 0x8b
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc0:	602b      	str	r3, [r5, #0]
 8007dc2:	b01d      	add	sp, #116	@ 0x74
 8007dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dc8:	b002      	add	sp, #8
 8007dca:	4770      	bx	lr
 8007dcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007dd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007dd4:	bf0c      	ite	eq
 8007dd6:	4623      	moveq	r3, r4
 8007dd8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ddc:	9304      	str	r3, [sp, #16]
 8007dde:	9307      	str	r3, [sp, #28]
 8007de0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007de4:	9002      	str	r0, [sp, #8]
 8007de6:	9006      	str	r0, [sp, #24]
 8007de8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dec:	4628      	mov	r0, r5
 8007dee:	ab21      	add	r3, sp, #132	@ 0x84
 8007df0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007df2:	a902      	add	r1, sp, #8
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	f001 fbf7 	bl	80095e8 <_svfiprintf_r>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	bfbc      	itt	lt
 8007dfe:	238b      	movlt	r3, #139	@ 0x8b
 8007e00:	602b      	strlt	r3, [r5, #0]
 8007e02:	2c00      	cmp	r4, #0
 8007e04:	d0dd      	beq.n	8007dc2 <sniprintf+0x16>
 8007e06:	2200      	movs	r2, #0
 8007e08:	9b02      	ldr	r3, [sp, #8]
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	e7d9      	b.n	8007dc2 <sniprintf+0x16>
 8007e0e:	bf00      	nop
 8007e10:	20000030 	.word	0x20000030

08007e14 <__sread>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	460c      	mov	r4, r1
 8007e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1c:	f000 f900 	bl	8008020 <_read_r>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	bfab      	itete	ge
 8007e24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e26:	89a3      	ldrhlt	r3, [r4, #12]
 8007e28:	181b      	addge	r3, r3, r0
 8007e2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e2e:	bfac      	ite	ge
 8007e30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e32:	81a3      	strhlt	r3, [r4, #12]
 8007e34:	bd10      	pop	{r4, pc}

08007e36 <__swrite>:
 8007e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3a:	461f      	mov	r7, r3
 8007e3c:	898b      	ldrh	r3, [r1, #12]
 8007e3e:	4605      	mov	r5, r0
 8007e40:	05db      	lsls	r3, r3, #23
 8007e42:	460c      	mov	r4, r1
 8007e44:	4616      	mov	r6, r2
 8007e46:	d505      	bpl.n	8007e54 <__swrite+0x1e>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e50:	f000 f8d4 	bl	8007ffc <_lseek_r>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	4632      	mov	r2, r6
 8007e58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	4628      	mov	r0, r5
 8007e60:	463b      	mov	r3, r7
 8007e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	f000 b8fb 	b.w	8008064 <_write_r>

08007e6e <__sseek>:
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	460c      	mov	r4, r1
 8007e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e76:	f000 f8c1 	bl	8007ffc <_lseek_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	bf15      	itete	ne
 8007e80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e8a:	81a3      	strheq	r3, [r4, #12]
 8007e8c:	bf18      	it	ne
 8007e8e:	81a3      	strhne	r3, [r4, #12]
 8007e90:	bd10      	pop	{r4, pc}

08007e92 <__sclose>:
 8007e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e96:	f000 b8a1 	b.w	8007fdc <_close_r>

08007e9a <__swbuf_r>:
 8007e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9c:	460e      	mov	r6, r1
 8007e9e:	4614      	mov	r4, r2
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	b118      	cbz	r0, 8007eac <__swbuf_r+0x12>
 8007ea4:	6a03      	ldr	r3, [r0, #32]
 8007ea6:	b90b      	cbnz	r3, 8007eac <__swbuf_r+0x12>
 8007ea8:	f7ff feda 	bl	8007c60 <__sinit>
 8007eac:	69a3      	ldr	r3, [r4, #24]
 8007eae:	60a3      	str	r3, [r4, #8]
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	071a      	lsls	r2, r3, #28
 8007eb4:	d501      	bpl.n	8007eba <__swbuf_r+0x20>
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	b943      	cbnz	r3, 8007ecc <__swbuf_r+0x32>
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 f82b 	bl	8007f18 <__swsetup_r>
 8007ec2:	b118      	cbz	r0, 8007ecc <__swbuf_r+0x32>
 8007ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ec8:	4638      	mov	r0, r7
 8007eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	6922      	ldr	r2, [r4, #16]
 8007ed0:	b2f6      	uxtb	r6, r6
 8007ed2:	1a98      	subs	r0, r3, r2
 8007ed4:	6963      	ldr	r3, [r4, #20]
 8007ed6:	4637      	mov	r7, r6
 8007ed8:	4283      	cmp	r3, r0
 8007eda:	dc05      	bgt.n	8007ee8 <__swbuf_r+0x4e>
 8007edc:	4621      	mov	r1, r4
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f001 fe3e 	bl	8009b60 <_fflush_r>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d1ed      	bne.n	8007ec4 <__swbuf_r+0x2a>
 8007ee8:	68a3      	ldr	r3, [r4, #8]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	60a3      	str	r3, [r4, #8]
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	6022      	str	r2, [r4, #0]
 8007ef4:	701e      	strb	r6, [r3, #0]
 8007ef6:	6962      	ldr	r2, [r4, #20]
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d004      	beq.n	8007f08 <__swbuf_r+0x6e>
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	07db      	lsls	r3, r3, #31
 8007f02:	d5e1      	bpl.n	8007ec8 <__swbuf_r+0x2e>
 8007f04:	2e0a      	cmp	r6, #10
 8007f06:	d1df      	bne.n	8007ec8 <__swbuf_r+0x2e>
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f001 fe28 	bl	8009b60 <_fflush_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d0d9      	beq.n	8007ec8 <__swbuf_r+0x2e>
 8007f14:	e7d6      	b.n	8007ec4 <__swbuf_r+0x2a>
	...

08007f18 <__swsetup_r>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4b29      	ldr	r3, [pc, #164]	@ (8007fc0 <__swsetup_r+0xa8>)
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	6818      	ldr	r0, [r3, #0]
 8007f20:	460c      	mov	r4, r1
 8007f22:	b118      	cbz	r0, 8007f2c <__swsetup_r+0x14>
 8007f24:	6a03      	ldr	r3, [r0, #32]
 8007f26:	b90b      	cbnz	r3, 8007f2c <__swsetup_r+0x14>
 8007f28:	f7ff fe9a 	bl	8007c60 <__sinit>
 8007f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f30:	0719      	lsls	r1, r3, #28
 8007f32:	d422      	bmi.n	8007f7a <__swsetup_r+0x62>
 8007f34:	06da      	lsls	r2, r3, #27
 8007f36:	d407      	bmi.n	8007f48 <__swsetup_r+0x30>
 8007f38:	2209      	movs	r2, #9
 8007f3a:	602a      	str	r2, [r5, #0]
 8007f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f40:	f04f 30ff 	mov.w	r0, #4294967295
 8007f44:	81a3      	strh	r3, [r4, #12]
 8007f46:	e033      	b.n	8007fb0 <__swsetup_r+0x98>
 8007f48:	0758      	lsls	r0, r3, #29
 8007f4a:	d512      	bpl.n	8007f72 <__swsetup_r+0x5a>
 8007f4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f4e:	b141      	cbz	r1, 8007f62 <__swsetup_r+0x4a>
 8007f50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f54:	4299      	cmp	r1, r3
 8007f56:	d002      	beq.n	8007f5e <__swsetup_r+0x46>
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f000 ff21 	bl	8008da0 <_free_r>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f68:	81a3      	strh	r3, [r4, #12]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6063      	str	r3, [r4, #4]
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	f043 0308 	orr.w	r3, r3, #8
 8007f78:	81a3      	strh	r3, [r4, #12]
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	b94b      	cbnz	r3, 8007f92 <__swsetup_r+0x7a>
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f88:	d003      	beq.n	8007f92 <__swsetup_r+0x7a>
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f001 fe34 	bl	8009bfa <__smakebuf_r>
 8007f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f96:	f013 0201 	ands.w	r2, r3, #1
 8007f9a:	d00a      	beq.n	8007fb2 <__swsetup_r+0x9a>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	60a2      	str	r2, [r4, #8]
 8007fa0:	6962      	ldr	r2, [r4, #20]
 8007fa2:	4252      	negs	r2, r2
 8007fa4:	61a2      	str	r2, [r4, #24]
 8007fa6:	6922      	ldr	r2, [r4, #16]
 8007fa8:	b942      	cbnz	r2, 8007fbc <__swsetup_r+0xa4>
 8007faa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fae:	d1c5      	bne.n	8007f3c <__swsetup_r+0x24>
 8007fb0:	bd38      	pop	{r3, r4, r5, pc}
 8007fb2:	0799      	lsls	r1, r3, #30
 8007fb4:	bf58      	it	pl
 8007fb6:	6962      	ldrpl	r2, [r4, #20]
 8007fb8:	60a2      	str	r2, [r4, #8]
 8007fba:	e7f4      	b.n	8007fa6 <__swsetup_r+0x8e>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	e7f7      	b.n	8007fb0 <__swsetup_r+0x98>
 8007fc0:	20000030 	.word	0x20000030

08007fc4 <memset>:
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	4402      	add	r2, r0
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d100      	bne.n	8007fce <memset+0xa>
 8007fcc:	4770      	bx	lr
 8007fce:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd2:	e7f9      	b.n	8007fc8 <memset+0x4>

08007fd4 <_localeconv_r>:
 8007fd4:	4800      	ldr	r0, [pc, #0]	@ (8007fd8 <_localeconv_r+0x4>)
 8007fd6:	4770      	bx	lr
 8007fd8:	20000170 	.word	0x20000170

08007fdc <_close_r>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	2300      	movs	r3, #0
 8007fe0:	4d05      	ldr	r5, [pc, #20]	@ (8007ff8 <_close_r+0x1c>)
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	4608      	mov	r0, r1
 8007fe6:	602b      	str	r3, [r5, #0]
 8007fe8:	f7fa f91f 	bl	800222a <_close>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_close_r+0x1a>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_close_r+0x1a>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	20000940 	.word	0x20000940

08007ffc <_lseek_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4604      	mov	r4, r0
 8008000:	4608      	mov	r0, r1
 8008002:	4611      	mov	r1, r2
 8008004:	2200      	movs	r2, #0
 8008006:	4d05      	ldr	r5, [pc, #20]	@ (800801c <_lseek_r+0x20>)
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f7fa f931 	bl	8002272 <_lseek>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_lseek_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_lseek_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20000940 	.word	0x20000940

08008020 <_read_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	2200      	movs	r2, #0
 800802a:	4d05      	ldr	r5, [pc, #20]	@ (8008040 <_read_r+0x20>)
 800802c:	602a      	str	r2, [r5, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	f7fa f8de 	bl	80021f0 <_read>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_read_r+0x1e>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_read_r+0x1e>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	20000940 	.word	0x20000940

08008044 <_sbrk_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	2300      	movs	r3, #0
 8008048:	4d05      	ldr	r5, [pc, #20]	@ (8008060 <_sbrk_r+0x1c>)
 800804a:	4604      	mov	r4, r0
 800804c:	4608      	mov	r0, r1
 800804e:	602b      	str	r3, [r5, #0]
 8008050:	f7fa f91c 	bl	800228c <_sbrk>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_sbrk_r+0x1a>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_sbrk_r+0x1a>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	20000940 	.word	0x20000940

08008064 <_write_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	4611      	mov	r1, r2
 800806c:	2200      	movs	r2, #0
 800806e:	4d05      	ldr	r5, [pc, #20]	@ (8008084 <_write_r+0x20>)
 8008070:	602a      	str	r2, [r5, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	f7f9 fc3e 	bl	80018f4 <_write>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_write_r+0x1e>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_write_r+0x1e>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	20000940 	.word	0x20000940

08008088 <__errno>:
 8008088:	4b01      	ldr	r3, [pc, #4]	@ (8008090 <__errno+0x8>)
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20000030 	.word	0x20000030

08008094 <__libc_init_array>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	2600      	movs	r6, #0
 8008098:	4d0c      	ldr	r5, [pc, #48]	@ (80080cc <__libc_init_array+0x38>)
 800809a:	4c0d      	ldr	r4, [pc, #52]	@ (80080d0 <__libc_init_array+0x3c>)
 800809c:	1b64      	subs	r4, r4, r5
 800809e:	10a4      	asrs	r4, r4, #2
 80080a0:	42a6      	cmp	r6, r4
 80080a2:	d109      	bne.n	80080b8 <__libc_init_array+0x24>
 80080a4:	f001 ff16 	bl	8009ed4 <_init>
 80080a8:	2600      	movs	r6, #0
 80080aa:	4d0a      	ldr	r5, [pc, #40]	@ (80080d4 <__libc_init_array+0x40>)
 80080ac:	4c0a      	ldr	r4, [pc, #40]	@ (80080d8 <__libc_init_array+0x44>)
 80080ae:	1b64      	subs	r4, r4, r5
 80080b0:	10a4      	asrs	r4, r4, #2
 80080b2:	42a6      	cmp	r6, r4
 80080b4:	d105      	bne.n	80080c2 <__libc_init_array+0x2e>
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080bc:	4798      	blx	r3
 80080be:	3601      	adds	r6, #1
 80080c0:	e7ee      	b.n	80080a0 <__libc_init_array+0xc>
 80080c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c6:	4798      	blx	r3
 80080c8:	3601      	adds	r6, #1
 80080ca:	e7f2      	b.n	80080b2 <__libc_init_array+0x1e>
 80080cc:	0800ad78 	.word	0x0800ad78
 80080d0:	0800ad78 	.word	0x0800ad78
 80080d4:	0800ad78 	.word	0x0800ad78
 80080d8:	0800ad7c 	.word	0x0800ad7c

080080dc <__retarget_lock_init_recursive>:
 80080dc:	4770      	bx	lr

080080de <__retarget_lock_acquire_recursive>:
 80080de:	4770      	bx	lr

080080e0 <__retarget_lock_release_recursive>:
 80080e0:	4770      	bx	lr

080080e2 <memchr>:
 80080e2:	4603      	mov	r3, r0
 80080e4:	b510      	push	{r4, lr}
 80080e6:	b2c9      	uxtb	r1, r1
 80080e8:	4402      	add	r2, r0
 80080ea:	4293      	cmp	r3, r2
 80080ec:	4618      	mov	r0, r3
 80080ee:	d101      	bne.n	80080f4 <memchr+0x12>
 80080f0:	2000      	movs	r0, #0
 80080f2:	e003      	b.n	80080fc <memchr+0x1a>
 80080f4:	7804      	ldrb	r4, [r0, #0]
 80080f6:	3301      	adds	r3, #1
 80080f8:	428c      	cmp	r4, r1
 80080fa:	d1f6      	bne.n	80080ea <memchr+0x8>
 80080fc:	bd10      	pop	{r4, pc}

080080fe <quorem>:
 80080fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008102:	6903      	ldr	r3, [r0, #16]
 8008104:	690c      	ldr	r4, [r1, #16]
 8008106:	4607      	mov	r7, r0
 8008108:	42a3      	cmp	r3, r4
 800810a:	db7e      	blt.n	800820a <quorem+0x10c>
 800810c:	3c01      	subs	r4, #1
 800810e:	00a3      	lsls	r3, r4, #2
 8008110:	f100 0514 	add.w	r5, r0, #20
 8008114:	f101 0814 	add.w	r8, r1, #20
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008128:	3301      	adds	r3, #1
 800812a:	429a      	cmp	r2, r3
 800812c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008134:	d32e      	bcc.n	8008194 <quorem+0x96>
 8008136:	f04f 0a00 	mov.w	sl, #0
 800813a:	46c4      	mov	ip, r8
 800813c:	46ae      	mov	lr, r5
 800813e:	46d3      	mov	fp, sl
 8008140:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008144:	b298      	uxth	r0, r3
 8008146:	fb06 a000 	mla	r0, r6, r0, sl
 800814a:	0c1b      	lsrs	r3, r3, #16
 800814c:	0c02      	lsrs	r2, r0, #16
 800814e:	fb06 2303 	mla	r3, r6, r3, r2
 8008152:	f8de 2000 	ldr.w	r2, [lr]
 8008156:	b280      	uxth	r0, r0
 8008158:	b292      	uxth	r2, r2
 800815a:	1a12      	subs	r2, r2, r0
 800815c:	445a      	add	r2, fp
 800815e:	f8de 0000 	ldr.w	r0, [lr]
 8008162:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008166:	b29b      	uxth	r3, r3
 8008168:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800816c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008170:	b292      	uxth	r2, r2
 8008172:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008176:	45e1      	cmp	r9, ip
 8008178:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800817c:	f84e 2b04 	str.w	r2, [lr], #4
 8008180:	d2de      	bcs.n	8008140 <quorem+0x42>
 8008182:	9b00      	ldr	r3, [sp, #0]
 8008184:	58eb      	ldr	r3, [r5, r3]
 8008186:	b92b      	cbnz	r3, 8008194 <quorem+0x96>
 8008188:	9b01      	ldr	r3, [sp, #4]
 800818a:	3b04      	subs	r3, #4
 800818c:	429d      	cmp	r5, r3
 800818e:	461a      	mov	r2, r3
 8008190:	d32f      	bcc.n	80081f2 <quorem+0xf4>
 8008192:	613c      	str	r4, [r7, #16]
 8008194:	4638      	mov	r0, r7
 8008196:	f001 f8c3 	bl	8009320 <__mcmp>
 800819a:	2800      	cmp	r0, #0
 800819c:	db25      	blt.n	80081ea <quorem+0xec>
 800819e:	4629      	mov	r1, r5
 80081a0:	2000      	movs	r0, #0
 80081a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80081a6:	f8d1 c000 	ldr.w	ip, [r1]
 80081aa:	fa1f fe82 	uxth.w	lr, r2
 80081ae:	fa1f f38c 	uxth.w	r3, ip
 80081b2:	eba3 030e 	sub.w	r3, r3, lr
 80081b6:	4403      	add	r3, r0
 80081b8:	0c12      	lsrs	r2, r2, #16
 80081ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081c8:	45c1      	cmp	r9, r8
 80081ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081ce:	f841 3b04 	str.w	r3, [r1], #4
 80081d2:	d2e6      	bcs.n	80081a2 <quorem+0xa4>
 80081d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081dc:	b922      	cbnz	r2, 80081e8 <quorem+0xea>
 80081de:	3b04      	subs	r3, #4
 80081e0:	429d      	cmp	r5, r3
 80081e2:	461a      	mov	r2, r3
 80081e4:	d30b      	bcc.n	80081fe <quorem+0x100>
 80081e6:	613c      	str	r4, [r7, #16]
 80081e8:	3601      	adds	r6, #1
 80081ea:	4630      	mov	r0, r6
 80081ec:	b003      	add	sp, #12
 80081ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f2:	6812      	ldr	r2, [r2, #0]
 80081f4:	3b04      	subs	r3, #4
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	d1cb      	bne.n	8008192 <quorem+0x94>
 80081fa:	3c01      	subs	r4, #1
 80081fc:	e7c6      	b.n	800818c <quorem+0x8e>
 80081fe:	6812      	ldr	r2, [r2, #0]
 8008200:	3b04      	subs	r3, #4
 8008202:	2a00      	cmp	r2, #0
 8008204:	d1ef      	bne.n	80081e6 <quorem+0xe8>
 8008206:	3c01      	subs	r4, #1
 8008208:	e7ea      	b.n	80081e0 <quorem+0xe2>
 800820a:	2000      	movs	r0, #0
 800820c:	e7ee      	b.n	80081ec <quorem+0xee>
	...

08008210 <_dtoa_r>:
 8008210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	4614      	mov	r4, r2
 8008216:	461d      	mov	r5, r3
 8008218:	69c7      	ldr	r7, [r0, #28]
 800821a:	b097      	sub	sp, #92	@ 0x5c
 800821c:	4683      	mov	fp, r0
 800821e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008222:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008224:	b97f      	cbnz	r7, 8008246 <_dtoa_r+0x36>
 8008226:	2010      	movs	r0, #16
 8008228:	f7fe ff74 	bl	8007114 <malloc>
 800822c:	4602      	mov	r2, r0
 800822e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008232:	b920      	cbnz	r0, 800823e <_dtoa_r+0x2e>
 8008234:	21ef      	movs	r1, #239	@ 0xef
 8008236:	4ba8      	ldr	r3, [pc, #672]	@ (80084d8 <_dtoa_r+0x2c8>)
 8008238:	48a8      	ldr	r0, [pc, #672]	@ (80084dc <_dtoa_r+0x2cc>)
 800823a:	f001 fd65 	bl	8009d08 <__assert_func>
 800823e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008242:	6007      	str	r7, [r0, #0]
 8008244:	60c7      	str	r7, [r0, #12]
 8008246:	f8db 301c 	ldr.w	r3, [fp, #28]
 800824a:	6819      	ldr	r1, [r3, #0]
 800824c:	b159      	cbz	r1, 8008266 <_dtoa_r+0x56>
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	2301      	movs	r3, #1
 8008252:	4093      	lsls	r3, r2
 8008254:	604a      	str	r2, [r1, #4]
 8008256:	608b      	str	r3, [r1, #8]
 8008258:	4658      	mov	r0, fp
 800825a:	f000 fe29 	bl	8008eb0 <_Bfree>
 800825e:	2200      	movs	r2, #0
 8008260:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	1e2b      	subs	r3, r5, #0
 8008268:	bfaf      	iteee	ge
 800826a:	2300      	movge	r3, #0
 800826c:	2201      	movlt	r2, #1
 800826e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008272:	9303      	strlt	r3, [sp, #12]
 8008274:	bfa8      	it	ge
 8008276:	6033      	strge	r3, [r6, #0]
 8008278:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800827c:	4b98      	ldr	r3, [pc, #608]	@ (80084e0 <_dtoa_r+0x2d0>)
 800827e:	bfb8      	it	lt
 8008280:	6032      	strlt	r2, [r6, #0]
 8008282:	ea33 0308 	bics.w	r3, r3, r8
 8008286:	d112      	bne.n	80082ae <_dtoa_r+0x9e>
 8008288:	f242 730f 	movw	r3, #9999	@ 0x270f
 800828c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008294:	4323      	orrs	r3, r4
 8008296:	f000 8550 	beq.w	8008d3a <_dtoa_r+0xb2a>
 800829a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800829c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80084e4 <_dtoa_r+0x2d4>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8552 	beq.w	8008d4a <_dtoa_r+0xb3a>
 80082a6:	f10a 0303 	add.w	r3, sl, #3
 80082aa:	f000 bd4c 	b.w	8008d46 <_dtoa_r+0xb36>
 80082ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80082b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082ba:	2200      	movs	r2, #0
 80082bc:	2300      	movs	r3, #0
 80082be:	f7f8 fb8b 	bl	80009d8 <__aeabi_dcmpeq>
 80082c2:	4607      	mov	r7, r0
 80082c4:	b158      	cbz	r0, 80082de <_dtoa_r+0xce>
 80082c6:	2301      	movs	r3, #1
 80082c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082ce:	b113      	cbz	r3, 80082d6 <_dtoa_r+0xc6>
 80082d0:	4b85      	ldr	r3, [pc, #532]	@ (80084e8 <_dtoa_r+0x2d8>)
 80082d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80084ec <_dtoa_r+0x2dc>
 80082da:	f000 bd36 	b.w	8008d4a <_dtoa_r+0xb3a>
 80082de:	ab14      	add	r3, sp, #80	@ 0x50
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	ab15      	add	r3, sp, #84	@ 0x54
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	4658      	mov	r0, fp
 80082e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80082ec:	f001 f8c8 	bl	8009480 <__d2b>
 80082f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80082f4:	4681      	mov	r9, r0
 80082f6:	2e00      	cmp	r6, #0
 80082f8:	d077      	beq.n	80083ea <_dtoa_r+0x1da>
 80082fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008300:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008308:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800830c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008310:	9712      	str	r7, [sp, #72]	@ 0x48
 8008312:	4619      	mov	r1, r3
 8008314:	2200      	movs	r2, #0
 8008316:	4b76      	ldr	r3, [pc, #472]	@ (80084f0 <_dtoa_r+0x2e0>)
 8008318:	f7f7 ff3e 	bl	8000198 <__aeabi_dsub>
 800831c:	a368      	add	r3, pc, #416	@ (adr r3, 80084c0 <_dtoa_r+0x2b0>)
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	f7f8 f8f1 	bl	8000508 <__aeabi_dmul>
 8008326:	a368      	add	r3, pc, #416	@ (adr r3, 80084c8 <_dtoa_r+0x2b8>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f7f7 ff36 	bl	800019c <__adddf3>
 8008330:	4604      	mov	r4, r0
 8008332:	4630      	mov	r0, r6
 8008334:	460d      	mov	r5, r1
 8008336:	f7f8 f87d 	bl	8000434 <__aeabi_i2d>
 800833a:	a365      	add	r3, pc, #404	@ (adr r3, 80084d0 <_dtoa_r+0x2c0>)
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	f7f8 f8e2 	bl	8000508 <__aeabi_dmul>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	4620      	mov	r0, r4
 800834a:	4629      	mov	r1, r5
 800834c:	f7f7 ff26 	bl	800019c <__adddf3>
 8008350:	4604      	mov	r4, r0
 8008352:	460d      	mov	r5, r1
 8008354:	f7f8 fb88 	bl	8000a68 <__aeabi_d2iz>
 8008358:	2200      	movs	r2, #0
 800835a:	4607      	mov	r7, r0
 800835c:	2300      	movs	r3, #0
 800835e:	4620      	mov	r0, r4
 8008360:	4629      	mov	r1, r5
 8008362:	f7f8 fb43 	bl	80009ec <__aeabi_dcmplt>
 8008366:	b140      	cbz	r0, 800837a <_dtoa_r+0x16a>
 8008368:	4638      	mov	r0, r7
 800836a:	f7f8 f863 	bl	8000434 <__aeabi_i2d>
 800836e:	4622      	mov	r2, r4
 8008370:	462b      	mov	r3, r5
 8008372:	f7f8 fb31 	bl	80009d8 <__aeabi_dcmpeq>
 8008376:	b900      	cbnz	r0, 800837a <_dtoa_r+0x16a>
 8008378:	3f01      	subs	r7, #1
 800837a:	2f16      	cmp	r7, #22
 800837c:	d853      	bhi.n	8008426 <_dtoa_r+0x216>
 800837e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008382:	4b5c      	ldr	r3, [pc, #368]	@ (80084f4 <_dtoa_r+0x2e4>)
 8008384:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	f7f8 fb2e 	bl	80009ec <__aeabi_dcmplt>
 8008390:	2800      	cmp	r0, #0
 8008392:	d04a      	beq.n	800842a <_dtoa_r+0x21a>
 8008394:	2300      	movs	r3, #0
 8008396:	3f01      	subs	r7, #1
 8008398:	930f      	str	r3, [sp, #60]	@ 0x3c
 800839a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800839c:	1b9b      	subs	r3, r3, r6
 800839e:	1e5a      	subs	r2, r3, #1
 80083a0:	bf46      	itte	mi
 80083a2:	f1c3 0801 	rsbmi	r8, r3, #1
 80083a6:	2300      	movmi	r3, #0
 80083a8:	f04f 0800 	movpl.w	r8, #0
 80083ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80083ae:	bf48      	it	mi
 80083b0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80083b2:	2f00      	cmp	r7, #0
 80083b4:	db3b      	blt.n	800842e <_dtoa_r+0x21e>
 80083b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b8:	970e      	str	r7, [sp, #56]	@ 0x38
 80083ba:	443b      	add	r3, r7
 80083bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083be:	2300      	movs	r3, #0
 80083c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083c4:	2b09      	cmp	r3, #9
 80083c6:	d866      	bhi.n	8008496 <_dtoa_r+0x286>
 80083c8:	2b05      	cmp	r3, #5
 80083ca:	bfc4      	itt	gt
 80083cc:	3b04      	subgt	r3, #4
 80083ce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80083d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083d2:	bfc8      	it	gt
 80083d4:	2400      	movgt	r4, #0
 80083d6:	f1a3 0302 	sub.w	r3, r3, #2
 80083da:	bfd8      	it	le
 80083dc:	2401      	movle	r4, #1
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d864      	bhi.n	80084ac <_dtoa_r+0x29c>
 80083e2:	e8df f003 	tbb	[pc, r3]
 80083e6:	382b      	.short	0x382b
 80083e8:	5636      	.short	0x5636
 80083ea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80083ee:	441e      	add	r6, r3
 80083f0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083f4:	2b20      	cmp	r3, #32
 80083f6:	bfc1      	itttt	gt
 80083f8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80083fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008400:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008404:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008408:	bfd6      	itet	le
 800840a:	f1c3 0320 	rsble	r3, r3, #32
 800840e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008412:	fa04 f003 	lslle.w	r0, r4, r3
 8008416:	f7f7 fffd 	bl	8000414 <__aeabi_ui2d>
 800841a:	2201      	movs	r2, #1
 800841c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008420:	3e01      	subs	r6, #1
 8008422:	9212      	str	r2, [sp, #72]	@ 0x48
 8008424:	e775      	b.n	8008312 <_dtoa_r+0x102>
 8008426:	2301      	movs	r3, #1
 8008428:	e7b6      	b.n	8008398 <_dtoa_r+0x188>
 800842a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800842c:	e7b5      	b.n	800839a <_dtoa_r+0x18a>
 800842e:	427b      	negs	r3, r7
 8008430:	930a      	str	r3, [sp, #40]	@ 0x28
 8008432:	2300      	movs	r3, #0
 8008434:	eba8 0807 	sub.w	r8, r8, r7
 8008438:	930e      	str	r3, [sp, #56]	@ 0x38
 800843a:	e7c2      	b.n	80083c2 <_dtoa_r+0x1b2>
 800843c:	2300      	movs	r3, #0
 800843e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008440:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008442:	2b00      	cmp	r3, #0
 8008444:	dc35      	bgt.n	80084b2 <_dtoa_r+0x2a2>
 8008446:	2301      	movs	r3, #1
 8008448:	461a      	mov	r2, r3
 800844a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800844e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008450:	e00b      	b.n	800846a <_dtoa_r+0x25a>
 8008452:	2301      	movs	r3, #1
 8008454:	e7f3      	b.n	800843e <_dtoa_r+0x22e>
 8008456:	2300      	movs	r3, #0
 8008458:	930b      	str	r3, [sp, #44]	@ 0x2c
 800845a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800845c:	18fb      	adds	r3, r7, r3
 800845e:	9308      	str	r3, [sp, #32]
 8008460:	3301      	adds	r3, #1
 8008462:	2b01      	cmp	r3, #1
 8008464:	9307      	str	r3, [sp, #28]
 8008466:	bfb8      	it	lt
 8008468:	2301      	movlt	r3, #1
 800846a:	2100      	movs	r1, #0
 800846c:	2204      	movs	r2, #4
 800846e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008472:	f102 0514 	add.w	r5, r2, #20
 8008476:	429d      	cmp	r5, r3
 8008478:	d91f      	bls.n	80084ba <_dtoa_r+0x2aa>
 800847a:	6041      	str	r1, [r0, #4]
 800847c:	4658      	mov	r0, fp
 800847e:	f000 fcd7 	bl	8008e30 <_Balloc>
 8008482:	4682      	mov	sl, r0
 8008484:	2800      	cmp	r0, #0
 8008486:	d139      	bne.n	80084fc <_dtoa_r+0x2ec>
 8008488:	4602      	mov	r2, r0
 800848a:	f240 11af 	movw	r1, #431	@ 0x1af
 800848e:	4b1a      	ldr	r3, [pc, #104]	@ (80084f8 <_dtoa_r+0x2e8>)
 8008490:	e6d2      	b.n	8008238 <_dtoa_r+0x28>
 8008492:	2301      	movs	r3, #1
 8008494:	e7e0      	b.n	8008458 <_dtoa_r+0x248>
 8008496:	2401      	movs	r4, #1
 8008498:	2300      	movs	r3, #0
 800849a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800849c:	9320      	str	r3, [sp, #128]	@ 0x80
 800849e:	f04f 33ff 	mov.w	r3, #4294967295
 80084a2:	2200      	movs	r2, #0
 80084a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80084a8:	2312      	movs	r3, #18
 80084aa:	e7d0      	b.n	800844e <_dtoa_r+0x23e>
 80084ac:	2301      	movs	r3, #1
 80084ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084b0:	e7f5      	b.n	800849e <_dtoa_r+0x28e>
 80084b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80084b8:	e7d7      	b.n	800846a <_dtoa_r+0x25a>
 80084ba:	3101      	adds	r1, #1
 80084bc:	0052      	lsls	r2, r2, #1
 80084be:	e7d8      	b.n	8008472 <_dtoa_r+0x262>
 80084c0:	636f4361 	.word	0x636f4361
 80084c4:	3fd287a7 	.word	0x3fd287a7
 80084c8:	8b60c8b3 	.word	0x8b60c8b3
 80084cc:	3fc68a28 	.word	0x3fc68a28
 80084d0:	509f79fb 	.word	0x509f79fb
 80084d4:	3fd34413 	.word	0x3fd34413
 80084d8:	0800aa3d 	.word	0x0800aa3d
 80084dc:	0800aa54 	.word	0x0800aa54
 80084e0:	7ff00000 	.word	0x7ff00000
 80084e4:	0800aa39 	.word	0x0800aa39
 80084e8:	0800aa0d 	.word	0x0800aa0d
 80084ec:	0800aa0c 	.word	0x0800aa0c
 80084f0:	3ff80000 	.word	0x3ff80000
 80084f4:	0800ab50 	.word	0x0800ab50
 80084f8:	0800aaac 	.word	0x0800aaac
 80084fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008500:	6018      	str	r0, [r3, #0]
 8008502:	9b07      	ldr	r3, [sp, #28]
 8008504:	2b0e      	cmp	r3, #14
 8008506:	f200 80a4 	bhi.w	8008652 <_dtoa_r+0x442>
 800850a:	2c00      	cmp	r4, #0
 800850c:	f000 80a1 	beq.w	8008652 <_dtoa_r+0x442>
 8008510:	2f00      	cmp	r7, #0
 8008512:	dd33      	ble.n	800857c <_dtoa_r+0x36c>
 8008514:	4b86      	ldr	r3, [pc, #536]	@ (8008730 <_dtoa_r+0x520>)
 8008516:	f007 020f 	and.w	r2, r7, #15
 800851a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800851e:	05f8      	lsls	r0, r7, #23
 8008520:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008524:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008528:	ea4f 1427 	mov.w	r4, r7, asr #4
 800852c:	d516      	bpl.n	800855c <_dtoa_r+0x34c>
 800852e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008532:	4b80      	ldr	r3, [pc, #512]	@ (8008734 <_dtoa_r+0x524>)
 8008534:	2603      	movs	r6, #3
 8008536:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800853a:	f7f8 f90f 	bl	800075c <__aeabi_ddiv>
 800853e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008542:	f004 040f 	and.w	r4, r4, #15
 8008546:	4d7b      	ldr	r5, [pc, #492]	@ (8008734 <_dtoa_r+0x524>)
 8008548:	b954      	cbnz	r4, 8008560 <_dtoa_r+0x350>
 800854a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800854e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008552:	f7f8 f903 	bl	800075c <__aeabi_ddiv>
 8008556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800855a:	e028      	b.n	80085ae <_dtoa_r+0x39e>
 800855c:	2602      	movs	r6, #2
 800855e:	e7f2      	b.n	8008546 <_dtoa_r+0x336>
 8008560:	07e1      	lsls	r1, r4, #31
 8008562:	d508      	bpl.n	8008576 <_dtoa_r+0x366>
 8008564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008568:	e9d5 2300 	ldrd	r2, r3, [r5]
 800856c:	f7f7 ffcc 	bl	8000508 <__aeabi_dmul>
 8008570:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008574:	3601      	adds	r6, #1
 8008576:	1064      	asrs	r4, r4, #1
 8008578:	3508      	adds	r5, #8
 800857a:	e7e5      	b.n	8008548 <_dtoa_r+0x338>
 800857c:	f000 80d2 	beq.w	8008724 <_dtoa_r+0x514>
 8008580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008584:	427c      	negs	r4, r7
 8008586:	4b6a      	ldr	r3, [pc, #424]	@ (8008730 <_dtoa_r+0x520>)
 8008588:	f004 020f 	and.w	r2, r4, #15
 800858c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f7f7 ffb8 	bl	8000508 <__aeabi_dmul>
 8008598:	2602      	movs	r6, #2
 800859a:	2300      	movs	r3, #0
 800859c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085a0:	4d64      	ldr	r5, [pc, #400]	@ (8008734 <_dtoa_r+0x524>)
 80085a2:	1124      	asrs	r4, r4, #4
 80085a4:	2c00      	cmp	r4, #0
 80085a6:	f040 80b2 	bne.w	800870e <_dtoa_r+0x4fe>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1d3      	bne.n	8008556 <_dtoa_r+0x346>
 80085ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 80b7 	beq.w	8008728 <_dtoa_r+0x518>
 80085ba:	2200      	movs	r2, #0
 80085bc:	4620      	mov	r0, r4
 80085be:	4629      	mov	r1, r5
 80085c0:	4b5d      	ldr	r3, [pc, #372]	@ (8008738 <_dtoa_r+0x528>)
 80085c2:	f7f8 fa13 	bl	80009ec <__aeabi_dcmplt>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f000 80ae 	beq.w	8008728 <_dtoa_r+0x518>
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f000 80aa 	beq.w	8008728 <_dtoa_r+0x518>
 80085d4:	9b08      	ldr	r3, [sp, #32]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	dd37      	ble.n	800864a <_dtoa_r+0x43a>
 80085da:	1e7b      	subs	r3, r7, #1
 80085dc:	4620      	mov	r0, r4
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	2200      	movs	r2, #0
 80085e2:	4629      	mov	r1, r5
 80085e4:	4b55      	ldr	r3, [pc, #340]	@ (800873c <_dtoa_r+0x52c>)
 80085e6:	f7f7 ff8f 	bl	8000508 <__aeabi_dmul>
 80085ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ee:	9c08      	ldr	r4, [sp, #32]
 80085f0:	3601      	adds	r6, #1
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7f7 ff1e 	bl	8000434 <__aeabi_i2d>
 80085f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085fc:	f7f7 ff84 	bl	8000508 <__aeabi_dmul>
 8008600:	2200      	movs	r2, #0
 8008602:	4b4f      	ldr	r3, [pc, #316]	@ (8008740 <_dtoa_r+0x530>)
 8008604:	f7f7 fdca 	bl	800019c <__adddf3>
 8008608:	4605      	mov	r5, r0
 800860a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800860e:	2c00      	cmp	r4, #0
 8008610:	f040 809a 	bne.w	8008748 <_dtoa_r+0x538>
 8008614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008618:	2200      	movs	r2, #0
 800861a:	4b4a      	ldr	r3, [pc, #296]	@ (8008744 <_dtoa_r+0x534>)
 800861c:	f7f7 fdbc 	bl	8000198 <__aeabi_dsub>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008628:	462a      	mov	r2, r5
 800862a:	4633      	mov	r3, r6
 800862c:	f7f8 f9fc 	bl	8000a28 <__aeabi_dcmpgt>
 8008630:	2800      	cmp	r0, #0
 8008632:	f040 828e 	bne.w	8008b52 <_dtoa_r+0x942>
 8008636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800863a:	462a      	mov	r2, r5
 800863c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008640:	f7f8 f9d4 	bl	80009ec <__aeabi_dcmplt>
 8008644:	2800      	cmp	r0, #0
 8008646:	f040 8127 	bne.w	8008898 <_dtoa_r+0x688>
 800864a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800864e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008652:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008654:	2b00      	cmp	r3, #0
 8008656:	f2c0 8163 	blt.w	8008920 <_dtoa_r+0x710>
 800865a:	2f0e      	cmp	r7, #14
 800865c:	f300 8160 	bgt.w	8008920 <_dtoa_r+0x710>
 8008660:	4b33      	ldr	r3, [pc, #204]	@ (8008730 <_dtoa_r+0x520>)
 8008662:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008666:	e9d3 3400 	ldrd	r3, r4, [r3]
 800866a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800866e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008670:	2b00      	cmp	r3, #0
 8008672:	da03      	bge.n	800867c <_dtoa_r+0x46c>
 8008674:	9b07      	ldr	r3, [sp, #28]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f340 8100 	ble.w	800887c <_dtoa_r+0x66c>
 800867c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008680:	4656      	mov	r6, sl
 8008682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008686:	4620      	mov	r0, r4
 8008688:	4629      	mov	r1, r5
 800868a:	f7f8 f867 	bl	800075c <__aeabi_ddiv>
 800868e:	f7f8 f9eb 	bl	8000a68 <__aeabi_d2iz>
 8008692:	4680      	mov	r8, r0
 8008694:	f7f7 fece 	bl	8000434 <__aeabi_i2d>
 8008698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800869c:	f7f7 ff34 	bl	8000508 <__aeabi_dmul>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f7 fd76 	bl	8000198 <__aeabi_dsub>
 80086ac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086b0:	9d07      	ldr	r5, [sp, #28]
 80086b2:	f806 4b01 	strb.w	r4, [r6], #1
 80086b6:	eba6 040a 	sub.w	r4, r6, sl
 80086ba:	42a5      	cmp	r5, r4
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	f040 8116 	bne.w	80088f0 <_dtoa_r+0x6e0>
 80086c4:	f7f7 fd6a 	bl	800019c <__adddf3>
 80086c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086cc:	4604      	mov	r4, r0
 80086ce:	460d      	mov	r5, r1
 80086d0:	f7f8 f9aa 	bl	8000a28 <__aeabi_dcmpgt>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	f040 80f8 	bne.w	80088ca <_dtoa_r+0x6ba>
 80086da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7f8 f979 	bl	80009d8 <__aeabi_dcmpeq>
 80086e6:	b118      	cbz	r0, 80086f0 <_dtoa_r+0x4e0>
 80086e8:	f018 0f01 	tst.w	r8, #1
 80086ec:	f040 80ed 	bne.w	80088ca <_dtoa_r+0x6ba>
 80086f0:	4649      	mov	r1, r9
 80086f2:	4658      	mov	r0, fp
 80086f4:	f000 fbdc 	bl	8008eb0 <_Bfree>
 80086f8:	2300      	movs	r3, #0
 80086fa:	7033      	strb	r3, [r6, #0]
 80086fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80086fe:	3701      	adds	r7, #1
 8008700:	601f      	str	r7, [r3, #0]
 8008702:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 8320 	beq.w	8008d4a <_dtoa_r+0xb3a>
 800870a:	601e      	str	r6, [r3, #0]
 800870c:	e31d      	b.n	8008d4a <_dtoa_r+0xb3a>
 800870e:	07e2      	lsls	r2, r4, #31
 8008710:	d505      	bpl.n	800871e <_dtoa_r+0x50e>
 8008712:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008716:	f7f7 fef7 	bl	8000508 <__aeabi_dmul>
 800871a:	2301      	movs	r3, #1
 800871c:	3601      	adds	r6, #1
 800871e:	1064      	asrs	r4, r4, #1
 8008720:	3508      	adds	r5, #8
 8008722:	e73f      	b.n	80085a4 <_dtoa_r+0x394>
 8008724:	2602      	movs	r6, #2
 8008726:	e742      	b.n	80085ae <_dtoa_r+0x39e>
 8008728:	9c07      	ldr	r4, [sp, #28]
 800872a:	9704      	str	r7, [sp, #16]
 800872c:	e761      	b.n	80085f2 <_dtoa_r+0x3e2>
 800872e:	bf00      	nop
 8008730:	0800ab50 	.word	0x0800ab50
 8008734:	0800ab28 	.word	0x0800ab28
 8008738:	3ff00000 	.word	0x3ff00000
 800873c:	40240000 	.word	0x40240000
 8008740:	401c0000 	.word	0x401c0000
 8008744:	40140000 	.word	0x40140000
 8008748:	4b70      	ldr	r3, [pc, #448]	@ (800890c <_dtoa_r+0x6fc>)
 800874a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800874c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008750:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008754:	4454      	add	r4, sl
 8008756:	2900      	cmp	r1, #0
 8008758:	d045      	beq.n	80087e6 <_dtoa_r+0x5d6>
 800875a:	2000      	movs	r0, #0
 800875c:	496c      	ldr	r1, [pc, #432]	@ (8008910 <_dtoa_r+0x700>)
 800875e:	f7f7 fffd 	bl	800075c <__aeabi_ddiv>
 8008762:	4633      	mov	r3, r6
 8008764:	462a      	mov	r2, r5
 8008766:	f7f7 fd17 	bl	8000198 <__aeabi_dsub>
 800876a:	4656      	mov	r6, sl
 800876c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008774:	f7f8 f978 	bl	8000a68 <__aeabi_d2iz>
 8008778:	4605      	mov	r5, r0
 800877a:	f7f7 fe5b 	bl	8000434 <__aeabi_i2d>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008786:	f7f7 fd07 	bl	8000198 <__aeabi_dsub>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	3530      	adds	r5, #48	@ 0x30
 8008790:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008798:	f806 5b01 	strb.w	r5, [r6], #1
 800879c:	f7f8 f926 	bl	80009ec <__aeabi_dcmplt>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d163      	bne.n	800886c <_dtoa_r+0x65c>
 80087a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087a8:	2000      	movs	r0, #0
 80087aa:	495a      	ldr	r1, [pc, #360]	@ (8008914 <_dtoa_r+0x704>)
 80087ac:	f7f7 fcf4 	bl	8000198 <__aeabi_dsub>
 80087b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087b4:	f7f8 f91a 	bl	80009ec <__aeabi_dcmplt>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f040 8087 	bne.w	80088cc <_dtoa_r+0x6bc>
 80087be:	42a6      	cmp	r6, r4
 80087c0:	f43f af43 	beq.w	800864a <_dtoa_r+0x43a>
 80087c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087c8:	2200      	movs	r2, #0
 80087ca:	4b53      	ldr	r3, [pc, #332]	@ (8008918 <_dtoa_r+0x708>)
 80087cc:	f7f7 fe9c 	bl	8000508 <__aeabi_dmul>
 80087d0:	2200      	movs	r2, #0
 80087d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087da:	4b4f      	ldr	r3, [pc, #316]	@ (8008918 <_dtoa_r+0x708>)
 80087dc:	f7f7 fe94 	bl	8000508 <__aeabi_dmul>
 80087e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087e4:	e7c4      	b.n	8008770 <_dtoa_r+0x560>
 80087e6:	4631      	mov	r1, r6
 80087e8:	4628      	mov	r0, r5
 80087ea:	f7f7 fe8d 	bl	8000508 <__aeabi_dmul>
 80087ee:	4656      	mov	r6, sl
 80087f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087f4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80087f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087fa:	f7f8 f935 	bl	8000a68 <__aeabi_d2iz>
 80087fe:	4605      	mov	r5, r0
 8008800:	f7f7 fe18 	bl	8000434 <__aeabi_i2d>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800880c:	f7f7 fcc4 	bl	8000198 <__aeabi_dsub>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	3530      	adds	r5, #48	@ 0x30
 8008816:	f806 5b01 	strb.w	r5, [r6], #1
 800881a:	42a6      	cmp	r6, r4
 800881c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008820:	f04f 0200 	mov.w	r2, #0
 8008824:	d124      	bne.n	8008870 <_dtoa_r+0x660>
 8008826:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800882a:	4b39      	ldr	r3, [pc, #228]	@ (8008910 <_dtoa_r+0x700>)
 800882c:	f7f7 fcb6 	bl	800019c <__adddf3>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008838:	f7f8 f8f6 	bl	8000a28 <__aeabi_dcmpgt>
 800883c:	2800      	cmp	r0, #0
 800883e:	d145      	bne.n	80088cc <_dtoa_r+0x6bc>
 8008840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008844:	2000      	movs	r0, #0
 8008846:	4932      	ldr	r1, [pc, #200]	@ (8008910 <_dtoa_r+0x700>)
 8008848:	f7f7 fca6 	bl	8000198 <__aeabi_dsub>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008854:	f7f8 f8ca 	bl	80009ec <__aeabi_dcmplt>
 8008858:	2800      	cmp	r0, #0
 800885a:	f43f aef6 	beq.w	800864a <_dtoa_r+0x43a>
 800885e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008860:	1e73      	subs	r3, r6, #1
 8008862:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008864:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008868:	2b30      	cmp	r3, #48	@ 0x30
 800886a:	d0f8      	beq.n	800885e <_dtoa_r+0x64e>
 800886c:	9f04      	ldr	r7, [sp, #16]
 800886e:	e73f      	b.n	80086f0 <_dtoa_r+0x4e0>
 8008870:	4b29      	ldr	r3, [pc, #164]	@ (8008918 <_dtoa_r+0x708>)
 8008872:	f7f7 fe49 	bl	8000508 <__aeabi_dmul>
 8008876:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800887a:	e7bc      	b.n	80087f6 <_dtoa_r+0x5e6>
 800887c:	d10c      	bne.n	8008898 <_dtoa_r+0x688>
 800887e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008882:	2200      	movs	r2, #0
 8008884:	4b25      	ldr	r3, [pc, #148]	@ (800891c <_dtoa_r+0x70c>)
 8008886:	f7f7 fe3f 	bl	8000508 <__aeabi_dmul>
 800888a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800888e:	f7f8 f8c1 	bl	8000a14 <__aeabi_dcmpge>
 8008892:	2800      	cmp	r0, #0
 8008894:	f000 815b 	beq.w	8008b4e <_dtoa_r+0x93e>
 8008898:	2400      	movs	r4, #0
 800889a:	4625      	mov	r5, r4
 800889c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800889e:	4656      	mov	r6, sl
 80088a0:	43db      	mvns	r3, r3
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	2700      	movs	r7, #0
 80088a6:	4621      	mov	r1, r4
 80088a8:	4658      	mov	r0, fp
 80088aa:	f000 fb01 	bl	8008eb0 <_Bfree>
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	d0dc      	beq.n	800886c <_dtoa_r+0x65c>
 80088b2:	b12f      	cbz	r7, 80088c0 <_dtoa_r+0x6b0>
 80088b4:	42af      	cmp	r7, r5
 80088b6:	d003      	beq.n	80088c0 <_dtoa_r+0x6b0>
 80088b8:	4639      	mov	r1, r7
 80088ba:	4658      	mov	r0, fp
 80088bc:	f000 faf8 	bl	8008eb0 <_Bfree>
 80088c0:	4629      	mov	r1, r5
 80088c2:	4658      	mov	r0, fp
 80088c4:	f000 faf4 	bl	8008eb0 <_Bfree>
 80088c8:	e7d0      	b.n	800886c <_dtoa_r+0x65c>
 80088ca:	9704      	str	r7, [sp, #16]
 80088cc:	4633      	mov	r3, r6
 80088ce:	461e      	mov	r6, r3
 80088d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088d4:	2a39      	cmp	r2, #57	@ 0x39
 80088d6:	d107      	bne.n	80088e8 <_dtoa_r+0x6d8>
 80088d8:	459a      	cmp	sl, r3
 80088da:	d1f8      	bne.n	80088ce <_dtoa_r+0x6be>
 80088dc:	9a04      	ldr	r2, [sp, #16]
 80088de:	3201      	adds	r2, #1
 80088e0:	9204      	str	r2, [sp, #16]
 80088e2:	2230      	movs	r2, #48	@ 0x30
 80088e4:	f88a 2000 	strb.w	r2, [sl]
 80088e8:	781a      	ldrb	r2, [r3, #0]
 80088ea:	3201      	adds	r2, #1
 80088ec:	701a      	strb	r2, [r3, #0]
 80088ee:	e7bd      	b.n	800886c <_dtoa_r+0x65c>
 80088f0:	2200      	movs	r2, #0
 80088f2:	4b09      	ldr	r3, [pc, #36]	@ (8008918 <_dtoa_r+0x708>)
 80088f4:	f7f7 fe08 	bl	8000508 <__aeabi_dmul>
 80088f8:	2200      	movs	r2, #0
 80088fa:	2300      	movs	r3, #0
 80088fc:	4604      	mov	r4, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	f7f8 f86a 	bl	80009d8 <__aeabi_dcmpeq>
 8008904:	2800      	cmp	r0, #0
 8008906:	f43f aebc 	beq.w	8008682 <_dtoa_r+0x472>
 800890a:	e6f1      	b.n	80086f0 <_dtoa_r+0x4e0>
 800890c:	0800ab50 	.word	0x0800ab50
 8008910:	3fe00000 	.word	0x3fe00000
 8008914:	3ff00000 	.word	0x3ff00000
 8008918:	40240000 	.word	0x40240000
 800891c:	40140000 	.word	0x40140000
 8008920:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008922:	2a00      	cmp	r2, #0
 8008924:	f000 80db 	beq.w	8008ade <_dtoa_r+0x8ce>
 8008928:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800892a:	2a01      	cmp	r2, #1
 800892c:	f300 80bf 	bgt.w	8008aae <_dtoa_r+0x89e>
 8008930:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008932:	2a00      	cmp	r2, #0
 8008934:	f000 80b7 	beq.w	8008aa6 <_dtoa_r+0x896>
 8008938:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800893c:	4646      	mov	r6, r8
 800893e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008940:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008942:	2101      	movs	r1, #1
 8008944:	441a      	add	r2, r3
 8008946:	4658      	mov	r0, fp
 8008948:	4498      	add	r8, r3
 800894a:	9209      	str	r2, [sp, #36]	@ 0x24
 800894c:	f000 fb64 	bl	8009018 <__i2b>
 8008950:	4605      	mov	r5, r0
 8008952:	b15e      	cbz	r6, 800896c <_dtoa_r+0x75c>
 8008954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008956:	2b00      	cmp	r3, #0
 8008958:	dd08      	ble.n	800896c <_dtoa_r+0x75c>
 800895a:	42b3      	cmp	r3, r6
 800895c:	bfa8      	it	ge
 800895e:	4633      	movge	r3, r6
 8008960:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008962:	eba8 0803 	sub.w	r8, r8, r3
 8008966:	1af6      	subs	r6, r6, r3
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	9309      	str	r3, [sp, #36]	@ 0x24
 800896c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800896e:	b1f3      	cbz	r3, 80089ae <_dtoa_r+0x79e>
 8008970:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80b7 	beq.w	8008ae6 <_dtoa_r+0x8d6>
 8008978:	b18c      	cbz	r4, 800899e <_dtoa_r+0x78e>
 800897a:	4629      	mov	r1, r5
 800897c:	4622      	mov	r2, r4
 800897e:	4658      	mov	r0, fp
 8008980:	f000 fc08 	bl	8009194 <__pow5mult>
 8008984:	464a      	mov	r2, r9
 8008986:	4601      	mov	r1, r0
 8008988:	4605      	mov	r5, r0
 800898a:	4658      	mov	r0, fp
 800898c:	f000 fb5a 	bl	8009044 <__multiply>
 8008990:	4649      	mov	r1, r9
 8008992:	9004      	str	r0, [sp, #16]
 8008994:	4658      	mov	r0, fp
 8008996:	f000 fa8b 	bl	8008eb0 <_Bfree>
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	4699      	mov	r9, r3
 800899e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089a0:	1b1a      	subs	r2, r3, r4
 80089a2:	d004      	beq.n	80089ae <_dtoa_r+0x79e>
 80089a4:	4649      	mov	r1, r9
 80089a6:	4658      	mov	r0, fp
 80089a8:	f000 fbf4 	bl	8009194 <__pow5mult>
 80089ac:	4681      	mov	r9, r0
 80089ae:	2101      	movs	r1, #1
 80089b0:	4658      	mov	r0, fp
 80089b2:	f000 fb31 	bl	8009018 <__i2b>
 80089b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089b8:	4604      	mov	r4, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 81c9 	beq.w	8008d52 <_dtoa_r+0xb42>
 80089c0:	461a      	mov	r2, r3
 80089c2:	4601      	mov	r1, r0
 80089c4:	4658      	mov	r0, fp
 80089c6:	f000 fbe5 	bl	8009194 <__pow5mult>
 80089ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089cc:	4604      	mov	r4, r0
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	f300 808f 	bgt.w	8008af2 <_dtoa_r+0x8e2>
 80089d4:	9b02      	ldr	r3, [sp, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f040 8087 	bne.w	8008aea <_dtoa_r+0x8da>
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 8083 	bne.w	8008aee <_dtoa_r+0x8de>
 80089e8:	9b03      	ldr	r3, [sp, #12]
 80089ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089ee:	0d1b      	lsrs	r3, r3, #20
 80089f0:	051b      	lsls	r3, r3, #20
 80089f2:	b12b      	cbz	r3, 8008a00 <_dtoa_r+0x7f0>
 80089f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f6:	f108 0801 	add.w	r8, r8, #1
 80089fa:	3301      	adds	r3, #1
 80089fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089fe:	2301      	movs	r3, #1
 8008a00:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 81aa 	beq.w	8008d5e <_dtoa_r+0xb4e>
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a10:	6918      	ldr	r0, [r3, #16]
 8008a12:	f000 fab5 	bl	8008f80 <__hi0bits>
 8008a16:	f1c0 0020 	rsb	r0, r0, #32
 8008a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a1c:	4418      	add	r0, r3
 8008a1e:	f010 001f 	ands.w	r0, r0, #31
 8008a22:	d071      	beq.n	8008b08 <_dtoa_r+0x8f8>
 8008a24:	f1c0 0320 	rsb	r3, r0, #32
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	dd65      	ble.n	8008af8 <_dtoa_r+0x8e8>
 8008a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a2e:	f1c0 001c 	rsb	r0, r0, #28
 8008a32:	4403      	add	r3, r0
 8008a34:	4480      	add	r8, r0
 8008a36:	4406      	add	r6, r0
 8008a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a3a:	f1b8 0f00 	cmp.w	r8, #0
 8008a3e:	dd05      	ble.n	8008a4c <_dtoa_r+0x83c>
 8008a40:	4649      	mov	r1, r9
 8008a42:	4642      	mov	r2, r8
 8008a44:	4658      	mov	r0, fp
 8008a46:	f000 fbff 	bl	8009248 <__lshift>
 8008a4a:	4681      	mov	r9, r0
 8008a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	dd05      	ble.n	8008a5e <_dtoa_r+0x84e>
 8008a52:	4621      	mov	r1, r4
 8008a54:	461a      	mov	r2, r3
 8008a56:	4658      	mov	r0, fp
 8008a58:	f000 fbf6 	bl	8009248 <__lshift>
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d053      	beq.n	8008b0c <_dtoa_r+0x8fc>
 8008a64:	4621      	mov	r1, r4
 8008a66:	4648      	mov	r0, r9
 8008a68:	f000 fc5a 	bl	8009320 <__mcmp>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	da4d      	bge.n	8008b0c <_dtoa_r+0x8fc>
 8008a70:	1e7b      	subs	r3, r7, #1
 8008a72:	4649      	mov	r1, r9
 8008a74:	9304      	str	r3, [sp, #16]
 8008a76:	220a      	movs	r2, #10
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4658      	mov	r0, fp
 8008a7c:	f000 fa3a 	bl	8008ef4 <__multadd>
 8008a80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a82:	4681      	mov	r9, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 816c 	beq.w	8008d62 <_dtoa_r+0xb52>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	220a      	movs	r2, #10
 8008a90:	4658      	mov	r0, fp
 8008a92:	f000 fa2f 	bl	8008ef4 <__multadd>
 8008a96:	9b08      	ldr	r3, [sp, #32]
 8008a98:	4605      	mov	r5, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dc61      	bgt.n	8008b62 <_dtoa_r+0x952>
 8008a9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	dc3b      	bgt.n	8008b1c <_dtoa_r+0x90c>
 8008aa4:	e05d      	b.n	8008b62 <_dtoa_r+0x952>
 8008aa6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008aa8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008aac:	e746      	b.n	800893c <_dtoa_r+0x72c>
 8008aae:	9b07      	ldr	r3, [sp, #28]
 8008ab0:	1e5c      	subs	r4, r3, #1
 8008ab2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ab4:	42a3      	cmp	r3, r4
 8008ab6:	bfbf      	itttt	lt
 8008ab8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008aba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008abc:	1ae3      	sublt	r3, r4, r3
 8008abe:	18d2      	addlt	r2, r2, r3
 8008ac0:	bfa8      	it	ge
 8008ac2:	1b1c      	subge	r4, r3, r4
 8008ac4:	9b07      	ldr	r3, [sp, #28]
 8008ac6:	bfbe      	ittt	lt
 8008ac8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008aca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008acc:	2400      	movlt	r4, #0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bfb5      	itete	lt
 8008ad2:	eba8 0603 	sublt.w	r6, r8, r3
 8008ad6:	4646      	movge	r6, r8
 8008ad8:	2300      	movlt	r3, #0
 8008ada:	9b07      	ldrge	r3, [sp, #28]
 8008adc:	e730      	b.n	8008940 <_dtoa_r+0x730>
 8008ade:	4646      	mov	r6, r8
 8008ae0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ae2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ae4:	e735      	b.n	8008952 <_dtoa_r+0x742>
 8008ae6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ae8:	e75c      	b.n	80089a4 <_dtoa_r+0x794>
 8008aea:	2300      	movs	r3, #0
 8008aec:	e788      	b.n	8008a00 <_dtoa_r+0x7f0>
 8008aee:	9b02      	ldr	r3, [sp, #8]
 8008af0:	e786      	b.n	8008a00 <_dtoa_r+0x7f0>
 8008af2:	2300      	movs	r3, #0
 8008af4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008af6:	e788      	b.n	8008a0a <_dtoa_r+0x7fa>
 8008af8:	d09f      	beq.n	8008a3a <_dtoa_r+0x82a>
 8008afa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008afc:	331c      	adds	r3, #28
 8008afe:	441a      	add	r2, r3
 8008b00:	4498      	add	r8, r3
 8008b02:	441e      	add	r6, r3
 8008b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b06:	e798      	b.n	8008a3a <_dtoa_r+0x82a>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	e7f6      	b.n	8008afa <_dtoa_r+0x8ea>
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	9704      	str	r7, [sp, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dc20      	bgt.n	8008b56 <_dtoa_r+0x946>
 8008b14:	9308      	str	r3, [sp, #32]
 8008b16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	dd1e      	ble.n	8008b5a <_dtoa_r+0x94a>
 8008b1c:	9b08      	ldr	r3, [sp, #32]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f47f aebc 	bne.w	800889c <_dtoa_r+0x68c>
 8008b24:	4621      	mov	r1, r4
 8008b26:	2205      	movs	r2, #5
 8008b28:	4658      	mov	r0, fp
 8008b2a:	f000 f9e3 	bl	8008ef4 <__multadd>
 8008b2e:	4601      	mov	r1, r0
 8008b30:	4604      	mov	r4, r0
 8008b32:	4648      	mov	r0, r9
 8008b34:	f000 fbf4 	bl	8009320 <__mcmp>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	f77f aeaf 	ble.w	800889c <_dtoa_r+0x68c>
 8008b3e:	2331      	movs	r3, #49	@ 0x31
 8008b40:	4656      	mov	r6, sl
 8008b42:	f806 3b01 	strb.w	r3, [r6], #1
 8008b46:	9b04      	ldr	r3, [sp, #16]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	9304      	str	r3, [sp, #16]
 8008b4c:	e6aa      	b.n	80088a4 <_dtoa_r+0x694>
 8008b4e:	9c07      	ldr	r4, [sp, #28]
 8008b50:	9704      	str	r7, [sp, #16]
 8008b52:	4625      	mov	r5, r4
 8008b54:	e7f3      	b.n	8008b3e <_dtoa_r+0x92e>
 8008b56:	9b07      	ldr	r3, [sp, #28]
 8008b58:	9308      	str	r3, [sp, #32]
 8008b5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8104 	beq.w	8008d6a <_dtoa_r+0xb5a>
 8008b62:	2e00      	cmp	r6, #0
 8008b64:	dd05      	ble.n	8008b72 <_dtoa_r+0x962>
 8008b66:	4629      	mov	r1, r5
 8008b68:	4632      	mov	r2, r6
 8008b6a:	4658      	mov	r0, fp
 8008b6c:	f000 fb6c 	bl	8009248 <__lshift>
 8008b70:	4605      	mov	r5, r0
 8008b72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d05a      	beq.n	8008c2e <_dtoa_r+0xa1e>
 8008b78:	4658      	mov	r0, fp
 8008b7a:	6869      	ldr	r1, [r5, #4]
 8008b7c:	f000 f958 	bl	8008e30 <_Balloc>
 8008b80:	4606      	mov	r6, r0
 8008b82:	b928      	cbnz	r0, 8008b90 <_dtoa_r+0x980>
 8008b84:	4602      	mov	r2, r0
 8008b86:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b8a:	4b83      	ldr	r3, [pc, #524]	@ (8008d98 <_dtoa_r+0xb88>)
 8008b8c:	f7ff bb54 	b.w	8008238 <_dtoa_r+0x28>
 8008b90:	692a      	ldr	r2, [r5, #16]
 8008b92:	f105 010c 	add.w	r1, r5, #12
 8008b96:	3202      	adds	r2, #2
 8008b98:	0092      	lsls	r2, r2, #2
 8008b9a:	300c      	adds	r0, #12
 8008b9c:	f001 f8a6 	bl	8009cec <memcpy>
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4658      	mov	r0, fp
 8008ba6:	f000 fb4f 	bl	8009248 <__lshift>
 8008baa:	462f      	mov	r7, r5
 8008bac:	4605      	mov	r5, r0
 8008bae:	f10a 0301 	add.w	r3, sl, #1
 8008bb2:	9307      	str	r3, [sp, #28]
 8008bb4:	9b08      	ldr	r3, [sp, #32]
 8008bb6:	4453      	add	r3, sl
 8008bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bba:	9b02      	ldr	r3, [sp, #8]
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bc2:	9b07      	ldr	r3, [sp, #28]
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	4648      	mov	r0, r9
 8008bca:	9302      	str	r3, [sp, #8]
 8008bcc:	f7ff fa97 	bl	80080fe <quorem>
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	9008      	str	r0, [sp, #32]
 8008bd4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bd8:	4648      	mov	r0, r9
 8008bda:	f000 fba1 	bl	8009320 <__mcmp>
 8008bde:	462a      	mov	r2, r5
 8008be0:	9009      	str	r0, [sp, #36]	@ 0x24
 8008be2:	4621      	mov	r1, r4
 8008be4:	4658      	mov	r0, fp
 8008be6:	f000 fbb7 	bl	8009358 <__mdiff>
 8008bea:	68c2      	ldr	r2, [r0, #12]
 8008bec:	4606      	mov	r6, r0
 8008bee:	bb02      	cbnz	r2, 8008c32 <_dtoa_r+0xa22>
 8008bf0:	4601      	mov	r1, r0
 8008bf2:	4648      	mov	r0, r9
 8008bf4:	f000 fb94 	bl	8009320 <__mcmp>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4658      	mov	r0, fp
 8008bfe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c00:	f000 f956 	bl	8008eb0 <_Bfree>
 8008c04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c08:	9e07      	ldr	r6, [sp, #28]
 8008c0a:	ea43 0102 	orr.w	r1, r3, r2
 8008c0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c10:	4319      	orrs	r1, r3
 8008c12:	d110      	bne.n	8008c36 <_dtoa_r+0xa26>
 8008c14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c18:	d029      	beq.n	8008c6e <_dtoa_r+0xa5e>
 8008c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	dd02      	ble.n	8008c26 <_dtoa_r+0xa16>
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c26:	9b02      	ldr	r3, [sp, #8]
 8008c28:	f883 8000 	strb.w	r8, [r3]
 8008c2c:	e63b      	b.n	80088a6 <_dtoa_r+0x696>
 8008c2e:	4628      	mov	r0, r5
 8008c30:	e7bb      	b.n	8008baa <_dtoa_r+0x99a>
 8008c32:	2201      	movs	r2, #1
 8008c34:	e7e1      	b.n	8008bfa <_dtoa_r+0x9ea>
 8008c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	db04      	blt.n	8008c46 <_dtoa_r+0xa36>
 8008c3c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008c3e:	430b      	orrs	r3, r1
 8008c40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c42:	430b      	orrs	r3, r1
 8008c44:	d120      	bne.n	8008c88 <_dtoa_r+0xa78>
 8008c46:	2a00      	cmp	r2, #0
 8008c48:	dded      	ble.n	8008c26 <_dtoa_r+0xa16>
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	4658      	mov	r0, fp
 8008c50:	f000 fafa 	bl	8009248 <__lshift>
 8008c54:	4621      	mov	r1, r4
 8008c56:	4681      	mov	r9, r0
 8008c58:	f000 fb62 	bl	8009320 <__mcmp>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	dc03      	bgt.n	8008c68 <_dtoa_r+0xa58>
 8008c60:	d1e1      	bne.n	8008c26 <_dtoa_r+0xa16>
 8008c62:	f018 0f01 	tst.w	r8, #1
 8008c66:	d0de      	beq.n	8008c26 <_dtoa_r+0xa16>
 8008c68:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c6c:	d1d8      	bne.n	8008c20 <_dtoa_r+0xa10>
 8008c6e:	2339      	movs	r3, #57	@ 0x39
 8008c70:	9a02      	ldr	r2, [sp, #8]
 8008c72:	7013      	strb	r3, [r2, #0]
 8008c74:	4633      	mov	r3, r6
 8008c76:	461e      	mov	r6, r3
 8008c78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	2a39      	cmp	r2, #57	@ 0x39
 8008c80:	d052      	beq.n	8008d28 <_dtoa_r+0xb18>
 8008c82:	3201      	adds	r2, #1
 8008c84:	701a      	strb	r2, [r3, #0]
 8008c86:	e60e      	b.n	80088a6 <_dtoa_r+0x696>
 8008c88:	2a00      	cmp	r2, #0
 8008c8a:	dd07      	ble.n	8008c9c <_dtoa_r+0xa8c>
 8008c8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c90:	d0ed      	beq.n	8008c6e <_dtoa_r+0xa5e>
 8008c92:	9a02      	ldr	r2, [sp, #8]
 8008c94:	f108 0301 	add.w	r3, r8, #1
 8008c98:	7013      	strb	r3, [r2, #0]
 8008c9a:	e604      	b.n	80088a6 <_dtoa_r+0x696>
 8008c9c:	9b07      	ldr	r3, [sp, #28]
 8008c9e:	9a07      	ldr	r2, [sp, #28]
 8008ca0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ca4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d028      	beq.n	8008cfc <_dtoa_r+0xaec>
 8008caa:	4649      	mov	r1, r9
 8008cac:	2300      	movs	r3, #0
 8008cae:	220a      	movs	r2, #10
 8008cb0:	4658      	mov	r0, fp
 8008cb2:	f000 f91f 	bl	8008ef4 <__multadd>
 8008cb6:	42af      	cmp	r7, r5
 8008cb8:	4681      	mov	r9, r0
 8008cba:	f04f 0300 	mov.w	r3, #0
 8008cbe:	f04f 020a 	mov.w	r2, #10
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	4658      	mov	r0, fp
 8008cc6:	d107      	bne.n	8008cd8 <_dtoa_r+0xac8>
 8008cc8:	f000 f914 	bl	8008ef4 <__multadd>
 8008ccc:	4607      	mov	r7, r0
 8008cce:	4605      	mov	r5, r0
 8008cd0:	9b07      	ldr	r3, [sp, #28]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	9307      	str	r3, [sp, #28]
 8008cd6:	e774      	b.n	8008bc2 <_dtoa_r+0x9b2>
 8008cd8:	f000 f90c 	bl	8008ef4 <__multadd>
 8008cdc:	4629      	mov	r1, r5
 8008cde:	4607      	mov	r7, r0
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	220a      	movs	r2, #10
 8008ce4:	4658      	mov	r0, fp
 8008ce6:	f000 f905 	bl	8008ef4 <__multadd>
 8008cea:	4605      	mov	r5, r0
 8008cec:	e7f0      	b.n	8008cd0 <_dtoa_r+0xac0>
 8008cee:	9b08      	ldr	r3, [sp, #32]
 8008cf0:	2700      	movs	r7, #0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfcc      	ite	gt
 8008cf6:	461e      	movgt	r6, r3
 8008cf8:	2601      	movle	r6, #1
 8008cfa:	4456      	add	r6, sl
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4658      	mov	r0, fp
 8008d02:	f000 faa1 	bl	8009248 <__lshift>
 8008d06:	4621      	mov	r1, r4
 8008d08:	4681      	mov	r9, r0
 8008d0a:	f000 fb09 	bl	8009320 <__mcmp>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	dcb0      	bgt.n	8008c74 <_dtoa_r+0xa64>
 8008d12:	d102      	bne.n	8008d1a <_dtoa_r+0xb0a>
 8008d14:	f018 0f01 	tst.w	r8, #1
 8008d18:	d1ac      	bne.n	8008c74 <_dtoa_r+0xa64>
 8008d1a:	4633      	mov	r3, r6
 8008d1c:	461e      	mov	r6, r3
 8008d1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d22:	2a30      	cmp	r2, #48	@ 0x30
 8008d24:	d0fa      	beq.n	8008d1c <_dtoa_r+0xb0c>
 8008d26:	e5be      	b.n	80088a6 <_dtoa_r+0x696>
 8008d28:	459a      	cmp	sl, r3
 8008d2a:	d1a4      	bne.n	8008c76 <_dtoa_r+0xa66>
 8008d2c:	9b04      	ldr	r3, [sp, #16]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	9304      	str	r3, [sp, #16]
 8008d32:	2331      	movs	r3, #49	@ 0x31
 8008d34:	f88a 3000 	strb.w	r3, [sl]
 8008d38:	e5b5      	b.n	80088a6 <_dtoa_r+0x696>
 8008d3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d3c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d9c <_dtoa_r+0xb8c>
 8008d40:	b11b      	cbz	r3, 8008d4a <_dtoa_r+0xb3a>
 8008d42:	f10a 0308 	add.w	r3, sl, #8
 8008d46:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	4650      	mov	r0, sl
 8008d4c:	b017      	add	sp, #92	@ 0x5c
 8008d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	f77f ae3d 	ble.w	80089d4 <_dtoa_r+0x7c4>
 8008d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d5e:	2001      	movs	r0, #1
 8008d60:	e65b      	b.n	8008a1a <_dtoa_r+0x80a>
 8008d62:	9b08      	ldr	r3, [sp, #32]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f77f aed6 	ble.w	8008b16 <_dtoa_r+0x906>
 8008d6a:	4656      	mov	r6, sl
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4648      	mov	r0, r9
 8008d70:	f7ff f9c5 	bl	80080fe <quorem>
 8008d74:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d78:	9b08      	ldr	r3, [sp, #32]
 8008d7a:	f806 8b01 	strb.w	r8, [r6], #1
 8008d7e:	eba6 020a 	sub.w	r2, r6, sl
 8008d82:	4293      	cmp	r3, r2
 8008d84:	ddb3      	ble.n	8008cee <_dtoa_r+0xade>
 8008d86:	4649      	mov	r1, r9
 8008d88:	2300      	movs	r3, #0
 8008d8a:	220a      	movs	r2, #10
 8008d8c:	4658      	mov	r0, fp
 8008d8e:	f000 f8b1 	bl	8008ef4 <__multadd>
 8008d92:	4681      	mov	r9, r0
 8008d94:	e7ea      	b.n	8008d6c <_dtoa_r+0xb5c>
 8008d96:	bf00      	nop
 8008d98:	0800aaac 	.word	0x0800aaac
 8008d9c:	0800aa30 	.word	0x0800aa30

08008da0 <_free_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4605      	mov	r5, r0
 8008da4:	2900      	cmp	r1, #0
 8008da6:	d040      	beq.n	8008e2a <_free_r+0x8a>
 8008da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dac:	1f0c      	subs	r4, r1, #4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	bfb8      	it	lt
 8008db2:	18e4      	addlt	r4, r4, r3
 8008db4:	f7fe fa60 	bl	8007278 <__malloc_lock>
 8008db8:	4a1c      	ldr	r2, [pc, #112]	@ (8008e2c <_free_r+0x8c>)
 8008dba:	6813      	ldr	r3, [r2, #0]
 8008dbc:	b933      	cbnz	r3, 8008dcc <_free_r+0x2c>
 8008dbe:	6063      	str	r3, [r4, #4]
 8008dc0:	6014      	str	r4, [r2, #0]
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dc8:	f7fe ba5c 	b.w	8007284 <__malloc_unlock>
 8008dcc:	42a3      	cmp	r3, r4
 8008dce:	d908      	bls.n	8008de2 <_free_r+0x42>
 8008dd0:	6820      	ldr	r0, [r4, #0]
 8008dd2:	1821      	adds	r1, r4, r0
 8008dd4:	428b      	cmp	r3, r1
 8008dd6:	bf01      	itttt	eq
 8008dd8:	6819      	ldreq	r1, [r3, #0]
 8008dda:	685b      	ldreq	r3, [r3, #4]
 8008ddc:	1809      	addeq	r1, r1, r0
 8008dde:	6021      	streq	r1, [r4, #0]
 8008de0:	e7ed      	b.n	8008dbe <_free_r+0x1e>
 8008de2:	461a      	mov	r2, r3
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	b10b      	cbz	r3, 8008dec <_free_r+0x4c>
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	d9fa      	bls.n	8008de2 <_free_r+0x42>
 8008dec:	6811      	ldr	r1, [r2, #0]
 8008dee:	1850      	adds	r0, r2, r1
 8008df0:	42a0      	cmp	r0, r4
 8008df2:	d10b      	bne.n	8008e0c <_free_r+0x6c>
 8008df4:	6820      	ldr	r0, [r4, #0]
 8008df6:	4401      	add	r1, r0
 8008df8:	1850      	adds	r0, r2, r1
 8008dfa:	4283      	cmp	r3, r0
 8008dfc:	6011      	str	r1, [r2, #0]
 8008dfe:	d1e0      	bne.n	8008dc2 <_free_r+0x22>
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	4408      	add	r0, r1
 8008e06:	6010      	str	r0, [r2, #0]
 8008e08:	6053      	str	r3, [r2, #4]
 8008e0a:	e7da      	b.n	8008dc2 <_free_r+0x22>
 8008e0c:	d902      	bls.n	8008e14 <_free_r+0x74>
 8008e0e:	230c      	movs	r3, #12
 8008e10:	602b      	str	r3, [r5, #0]
 8008e12:	e7d6      	b.n	8008dc2 <_free_r+0x22>
 8008e14:	6820      	ldr	r0, [r4, #0]
 8008e16:	1821      	adds	r1, r4, r0
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf01      	itttt	eq
 8008e1c:	6819      	ldreq	r1, [r3, #0]
 8008e1e:	685b      	ldreq	r3, [r3, #4]
 8008e20:	1809      	addeq	r1, r1, r0
 8008e22:	6021      	streq	r1, [r4, #0]
 8008e24:	6063      	str	r3, [r4, #4]
 8008e26:	6054      	str	r4, [r2, #4]
 8008e28:	e7cb      	b.n	8008dc2 <_free_r+0x22>
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	20000800 	.word	0x20000800

08008e30 <_Balloc>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	69c6      	ldr	r6, [r0, #28]
 8008e34:	4604      	mov	r4, r0
 8008e36:	460d      	mov	r5, r1
 8008e38:	b976      	cbnz	r6, 8008e58 <_Balloc+0x28>
 8008e3a:	2010      	movs	r0, #16
 8008e3c:	f7fe f96a 	bl	8007114 <malloc>
 8008e40:	4602      	mov	r2, r0
 8008e42:	61e0      	str	r0, [r4, #28]
 8008e44:	b920      	cbnz	r0, 8008e50 <_Balloc+0x20>
 8008e46:	216b      	movs	r1, #107	@ 0x6b
 8008e48:	4b17      	ldr	r3, [pc, #92]	@ (8008ea8 <_Balloc+0x78>)
 8008e4a:	4818      	ldr	r0, [pc, #96]	@ (8008eac <_Balloc+0x7c>)
 8008e4c:	f000 ff5c 	bl	8009d08 <__assert_func>
 8008e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e54:	6006      	str	r6, [r0, #0]
 8008e56:	60c6      	str	r6, [r0, #12]
 8008e58:	69e6      	ldr	r6, [r4, #28]
 8008e5a:	68f3      	ldr	r3, [r6, #12]
 8008e5c:	b183      	cbz	r3, 8008e80 <_Balloc+0x50>
 8008e5e:	69e3      	ldr	r3, [r4, #28]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e66:	b9b8      	cbnz	r0, 8008e98 <_Balloc+0x68>
 8008e68:	2101      	movs	r1, #1
 8008e6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e6e:	1d72      	adds	r2, r6, #5
 8008e70:	4620      	mov	r0, r4
 8008e72:	0092      	lsls	r2, r2, #2
 8008e74:	f000 ff66 	bl	8009d44 <_calloc_r>
 8008e78:	b160      	cbz	r0, 8008e94 <_Balloc+0x64>
 8008e7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e7e:	e00e      	b.n	8008e9e <_Balloc+0x6e>
 8008e80:	2221      	movs	r2, #33	@ 0x21
 8008e82:	2104      	movs	r1, #4
 8008e84:	4620      	mov	r0, r4
 8008e86:	f000 ff5d 	bl	8009d44 <_calloc_r>
 8008e8a:	69e3      	ldr	r3, [r4, #28]
 8008e8c:	60f0      	str	r0, [r6, #12]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e4      	bne.n	8008e5e <_Balloc+0x2e>
 8008e94:	2000      	movs	r0, #0
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
 8008e98:	6802      	ldr	r2, [r0, #0]
 8008e9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ea4:	e7f7      	b.n	8008e96 <_Balloc+0x66>
 8008ea6:	bf00      	nop
 8008ea8:	0800aa3d 	.word	0x0800aa3d
 8008eac:	0800aabd 	.word	0x0800aabd

08008eb0 <_Bfree>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	69c6      	ldr	r6, [r0, #28]
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	b976      	cbnz	r6, 8008ed8 <_Bfree+0x28>
 8008eba:	2010      	movs	r0, #16
 8008ebc:	f7fe f92a 	bl	8007114 <malloc>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	61e8      	str	r0, [r5, #28]
 8008ec4:	b920      	cbnz	r0, 8008ed0 <_Bfree+0x20>
 8008ec6:	218f      	movs	r1, #143	@ 0x8f
 8008ec8:	4b08      	ldr	r3, [pc, #32]	@ (8008eec <_Bfree+0x3c>)
 8008eca:	4809      	ldr	r0, [pc, #36]	@ (8008ef0 <_Bfree+0x40>)
 8008ecc:	f000 ff1c 	bl	8009d08 <__assert_func>
 8008ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ed4:	6006      	str	r6, [r0, #0]
 8008ed6:	60c6      	str	r6, [r0, #12]
 8008ed8:	b13c      	cbz	r4, 8008eea <_Bfree+0x3a>
 8008eda:	69eb      	ldr	r3, [r5, #28]
 8008edc:	6862      	ldr	r2, [r4, #4]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ee4:	6021      	str	r1, [r4, #0]
 8008ee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	0800aa3d 	.word	0x0800aa3d
 8008ef0:	0800aabd 	.word	0x0800aabd

08008ef4 <__multadd>:
 8008ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	4607      	mov	r7, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	461e      	mov	r6, r3
 8008efe:	2000      	movs	r0, #0
 8008f00:	690d      	ldr	r5, [r1, #16]
 8008f02:	f101 0c14 	add.w	ip, r1, #20
 8008f06:	f8dc 3000 	ldr.w	r3, [ip]
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	b299      	uxth	r1, r3
 8008f0e:	fb02 6101 	mla	r1, r2, r1, r6
 8008f12:	0c1e      	lsrs	r6, r3, #16
 8008f14:	0c0b      	lsrs	r3, r1, #16
 8008f16:	fb02 3306 	mla	r3, r2, r6, r3
 8008f1a:	b289      	uxth	r1, r1
 8008f1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f20:	4285      	cmp	r5, r0
 8008f22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f26:	f84c 1b04 	str.w	r1, [ip], #4
 8008f2a:	dcec      	bgt.n	8008f06 <__multadd+0x12>
 8008f2c:	b30e      	cbz	r6, 8008f72 <__multadd+0x7e>
 8008f2e:	68a3      	ldr	r3, [r4, #8]
 8008f30:	42ab      	cmp	r3, r5
 8008f32:	dc19      	bgt.n	8008f68 <__multadd+0x74>
 8008f34:	6861      	ldr	r1, [r4, #4]
 8008f36:	4638      	mov	r0, r7
 8008f38:	3101      	adds	r1, #1
 8008f3a:	f7ff ff79 	bl	8008e30 <_Balloc>
 8008f3e:	4680      	mov	r8, r0
 8008f40:	b928      	cbnz	r0, 8008f4e <__multadd+0x5a>
 8008f42:	4602      	mov	r2, r0
 8008f44:	21ba      	movs	r1, #186	@ 0xba
 8008f46:	4b0c      	ldr	r3, [pc, #48]	@ (8008f78 <__multadd+0x84>)
 8008f48:	480c      	ldr	r0, [pc, #48]	@ (8008f7c <__multadd+0x88>)
 8008f4a:	f000 fedd 	bl	8009d08 <__assert_func>
 8008f4e:	6922      	ldr	r2, [r4, #16]
 8008f50:	f104 010c 	add.w	r1, r4, #12
 8008f54:	3202      	adds	r2, #2
 8008f56:	0092      	lsls	r2, r2, #2
 8008f58:	300c      	adds	r0, #12
 8008f5a:	f000 fec7 	bl	8009cec <memcpy>
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4638      	mov	r0, r7
 8008f62:	f7ff ffa5 	bl	8008eb0 <_Bfree>
 8008f66:	4644      	mov	r4, r8
 8008f68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f6c:	3501      	adds	r5, #1
 8008f6e:	615e      	str	r6, [r3, #20]
 8008f70:	6125      	str	r5, [r4, #16]
 8008f72:	4620      	mov	r0, r4
 8008f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f78:	0800aaac 	.word	0x0800aaac
 8008f7c:	0800aabd 	.word	0x0800aabd

08008f80 <__hi0bits>:
 8008f80:	4603      	mov	r3, r0
 8008f82:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f86:	bf3a      	itte	cc
 8008f88:	0403      	lslcc	r3, r0, #16
 8008f8a:	2010      	movcc	r0, #16
 8008f8c:	2000      	movcs	r0, #0
 8008f8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f92:	bf3c      	itt	cc
 8008f94:	021b      	lslcc	r3, r3, #8
 8008f96:	3008      	addcc	r0, #8
 8008f98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f9c:	bf3c      	itt	cc
 8008f9e:	011b      	lslcc	r3, r3, #4
 8008fa0:	3004      	addcc	r0, #4
 8008fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fa6:	bf3c      	itt	cc
 8008fa8:	009b      	lslcc	r3, r3, #2
 8008faa:	3002      	addcc	r0, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	db05      	blt.n	8008fbc <__hi0bits+0x3c>
 8008fb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008fb4:	f100 0001 	add.w	r0, r0, #1
 8008fb8:	bf08      	it	eq
 8008fba:	2020      	moveq	r0, #32
 8008fbc:	4770      	bx	lr

08008fbe <__lo0bits>:
 8008fbe:	6803      	ldr	r3, [r0, #0]
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	f013 0007 	ands.w	r0, r3, #7
 8008fc6:	d00b      	beq.n	8008fe0 <__lo0bits+0x22>
 8008fc8:	07d9      	lsls	r1, r3, #31
 8008fca:	d421      	bmi.n	8009010 <__lo0bits+0x52>
 8008fcc:	0798      	lsls	r0, r3, #30
 8008fce:	bf49      	itett	mi
 8008fd0:	085b      	lsrmi	r3, r3, #1
 8008fd2:	089b      	lsrpl	r3, r3, #2
 8008fd4:	2001      	movmi	r0, #1
 8008fd6:	6013      	strmi	r3, [r2, #0]
 8008fd8:	bf5c      	itt	pl
 8008fda:	2002      	movpl	r0, #2
 8008fdc:	6013      	strpl	r3, [r2, #0]
 8008fde:	4770      	bx	lr
 8008fe0:	b299      	uxth	r1, r3
 8008fe2:	b909      	cbnz	r1, 8008fe8 <__lo0bits+0x2a>
 8008fe4:	2010      	movs	r0, #16
 8008fe6:	0c1b      	lsrs	r3, r3, #16
 8008fe8:	b2d9      	uxtb	r1, r3
 8008fea:	b909      	cbnz	r1, 8008ff0 <__lo0bits+0x32>
 8008fec:	3008      	adds	r0, #8
 8008fee:	0a1b      	lsrs	r3, r3, #8
 8008ff0:	0719      	lsls	r1, r3, #28
 8008ff2:	bf04      	itt	eq
 8008ff4:	091b      	lsreq	r3, r3, #4
 8008ff6:	3004      	addeq	r0, #4
 8008ff8:	0799      	lsls	r1, r3, #30
 8008ffa:	bf04      	itt	eq
 8008ffc:	089b      	lsreq	r3, r3, #2
 8008ffe:	3002      	addeq	r0, #2
 8009000:	07d9      	lsls	r1, r3, #31
 8009002:	d403      	bmi.n	800900c <__lo0bits+0x4e>
 8009004:	085b      	lsrs	r3, r3, #1
 8009006:	f100 0001 	add.w	r0, r0, #1
 800900a:	d003      	beq.n	8009014 <__lo0bits+0x56>
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	4770      	bx	lr
 8009010:	2000      	movs	r0, #0
 8009012:	4770      	bx	lr
 8009014:	2020      	movs	r0, #32
 8009016:	4770      	bx	lr

08009018 <__i2b>:
 8009018:	b510      	push	{r4, lr}
 800901a:	460c      	mov	r4, r1
 800901c:	2101      	movs	r1, #1
 800901e:	f7ff ff07 	bl	8008e30 <_Balloc>
 8009022:	4602      	mov	r2, r0
 8009024:	b928      	cbnz	r0, 8009032 <__i2b+0x1a>
 8009026:	f240 1145 	movw	r1, #325	@ 0x145
 800902a:	4b04      	ldr	r3, [pc, #16]	@ (800903c <__i2b+0x24>)
 800902c:	4804      	ldr	r0, [pc, #16]	@ (8009040 <__i2b+0x28>)
 800902e:	f000 fe6b 	bl	8009d08 <__assert_func>
 8009032:	2301      	movs	r3, #1
 8009034:	6144      	str	r4, [r0, #20]
 8009036:	6103      	str	r3, [r0, #16]
 8009038:	bd10      	pop	{r4, pc}
 800903a:	bf00      	nop
 800903c:	0800aaac 	.word	0x0800aaac
 8009040:	0800aabd 	.word	0x0800aabd

08009044 <__multiply>:
 8009044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009048:	4614      	mov	r4, r2
 800904a:	690a      	ldr	r2, [r1, #16]
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	460f      	mov	r7, r1
 8009050:	429a      	cmp	r2, r3
 8009052:	bfa2      	ittt	ge
 8009054:	4623      	movge	r3, r4
 8009056:	460c      	movge	r4, r1
 8009058:	461f      	movge	r7, r3
 800905a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800905e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	6861      	ldr	r1, [r4, #4]
 8009066:	eb0a 0609 	add.w	r6, sl, r9
 800906a:	42b3      	cmp	r3, r6
 800906c:	b085      	sub	sp, #20
 800906e:	bfb8      	it	lt
 8009070:	3101      	addlt	r1, #1
 8009072:	f7ff fedd 	bl	8008e30 <_Balloc>
 8009076:	b930      	cbnz	r0, 8009086 <__multiply+0x42>
 8009078:	4602      	mov	r2, r0
 800907a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800907e:	4b43      	ldr	r3, [pc, #268]	@ (800918c <__multiply+0x148>)
 8009080:	4843      	ldr	r0, [pc, #268]	@ (8009190 <__multiply+0x14c>)
 8009082:	f000 fe41 	bl	8009d08 <__assert_func>
 8009086:	f100 0514 	add.w	r5, r0, #20
 800908a:	462b      	mov	r3, r5
 800908c:	2200      	movs	r2, #0
 800908e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009092:	4543      	cmp	r3, r8
 8009094:	d321      	bcc.n	80090da <__multiply+0x96>
 8009096:	f107 0114 	add.w	r1, r7, #20
 800909a:	f104 0214 	add.w	r2, r4, #20
 800909e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80090a2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80090a6:	9302      	str	r3, [sp, #8]
 80090a8:	1b13      	subs	r3, r2, r4
 80090aa:	3b15      	subs	r3, #21
 80090ac:	f023 0303 	bic.w	r3, r3, #3
 80090b0:	3304      	adds	r3, #4
 80090b2:	f104 0715 	add.w	r7, r4, #21
 80090b6:	42ba      	cmp	r2, r7
 80090b8:	bf38      	it	cc
 80090ba:	2304      	movcc	r3, #4
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	9b02      	ldr	r3, [sp, #8]
 80090c0:	9103      	str	r1, [sp, #12]
 80090c2:	428b      	cmp	r3, r1
 80090c4:	d80c      	bhi.n	80090e0 <__multiply+0x9c>
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	dd03      	ble.n	80090d2 <__multiply+0x8e>
 80090ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d05a      	beq.n	8009188 <__multiply+0x144>
 80090d2:	6106      	str	r6, [r0, #16]
 80090d4:	b005      	add	sp, #20
 80090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090da:	f843 2b04 	str.w	r2, [r3], #4
 80090de:	e7d8      	b.n	8009092 <__multiply+0x4e>
 80090e0:	f8b1 a000 	ldrh.w	sl, [r1]
 80090e4:	f1ba 0f00 	cmp.w	sl, #0
 80090e8:	d023      	beq.n	8009132 <__multiply+0xee>
 80090ea:	46a9      	mov	r9, r5
 80090ec:	f04f 0c00 	mov.w	ip, #0
 80090f0:	f104 0e14 	add.w	lr, r4, #20
 80090f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090f8:	f8d9 3000 	ldr.w	r3, [r9]
 80090fc:	fa1f fb87 	uxth.w	fp, r7
 8009100:	b29b      	uxth	r3, r3
 8009102:	fb0a 330b 	mla	r3, sl, fp, r3
 8009106:	4463      	add	r3, ip
 8009108:	f8d9 c000 	ldr.w	ip, [r9]
 800910c:	0c3f      	lsrs	r7, r7, #16
 800910e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009112:	fb0a c707 	mla	r7, sl, r7, ip
 8009116:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800911a:	b29b      	uxth	r3, r3
 800911c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009120:	4572      	cmp	r2, lr
 8009122:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009126:	f849 3b04 	str.w	r3, [r9], #4
 800912a:	d8e3      	bhi.n	80090f4 <__multiply+0xb0>
 800912c:	9b01      	ldr	r3, [sp, #4]
 800912e:	f845 c003 	str.w	ip, [r5, r3]
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	3104      	adds	r1, #4
 8009136:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800913a:	f1b9 0f00 	cmp.w	r9, #0
 800913e:	d021      	beq.n	8009184 <__multiply+0x140>
 8009140:	46ae      	mov	lr, r5
 8009142:	f04f 0a00 	mov.w	sl, #0
 8009146:	682b      	ldr	r3, [r5, #0]
 8009148:	f104 0c14 	add.w	ip, r4, #20
 800914c:	f8bc b000 	ldrh.w	fp, [ip]
 8009150:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009154:	b29b      	uxth	r3, r3
 8009156:	fb09 770b 	mla	r7, r9, fp, r7
 800915a:	4457      	add	r7, sl
 800915c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009160:	f84e 3b04 	str.w	r3, [lr], #4
 8009164:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800916c:	f8be 3000 	ldrh.w	r3, [lr]
 8009170:	4562      	cmp	r2, ip
 8009172:	fb09 330a 	mla	r3, r9, sl, r3
 8009176:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800917a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800917e:	d8e5      	bhi.n	800914c <__multiply+0x108>
 8009180:	9f01      	ldr	r7, [sp, #4]
 8009182:	51eb      	str	r3, [r5, r7]
 8009184:	3504      	adds	r5, #4
 8009186:	e79a      	b.n	80090be <__multiply+0x7a>
 8009188:	3e01      	subs	r6, #1
 800918a:	e79c      	b.n	80090c6 <__multiply+0x82>
 800918c:	0800aaac 	.word	0x0800aaac
 8009190:	0800aabd 	.word	0x0800aabd

08009194 <__pow5mult>:
 8009194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009198:	4615      	mov	r5, r2
 800919a:	f012 0203 	ands.w	r2, r2, #3
 800919e:	4607      	mov	r7, r0
 80091a0:	460e      	mov	r6, r1
 80091a2:	d007      	beq.n	80091b4 <__pow5mult+0x20>
 80091a4:	4c25      	ldr	r4, [pc, #148]	@ (800923c <__pow5mult+0xa8>)
 80091a6:	3a01      	subs	r2, #1
 80091a8:	2300      	movs	r3, #0
 80091aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091ae:	f7ff fea1 	bl	8008ef4 <__multadd>
 80091b2:	4606      	mov	r6, r0
 80091b4:	10ad      	asrs	r5, r5, #2
 80091b6:	d03d      	beq.n	8009234 <__pow5mult+0xa0>
 80091b8:	69fc      	ldr	r4, [r7, #28]
 80091ba:	b97c      	cbnz	r4, 80091dc <__pow5mult+0x48>
 80091bc:	2010      	movs	r0, #16
 80091be:	f7fd ffa9 	bl	8007114 <malloc>
 80091c2:	4602      	mov	r2, r0
 80091c4:	61f8      	str	r0, [r7, #28]
 80091c6:	b928      	cbnz	r0, 80091d4 <__pow5mult+0x40>
 80091c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80091cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009240 <__pow5mult+0xac>)
 80091ce:	481d      	ldr	r0, [pc, #116]	@ (8009244 <__pow5mult+0xb0>)
 80091d0:	f000 fd9a 	bl	8009d08 <__assert_func>
 80091d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091d8:	6004      	str	r4, [r0, #0]
 80091da:	60c4      	str	r4, [r0, #12]
 80091dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80091e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091e4:	b94c      	cbnz	r4, 80091fa <__pow5mult+0x66>
 80091e6:	f240 2171 	movw	r1, #625	@ 0x271
 80091ea:	4638      	mov	r0, r7
 80091ec:	f7ff ff14 	bl	8009018 <__i2b>
 80091f0:	2300      	movs	r3, #0
 80091f2:	4604      	mov	r4, r0
 80091f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80091f8:	6003      	str	r3, [r0, #0]
 80091fa:	f04f 0900 	mov.w	r9, #0
 80091fe:	07eb      	lsls	r3, r5, #31
 8009200:	d50a      	bpl.n	8009218 <__pow5mult+0x84>
 8009202:	4631      	mov	r1, r6
 8009204:	4622      	mov	r2, r4
 8009206:	4638      	mov	r0, r7
 8009208:	f7ff ff1c 	bl	8009044 <__multiply>
 800920c:	4680      	mov	r8, r0
 800920e:	4631      	mov	r1, r6
 8009210:	4638      	mov	r0, r7
 8009212:	f7ff fe4d 	bl	8008eb0 <_Bfree>
 8009216:	4646      	mov	r6, r8
 8009218:	106d      	asrs	r5, r5, #1
 800921a:	d00b      	beq.n	8009234 <__pow5mult+0xa0>
 800921c:	6820      	ldr	r0, [r4, #0]
 800921e:	b938      	cbnz	r0, 8009230 <__pow5mult+0x9c>
 8009220:	4622      	mov	r2, r4
 8009222:	4621      	mov	r1, r4
 8009224:	4638      	mov	r0, r7
 8009226:	f7ff ff0d 	bl	8009044 <__multiply>
 800922a:	6020      	str	r0, [r4, #0]
 800922c:	f8c0 9000 	str.w	r9, [r0]
 8009230:	4604      	mov	r4, r0
 8009232:	e7e4      	b.n	80091fe <__pow5mult+0x6a>
 8009234:	4630      	mov	r0, r6
 8009236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800923a:	bf00      	nop
 800923c:	0800ab18 	.word	0x0800ab18
 8009240:	0800aa3d 	.word	0x0800aa3d
 8009244:	0800aabd 	.word	0x0800aabd

08009248 <__lshift>:
 8009248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	460c      	mov	r4, r1
 800924e:	4607      	mov	r7, r0
 8009250:	4691      	mov	r9, r2
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	6849      	ldr	r1, [r1, #4]
 8009256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800925a:	68a3      	ldr	r3, [r4, #8]
 800925c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009260:	f108 0601 	add.w	r6, r8, #1
 8009264:	42b3      	cmp	r3, r6
 8009266:	db0b      	blt.n	8009280 <__lshift+0x38>
 8009268:	4638      	mov	r0, r7
 800926a:	f7ff fde1 	bl	8008e30 <_Balloc>
 800926e:	4605      	mov	r5, r0
 8009270:	b948      	cbnz	r0, 8009286 <__lshift+0x3e>
 8009272:	4602      	mov	r2, r0
 8009274:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009278:	4b27      	ldr	r3, [pc, #156]	@ (8009318 <__lshift+0xd0>)
 800927a:	4828      	ldr	r0, [pc, #160]	@ (800931c <__lshift+0xd4>)
 800927c:	f000 fd44 	bl	8009d08 <__assert_func>
 8009280:	3101      	adds	r1, #1
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	e7ee      	b.n	8009264 <__lshift+0x1c>
 8009286:	2300      	movs	r3, #0
 8009288:	f100 0114 	add.w	r1, r0, #20
 800928c:	f100 0210 	add.w	r2, r0, #16
 8009290:	4618      	mov	r0, r3
 8009292:	4553      	cmp	r3, sl
 8009294:	db33      	blt.n	80092fe <__lshift+0xb6>
 8009296:	6920      	ldr	r0, [r4, #16]
 8009298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800929c:	f104 0314 	add.w	r3, r4, #20
 80092a0:	f019 091f 	ands.w	r9, r9, #31
 80092a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092ac:	d02b      	beq.n	8009306 <__lshift+0xbe>
 80092ae:	468a      	mov	sl, r1
 80092b0:	2200      	movs	r2, #0
 80092b2:	f1c9 0e20 	rsb	lr, r9, #32
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	fa00 f009 	lsl.w	r0, r0, r9
 80092bc:	4310      	orrs	r0, r2
 80092be:	f84a 0b04 	str.w	r0, [sl], #4
 80092c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c6:	459c      	cmp	ip, r3
 80092c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80092cc:	d8f3      	bhi.n	80092b6 <__lshift+0x6e>
 80092ce:	ebac 0304 	sub.w	r3, ip, r4
 80092d2:	3b15      	subs	r3, #21
 80092d4:	f023 0303 	bic.w	r3, r3, #3
 80092d8:	3304      	adds	r3, #4
 80092da:	f104 0015 	add.w	r0, r4, #21
 80092de:	4584      	cmp	ip, r0
 80092e0:	bf38      	it	cc
 80092e2:	2304      	movcc	r3, #4
 80092e4:	50ca      	str	r2, [r1, r3]
 80092e6:	b10a      	cbz	r2, 80092ec <__lshift+0xa4>
 80092e8:	f108 0602 	add.w	r6, r8, #2
 80092ec:	3e01      	subs	r6, #1
 80092ee:	4638      	mov	r0, r7
 80092f0:	4621      	mov	r1, r4
 80092f2:	612e      	str	r6, [r5, #16]
 80092f4:	f7ff fddc 	bl	8008eb0 <_Bfree>
 80092f8:	4628      	mov	r0, r5
 80092fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009302:	3301      	adds	r3, #1
 8009304:	e7c5      	b.n	8009292 <__lshift+0x4a>
 8009306:	3904      	subs	r1, #4
 8009308:	f853 2b04 	ldr.w	r2, [r3], #4
 800930c:	459c      	cmp	ip, r3
 800930e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009312:	d8f9      	bhi.n	8009308 <__lshift+0xc0>
 8009314:	e7ea      	b.n	80092ec <__lshift+0xa4>
 8009316:	bf00      	nop
 8009318:	0800aaac 	.word	0x0800aaac
 800931c:	0800aabd 	.word	0x0800aabd

08009320 <__mcmp>:
 8009320:	4603      	mov	r3, r0
 8009322:	690a      	ldr	r2, [r1, #16]
 8009324:	6900      	ldr	r0, [r0, #16]
 8009326:	b530      	push	{r4, r5, lr}
 8009328:	1a80      	subs	r0, r0, r2
 800932a:	d10e      	bne.n	800934a <__mcmp+0x2a>
 800932c:	3314      	adds	r3, #20
 800932e:	3114      	adds	r1, #20
 8009330:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009338:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800933c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009340:	4295      	cmp	r5, r2
 8009342:	d003      	beq.n	800934c <__mcmp+0x2c>
 8009344:	d205      	bcs.n	8009352 <__mcmp+0x32>
 8009346:	f04f 30ff 	mov.w	r0, #4294967295
 800934a:	bd30      	pop	{r4, r5, pc}
 800934c:	42a3      	cmp	r3, r4
 800934e:	d3f3      	bcc.n	8009338 <__mcmp+0x18>
 8009350:	e7fb      	b.n	800934a <__mcmp+0x2a>
 8009352:	2001      	movs	r0, #1
 8009354:	e7f9      	b.n	800934a <__mcmp+0x2a>
	...

08009358 <__mdiff>:
 8009358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	4689      	mov	r9, r1
 800935e:	4606      	mov	r6, r0
 8009360:	4611      	mov	r1, r2
 8009362:	4648      	mov	r0, r9
 8009364:	4614      	mov	r4, r2
 8009366:	f7ff ffdb 	bl	8009320 <__mcmp>
 800936a:	1e05      	subs	r5, r0, #0
 800936c:	d112      	bne.n	8009394 <__mdiff+0x3c>
 800936e:	4629      	mov	r1, r5
 8009370:	4630      	mov	r0, r6
 8009372:	f7ff fd5d 	bl	8008e30 <_Balloc>
 8009376:	4602      	mov	r2, r0
 8009378:	b928      	cbnz	r0, 8009386 <__mdiff+0x2e>
 800937a:	f240 2137 	movw	r1, #567	@ 0x237
 800937e:	4b3e      	ldr	r3, [pc, #248]	@ (8009478 <__mdiff+0x120>)
 8009380:	483e      	ldr	r0, [pc, #248]	@ (800947c <__mdiff+0x124>)
 8009382:	f000 fcc1 	bl	8009d08 <__assert_func>
 8009386:	2301      	movs	r3, #1
 8009388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800938c:	4610      	mov	r0, r2
 800938e:	b003      	add	sp, #12
 8009390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009394:	bfbc      	itt	lt
 8009396:	464b      	movlt	r3, r9
 8009398:	46a1      	movlt	r9, r4
 800939a:	4630      	mov	r0, r6
 800939c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093a0:	bfba      	itte	lt
 80093a2:	461c      	movlt	r4, r3
 80093a4:	2501      	movlt	r5, #1
 80093a6:	2500      	movge	r5, #0
 80093a8:	f7ff fd42 	bl	8008e30 <_Balloc>
 80093ac:	4602      	mov	r2, r0
 80093ae:	b918      	cbnz	r0, 80093b8 <__mdiff+0x60>
 80093b0:	f240 2145 	movw	r1, #581	@ 0x245
 80093b4:	4b30      	ldr	r3, [pc, #192]	@ (8009478 <__mdiff+0x120>)
 80093b6:	e7e3      	b.n	8009380 <__mdiff+0x28>
 80093b8:	f100 0b14 	add.w	fp, r0, #20
 80093bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80093c0:	f109 0310 	add.w	r3, r9, #16
 80093c4:	60c5      	str	r5, [r0, #12]
 80093c6:	f04f 0c00 	mov.w	ip, #0
 80093ca:	f109 0514 	add.w	r5, r9, #20
 80093ce:	46d9      	mov	r9, fp
 80093d0:	6926      	ldr	r6, [r4, #16]
 80093d2:	f104 0e14 	add.w	lr, r4, #20
 80093d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80093da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	9b01      	ldr	r3, [sp, #4]
 80093e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80093e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80093ea:	b281      	uxth	r1, r0
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	fa1f f38a 	uxth.w	r3, sl
 80093f2:	1a5b      	subs	r3, r3, r1
 80093f4:	0c00      	lsrs	r0, r0, #16
 80093f6:	4463      	add	r3, ip
 80093f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80093fc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009400:	b29b      	uxth	r3, r3
 8009402:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009406:	4576      	cmp	r6, lr
 8009408:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800940c:	f849 3b04 	str.w	r3, [r9], #4
 8009410:	d8e6      	bhi.n	80093e0 <__mdiff+0x88>
 8009412:	1b33      	subs	r3, r6, r4
 8009414:	3b15      	subs	r3, #21
 8009416:	f023 0303 	bic.w	r3, r3, #3
 800941a:	3415      	adds	r4, #21
 800941c:	3304      	adds	r3, #4
 800941e:	42a6      	cmp	r6, r4
 8009420:	bf38      	it	cc
 8009422:	2304      	movcc	r3, #4
 8009424:	441d      	add	r5, r3
 8009426:	445b      	add	r3, fp
 8009428:	461e      	mov	r6, r3
 800942a:	462c      	mov	r4, r5
 800942c:	4544      	cmp	r4, r8
 800942e:	d30e      	bcc.n	800944e <__mdiff+0xf6>
 8009430:	f108 0103 	add.w	r1, r8, #3
 8009434:	1b49      	subs	r1, r1, r5
 8009436:	f021 0103 	bic.w	r1, r1, #3
 800943a:	3d03      	subs	r5, #3
 800943c:	45a8      	cmp	r8, r5
 800943e:	bf38      	it	cc
 8009440:	2100      	movcc	r1, #0
 8009442:	440b      	add	r3, r1
 8009444:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009448:	b199      	cbz	r1, 8009472 <__mdiff+0x11a>
 800944a:	6117      	str	r7, [r2, #16]
 800944c:	e79e      	b.n	800938c <__mdiff+0x34>
 800944e:	46e6      	mov	lr, ip
 8009450:	f854 1b04 	ldr.w	r1, [r4], #4
 8009454:	fa1f fc81 	uxth.w	ip, r1
 8009458:	44f4      	add	ip, lr
 800945a:	0c08      	lsrs	r0, r1, #16
 800945c:	4471      	add	r1, lr
 800945e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009462:	b289      	uxth	r1, r1
 8009464:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009468:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800946c:	f846 1b04 	str.w	r1, [r6], #4
 8009470:	e7dc      	b.n	800942c <__mdiff+0xd4>
 8009472:	3f01      	subs	r7, #1
 8009474:	e7e6      	b.n	8009444 <__mdiff+0xec>
 8009476:	bf00      	nop
 8009478:	0800aaac 	.word	0x0800aaac
 800947c:	0800aabd 	.word	0x0800aabd

08009480 <__d2b>:
 8009480:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009484:	2101      	movs	r1, #1
 8009486:	4690      	mov	r8, r2
 8009488:	4699      	mov	r9, r3
 800948a:	9e08      	ldr	r6, [sp, #32]
 800948c:	f7ff fcd0 	bl	8008e30 <_Balloc>
 8009490:	4604      	mov	r4, r0
 8009492:	b930      	cbnz	r0, 80094a2 <__d2b+0x22>
 8009494:	4602      	mov	r2, r0
 8009496:	f240 310f 	movw	r1, #783	@ 0x30f
 800949a:	4b23      	ldr	r3, [pc, #140]	@ (8009528 <__d2b+0xa8>)
 800949c:	4823      	ldr	r0, [pc, #140]	@ (800952c <__d2b+0xac>)
 800949e:	f000 fc33 	bl	8009d08 <__assert_func>
 80094a2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094aa:	b10d      	cbz	r5, 80094b0 <__d2b+0x30>
 80094ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	f1b8 0300 	subs.w	r3, r8, #0
 80094b6:	d024      	beq.n	8009502 <__d2b+0x82>
 80094b8:	4668      	mov	r0, sp
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	f7ff fd7f 	bl	8008fbe <__lo0bits>
 80094c0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80094c4:	b1d8      	cbz	r0, 80094fe <__d2b+0x7e>
 80094c6:	f1c0 0320 	rsb	r3, r0, #32
 80094ca:	fa02 f303 	lsl.w	r3, r2, r3
 80094ce:	430b      	orrs	r3, r1
 80094d0:	40c2      	lsrs	r2, r0
 80094d2:	6163      	str	r3, [r4, #20]
 80094d4:	9201      	str	r2, [sp, #4]
 80094d6:	9b01      	ldr	r3, [sp, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bf0c      	ite	eq
 80094dc:	2201      	moveq	r2, #1
 80094de:	2202      	movne	r2, #2
 80094e0:	61a3      	str	r3, [r4, #24]
 80094e2:	6122      	str	r2, [r4, #16]
 80094e4:	b1ad      	cbz	r5, 8009512 <__d2b+0x92>
 80094e6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80094ea:	4405      	add	r5, r0
 80094ec:	6035      	str	r5, [r6, #0]
 80094ee:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80094f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f4:	6018      	str	r0, [r3, #0]
 80094f6:	4620      	mov	r0, r4
 80094f8:	b002      	add	sp, #8
 80094fa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80094fe:	6161      	str	r1, [r4, #20]
 8009500:	e7e9      	b.n	80094d6 <__d2b+0x56>
 8009502:	a801      	add	r0, sp, #4
 8009504:	f7ff fd5b 	bl	8008fbe <__lo0bits>
 8009508:	9b01      	ldr	r3, [sp, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	6163      	str	r3, [r4, #20]
 800950e:	3020      	adds	r0, #32
 8009510:	e7e7      	b.n	80094e2 <__d2b+0x62>
 8009512:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009516:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800951a:	6030      	str	r0, [r6, #0]
 800951c:	6918      	ldr	r0, [r3, #16]
 800951e:	f7ff fd2f 	bl	8008f80 <__hi0bits>
 8009522:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009526:	e7e4      	b.n	80094f2 <__d2b+0x72>
 8009528:	0800aaac 	.word	0x0800aaac
 800952c:	0800aabd 	.word	0x0800aabd

08009530 <__ssputs_r>:
 8009530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009534:	461f      	mov	r7, r3
 8009536:	688e      	ldr	r6, [r1, #8]
 8009538:	4682      	mov	sl, r0
 800953a:	42be      	cmp	r6, r7
 800953c:	460c      	mov	r4, r1
 800953e:	4690      	mov	r8, r2
 8009540:	680b      	ldr	r3, [r1, #0]
 8009542:	d82d      	bhi.n	80095a0 <__ssputs_r+0x70>
 8009544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009548:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800954c:	d026      	beq.n	800959c <__ssputs_r+0x6c>
 800954e:	6965      	ldr	r5, [r4, #20]
 8009550:	6909      	ldr	r1, [r1, #16]
 8009552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009556:	eba3 0901 	sub.w	r9, r3, r1
 800955a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800955e:	1c7b      	adds	r3, r7, #1
 8009560:	444b      	add	r3, r9
 8009562:	106d      	asrs	r5, r5, #1
 8009564:	429d      	cmp	r5, r3
 8009566:	bf38      	it	cc
 8009568:	461d      	movcc	r5, r3
 800956a:	0553      	lsls	r3, r2, #21
 800956c:	d527      	bpl.n	80095be <__ssputs_r+0x8e>
 800956e:	4629      	mov	r1, r5
 8009570:	f7fd fe02 	bl	8007178 <_malloc_r>
 8009574:	4606      	mov	r6, r0
 8009576:	b360      	cbz	r0, 80095d2 <__ssputs_r+0xa2>
 8009578:	464a      	mov	r2, r9
 800957a:	6921      	ldr	r1, [r4, #16]
 800957c:	f000 fbb6 	bl	8009cec <memcpy>
 8009580:	89a3      	ldrh	r3, [r4, #12]
 8009582:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800958a:	81a3      	strh	r3, [r4, #12]
 800958c:	6126      	str	r6, [r4, #16]
 800958e:	444e      	add	r6, r9
 8009590:	6026      	str	r6, [r4, #0]
 8009592:	463e      	mov	r6, r7
 8009594:	6165      	str	r5, [r4, #20]
 8009596:	eba5 0509 	sub.w	r5, r5, r9
 800959a:	60a5      	str	r5, [r4, #8]
 800959c:	42be      	cmp	r6, r7
 800959e:	d900      	bls.n	80095a2 <__ssputs_r+0x72>
 80095a0:	463e      	mov	r6, r7
 80095a2:	4632      	mov	r2, r6
 80095a4:	4641      	mov	r1, r8
 80095a6:	6820      	ldr	r0, [r4, #0]
 80095a8:	f000 fb63 	bl	8009c72 <memmove>
 80095ac:	2000      	movs	r0, #0
 80095ae:	68a3      	ldr	r3, [r4, #8]
 80095b0:	1b9b      	subs	r3, r3, r6
 80095b2:	60a3      	str	r3, [r4, #8]
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	4433      	add	r3, r6
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095be:	462a      	mov	r2, r5
 80095c0:	f000 fbe6 	bl	8009d90 <_realloc_r>
 80095c4:	4606      	mov	r6, r0
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d1e0      	bne.n	800958c <__ssputs_r+0x5c>
 80095ca:	4650      	mov	r0, sl
 80095cc:	6921      	ldr	r1, [r4, #16]
 80095ce:	f7ff fbe7 	bl	8008da0 <_free_r>
 80095d2:	230c      	movs	r3, #12
 80095d4:	f8ca 3000 	str.w	r3, [sl]
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	e7e9      	b.n	80095ba <__ssputs_r+0x8a>
	...

080095e8 <_svfiprintf_r>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	4698      	mov	r8, r3
 80095ee:	898b      	ldrh	r3, [r1, #12]
 80095f0:	4607      	mov	r7, r0
 80095f2:	061b      	lsls	r3, r3, #24
 80095f4:	460d      	mov	r5, r1
 80095f6:	4614      	mov	r4, r2
 80095f8:	b09d      	sub	sp, #116	@ 0x74
 80095fa:	d510      	bpl.n	800961e <_svfiprintf_r+0x36>
 80095fc:	690b      	ldr	r3, [r1, #16]
 80095fe:	b973      	cbnz	r3, 800961e <_svfiprintf_r+0x36>
 8009600:	2140      	movs	r1, #64	@ 0x40
 8009602:	f7fd fdb9 	bl	8007178 <_malloc_r>
 8009606:	6028      	str	r0, [r5, #0]
 8009608:	6128      	str	r0, [r5, #16]
 800960a:	b930      	cbnz	r0, 800961a <_svfiprintf_r+0x32>
 800960c:	230c      	movs	r3, #12
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	b01d      	add	sp, #116	@ 0x74
 8009616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961a:	2340      	movs	r3, #64	@ 0x40
 800961c:	616b      	str	r3, [r5, #20]
 800961e:	2300      	movs	r3, #0
 8009620:	9309      	str	r3, [sp, #36]	@ 0x24
 8009622:	2320      	movs	r3, #32
 8009624:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009628:	2330      	movs	r3, #48	@ 0x30
 800962a:	f04f 0901 	mov.w	r9, #1
 800962e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009632:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80097cc <_svfiprintf_r+0x1e4>
 8009636:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800963a:	4623      	mov	r3, r4
 800963c:	469a      	mov	sl, r3
 800963e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009642:	b10a      	cbz	r2, 8009648 <_svfiprintf_r+0x60>
 8009644:	2a25      	cmp	r2, #37	@ 0x25
 8009646:	d1f9      	bne.n	800963c <_svfiprintf_r+0x54>
 8009648:	ebba 0b04 	subs.w	fp, sl, r4
 800964c:	d00b      	beq.n	8009666 <_svfiprintf_r+0x7e>
 800964e:	465b      	mov	r3, fp
 8009650:	4622      	mov	r2, r4
 8009652:	4629      	mov	r1, r5
 8009654:	4638      	mov	r0, r7
 8009656:	f7ff ff6b 	bl	8009530 <__ssputs_r>
 800965a:	3001      	adds	r0, #1
 800965c:	f000 80a7 	beq.w	80097ae <_svfiprintf_r+0x1c6>
 8009660:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009662:	445a      	add	r2, fp
 8009664:	9209      	str	r2, [sp, #36]	@ 0x24
 8009666:	f89a 3000 	ldrb.w	r3, [sl]
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 809f 	beq.w	80097ae <_svfiprintf_r+0x1c6>
 8009670:	2300      	movs	r3, #0
 8009672:	f04f 32ff 	mov.w	r2, #4294967295
 8009676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800967a:	f10a 0a01 	add.w	sl, sl, #1
 800967e:	9304      	str	r3, [sp, #16]
 8009680:	9307      	str	r3, [sp, #28]
 8009682:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009686:	931a      	str	r3, [sp, #104]	@ 0x68
 8009688:	4654      	mov	r4, sl
 800968a:	2205      	movs	r2, #5
 800968c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009690:	484e      	ldr	r0, [pc, #312]	@ (80097cc <_svfiprintf_r+0x1e4>)
 8009692:	f7fe fd26 	bl	80080e2 <memchr>
 8009696:	9a04      	ldr	r2, [sp, #16]
 8009698:	b9d8      	cbnz	r0, 80096d2 <_svfiprintf_r+0xea>
 800969a:	06d0      	lsls	r0, r2, #27
 800969c:	bf44      	itt	mi
 800969e:	2320      	movmi	r3, #32
 80096a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096a4:	0711      	lsls	r1, r2, #28
 80096a6:	bf44      	itt	mi
 80096a8:	232b      	movmi	r3, #43	@ 0x2b
 80096aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ae:	f89a 3000 	ldrb.w	r3, [sl]
 80096b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096b4:	d015      	beq.n	80096e2 <_svfiprintf_r+0xfa>
 80096b6:	4654      	mov	r4, sl
 80096b8:	2000      	movs	r0, #0
 80096ba:	f04f 0c0a 	mov.w	ip, #10
 80096be:	9a07      	ldr	r2, [sp, #28]
 80096c0:	4621      	mov	r1, r4
 80096c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096c6:	3b30      	subs	r3, #48	@ 0x30
 80096c8:	2b09      	cmp	r3, #9
 80096ca:	d94b      	bls.n	8009764 <_svfiprintf_r+0x17c>
 80096cc:	b1b0      	cbz	r0, 80096fc <_svfiprintf_r+0x114>
 80096ce:	9207      	str	r2, [sp, #28]
 80096d0:	e014      	b.n	80096fc <_svfiprintf_r+0x114>
 80096d2:	eba0 0308 	sub.w	r3, r0, r8
 80096d6:	fa09 f303 	lsl.w	r3, r9, r3
 80096da:	4313      	orrs	r3, r2
 80096dc:	46a2      	mov	sl, r4
 80096de:	9304      	str	r3, [sp, #16]
 80096e0:	e7d2      	b.n	8009688 <_svfiprintf_r+0xa0>
 80096e2:	9b03      	ldr	r3, [sp, #12]
 80096e4:	1d19      	adds	r1, r3, #4
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	9103      	str	r1, [sp, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	bfbb      	ittet	lt
 80096ee:	425b      	neglt	r3, r3
 80096f0:	f042 0202 	orrlt.w	r2, r2, #2
 80096f4:	9307      	strge	r3, [sp, #28]
 80096f6:	9307      	strlt	r3, [sp, #28]
 80096f8:	bfb8      	it	lt
 80096fa:	9204      	strlt	r2, [sp, #16]
 80096fc:	7823      	ldrb	r3, [r4, #0]
 80096fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009700:	d10a      	bne.n	8009718 <_svfiprintf_r+0x130>
 8009702:	7863      	ldrb	r3, [r4, #1]
 8009704:	2b2a      	cmp	r3, #42	@ 0x2a
 8009706:	d132      	bne.n	800976e <_svfiprintf_r+0x186>
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	3402      	adds	r4, #2
 800970c:	1d1a      	adds	r2, r3, #4
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	9203      	str	r2, [sp, #12]
 8009712:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009716:	9305      	str	r3, [sp, #20]
 8009718:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80097d0 <_svfiprintf_r+0x1e8>
 800971c:	2203      	movs	r2, #3
 800971e:	4650      	mov	r0, sl
 8009720:	7821      	ldrb	r1, [r4, #0]
 8009722:	f7fe fcde 	bl	80080e2 <memchr>
 8009726:	b138      	cbz	r0, 8009738 <_svfiprintf_r+0x150>
 8009728:	2240      	movs	r2, #64	@ 0x40
 800972a:	9b04      	ldr	r3, [sp, #16]
 800972c:	eba0 000a 	sub.w	r0, r0, sl
 8009730:	4082      	lsls	r2, r0
 8009732:	4313      	orrs	r3, r2
 8009734:	3401      	adds	r4, #1
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973c:	2206      	movs	r2, #6
 800973e:	4825      	ldr	r0, [pc, #148]	@ (80097d4 <_svfiprintf_r+0x1ec>)
 8009740:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009744:	f7fe fccd 	bl	80080e2 <memchr>
 8009748:	2800      	cmp	r0, #0
 800974a:	d036      	beq.n	80097ba <_svfiprintf_r+0x1d2>
 800974c:	4b22      	ldr	r3, [pc, #136]	@ (80097d8 <_svfiprintf_r+0x1f0>)
 800974e:	bb1b      	cbnz	r3, 8009798 <_svfiprintf_r+0x1b0>
 8009750:	9b03      	ldr	r3, [sp, #12]
 8009752:	3307      	adds	r3, #7
 8009754:	f023 0307 	bic.w	r3, r3, #7
 8009758:	3308      	adds	r3, #8
 800975a:	9303      	str	r3, [sp, #12]
 800975c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800975e:	4433      	add	r3, r6
 8009760:	9309      	str	r3, [sp, #36]	@ 0x24
 8009762:	e76a      	b.n	800963a <_svfiprintf_r+0x52>
 8009764:	460c      	mov	r4, r1
 8009766:	2001      	movs	r0, #1
 8009768:	fb0c 3202 	mla	r2, ip, r2, r3
 800976c:	e7a8      	b.n	80096c0 <_svfiprintf_r+0xd8>
 800976e:	2300      	movs	r3, #0
 8009770:	f04f 0c0a 	mov.w	ip, #10
 8009774:	4619      	mov	r1, r3
 8009776:	3401      	adds	r4, #1
 8009778:	9305      	str	r3, [sp, #20]
 800977a:	4620      	mov	r0, r4
 800977c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009780:	3a30      	subs	r2, #48	@ 0x30
 8009782:	2a09      	cmp	r2, #9
 8009784:	d903      	bls.n	800978e <_svfiprintf_r+0x1a6>
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0c6      	beq.n	8009718 <_svfiprintf_r+0x130>
 800978a:	9105      	str	r1, [sp, #20]
 800978c:	e7c4      	b.n	8009718 <_svfiprintf_r+0x130>
 800978e:	4604      	mov	r4, r0
 8009790:	2301      	movs	r3, #1
 8009792:	fb0c 2101 	mla	r1, ip, r1, r2
 8009796:	e7f0      	b.n	800977a <_svfiprintf_r+0x192>
 8009798:	ab03      	add	r3, sp, #12
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	462a      	mov	r2, r5
 800979e:	4638      	mov	r0, r7
 80097a0:	4b0e      	ldr	r3, [pc, #56]	@ (80097dc <_svfiprintf_r+0x1f4>)
 80097a2:	a904      	add	r1, sp, #16
 80097a4:	f7fd fe12 	bl	80073cc <_printf_float>
 80097a8:	1c42      	adds	r2, r0, #1
 80097aa:	4606      	mov	r6, r0
 80097ac:	d1d6      	bne.n	800975c <_svfiprintf_r+0x174>
 80097ae:	89ab      	ldrh	r3, [r5, #12]
 80097b0:	065b      	lsls	r3, r3, #25
 80097b2:	f53f af2d 	bmi.w	8009610 <_svfiprintf_r+0x28>
 80097b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097b8:	e72c      	b.n	8009614 <_svfiprintf_r+0x2c>
 80097ba:	ab03      	add	r3, sp, #12
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	462a      	mov	r2, r5
 80097c0:	4638      	mov	r0, r7
 80097c2:	4b06      	ldr	r3, [pc, #24]	@ (80097dc <_svfiprintf_r+0x1f4>)
 80097c4:	a904      	add	r1, sp, #16
 80097c6:	f7fe f89f 	bl	8007908 <_printf_i>
 80097ca:	e7ed      	b.n	80097a8 <_svfiprintf_r+0x1c0>
 80097cc:	0800ac18 	.word	0x0800ac18
 80097d0:	0800ac1e 	.word	0x0800ac1e
 80097d4:	0800ac22 	.word	0x0800ac22
 80097d8:	080073cd 	.word	0x080073cd
 80097dc:	08009531 	.word	0x08009531

080097e0 <__sfputc_r>:
 80097e0:	6893      	ldr	r3, [r2, #8]
 80097e2:	b410      	push	{r4}
 80097e4:	3b01      	subs	r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	6093      	str	r3, [r2, #8]
 80097ea:	da07      	bge.n	80097fc <__sfputc_r+0x1c>
 80097ec:	6994      	ldr	r4, [r2, #24]
 80097ee:	42a3      	cmp	r3, r4
 80097f0:	db01      	blt.n	80097f6 <__sfputc_r+0x16>
 80097f2:	290a      	cmp	r1, #10
 80097f4:	d102      	bne.n	80097fc <__sfputc_r+0x1c>
 80097f6:	bc10      	pop	{r4}
 80097f8:	f7fe bb4f 	b.w	8007e9a <__swbuf_r>
 80097fc:	6813      	ldr	r3, [r2, #0]
 80097fe:	1c58      	adds	r0, r3, #1
 8009800:	6010      	str	r0, [r2, #0]
 8009802:	7019      	strb	r1, [r3, #0]
 8009804:	4608      	mov	r0, r1
 8009806:	bc10      	pop	{r4}
 8009808:	4770      	bx	lr

0800980a <__sfputs_r>:
 800980a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980c:	4606      	mov	r6, r0
 800980e:	460f      	mov	r7, r1
 8009810:	4614      	mov	r4, r2
 8009812:	18d5      	adds	r5, r2, r3
 8009814:	42ac      	cmp	r4, r5
 8009816:	d101      	bne.n	800981c <__sfputs_r+0x12>
 8009818:	2000      	movs	r0, #0
 800981a:	e007      	b.n	800982c <__sfputs_r+0x22>
 800981c:	463a      	mov	r2, r7
 800981e:	4630      	mov	r0, r6
 8009820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009824:	f7ff ffdc 	bl	80097e0 <__sfputc_r>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d1f3      	bne.n	8009814 <__sfputs_r+0xa>
 800982c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009830 <_vfiprintf_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	460d      	mov	r5, r1
 8009836:	4614      	mov	r4, r2
 8009838:	4698      	mov	r8, r3
 800983a:	4606      	mov	r6, r0
 800983c:	b09d      	sub	sp, #116	@ 0x74
 800983e:	b118      	cbz	r0, 8009848 <_vfiprintf_r+0x18>
 8009840:	6a03      	ldr	r3, [r0, #32]
 8009842:	b90b      	cbnz	r3, 8009848 <_vfiprintf_r+0x18>
 8009844:	f7fe fa0c 	bl	8007c60 <__sinit>
 8009848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800984a:	07d9      	lsls	r1, r3, #31
 800984c:	d405      	bmi.n	800985a <_vfiprintf_r+0x2a>
 800984e:	89ab      	ldrh	r3, [r5, #12]
 8009850:	059a      	lsls	r2, r3, #22
 8009852:	d402      	bmi.n	800985a <_vfiprintf_r+0x2a>
 8009854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009856:	f7fe fc42 	bl	80080de <__retarget_lock_acquire_recursive>
 800985a:	89ab      	ldrh	r3, [r5, #12]
 800985c:	071b      	lsls	r3, r3, #28
 800985e:	d501      	bpl.n	8009864 <_vfiprintf_r+0x34>
 8009860:	692b      	ldr	r3, [r5, #16]
 8009862:	b99b      	cbnz	r3, 800988c <_vfiprintf_r+0x5c>
 8009864:	4629      	mov	r1, r5
 8009866:	4630      	mov	r0, r6
 8009868:	f7fe fb56 	bl	8007f18 <__swsetup_r>
 800986c:	b170      	cbz	r0, 800988c <_vfiprintf_r+0x5c>
 800986e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009870:	07dc      	lsls	r4, r3, #31
 8009872:	d504      	bpl.n	800987e <_vfiprintf_r+0x4e>
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	b01d      	add	sp, #116	@ 0x74
 800987a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987e:	89ab      	ldrh	r3, [r5, #12]
 8009880:	0598      	lsls	r0, r3, #22
 8009882:	d4f7      	bmi.n	8009874 <_vfiprintf_r+0x44>
 8009884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009886:	f7fe fc2b 	bl	80080e0 <__retarget_lock_release_recursive>
 800988a:	e7f3      	b.n	8009874 <_vfiprintf_r+0x44>
 800988c:	2300      	movs	r3, #0
 800988e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009890:	2320      	movs	r3, #32
 8009892:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009896:	2330      	movs	r3, #48	@ 0x30
 8009898:	f04f 0901 	mov.w	r9, #1
 800989c:	f8cd 800c 	str.w	r8, [sp, #12]
 80098a0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009a4c <_vfiprintf_r+0x21c>
 80098a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098a8:	4623      	mov	r3, r4
 80098aa:	469a      	mov	sl, r3
 80098ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098b0:	b10a      	cbz	r2, 80098b6 <_vfiprintf_r+0x86>
 80098b2:	2a25      	cmp	r2, #37	@ 0x25
 80098b4:	d1f9      	bne.n	80098aa <_vfiprintf_r+0x7a>
 80098b6:	ebba 0b04 	subs.w	fp, sl, r4
 80098ba:	d00b      	beq.n	80098d4 <_vfiprintf_r+0xa4>
 80098bc:	465b      	mov	r3, fp
 80098be:	4622      	mov	r2, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7ff ffa1 	bl	800980a <__sfputs_r>
 80098c8:	3001      	adds	r0, #1
 80098ca:	f000 80a7 	beq.w	8009a1c <_vfiprintf_r+0x1ec>
 80098ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098d0:	445a      	add	r2, fp
 80098d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80098d4:	f89a 3000 	ldrb.w	r3, [sl]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 809f 	beq.w	8009a1c <_vfiprintf_r+0x1ec>
 80098de:	2300      	movs	r3, #0
 80098e0:	f04f 32ff 	mov.w	r2, #4294967295
 80098e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098e8:	f10a 0a01 	add.w	sl, sl, #1
 80098ec:	9304      	str	r3, [sp, #16]
 80098ee:	9307      	str	r3, [sp, #28]
 80098f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80098f6:	4654      	mov	r4, sl
 80098f8:	2205      	movs	r2, #5
 80098fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fe:	4853      	ldr	r0, [pc, #332]	@ (8009a4c <_vfiprintf_r+0x21c>)
 8009900:	f7fe fbef 	bl	80080e2 <memchr>
 8009904:	9a04      	ldr	r2, [sp, #16]
 8009906:	b9d8      	cbnz	r0, 8009940 <_vfiprintf_r+0x110>
 8009908:	06d1      	lsls	r1, r2, #27
 800990a:	bf44      	itt	mi
 800990c:	2320      	movmi	r3, #32
 800990e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009912:	0713      	lsls	r3, r2, #28
 8009914:	bf44      	itt	mi
 8009916:	232b      	movmi	r3, #43	@ 0x2b
 8009918:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800991c:	f89a 3000 	ldrb.w	r3, [sl]
 8009920:	2b2a      	cmp	r3, #42	@ 0x2a
 8009922:	d015      	beq.n	8009950 <_vfiprintf_r+0x120>
 8009924:	4654      	mov	r4, sl
 8009926:	2000      	movs	r0, #0
 8009928:	f04f 0c0a 	mov.w	ip, #10
 800992c:	9a07      	ldr	r2, [sp, #28]
 800992e:	4621      	mov	r1, r4
 8009930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009934:	3b30      	subs	r3, #48	@ 0x30
 8009936:	2b09      	cmp	r3, #9
 8009938:	d94b      	bls.n	80099d2 <_vfiprintf_r+0x1a2>
 800993a:	b1b0      	cbz	r0, 800996a <_vfiprintf_r+0x13a>
 800993c:	9207      	str	r2, [sp, #28]
 800993e:	e014      	b.n	800996a <_vfiprintf_r+0x13a>
 8009940:	eba0 0308 	sub.w	r3, r0, r8
 8009944:	fa09 f303 	lsl.w	r3, r9, r3
 8009948:	4313      	orrs	r3, r2
 800994a:	46a2      	mov	sl, r4
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	e7d2      	b.n	80098f6 <_vfiprintf_r+0xc6>
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	1d19      	adds	r1, r3, #4
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	9103      	str	r1, [sp, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	bfbb      	ittet	lt
 800995c:	425b      	neglt	r3, r3
 800995e:	f042 0202 	orrlt.w	r2, r2, #2
 8009962:	9307      	strge	r3, [sp, #28]
 8009964:	9307      	strlt	r3, [sp, #28]
 8009966:	bfb8      	it	lt
 8009968:	9204      	strlt	r2, [sp, #16]
 800996a:	7823      	ldrb	r3, [r4, #0]
 800996c:	2b2e      	cmp	r3, #46	@ 0x2e
 800996e:	d10a      	bne.n	8009986 <_vfiprintf_r+0x156>
 8009970:	7863      	ldrb	r3, [r4, #1]
 8009972:	2b2a      	cmp	r3, #42	@ 0x2a
 8009974:	d132      	bne.n	80099dc <_vfiprintf_r+0x1ac>
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	3402      	adds	r4, #2
 800997a:	1d1a      	adds	r2, r3, #4
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	9203      	str	r2, [sp, #12]
 8009980:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009984:	9305      	str	r3, [sp, #20]
 8009986:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009a50 <_vfiprintf_r+0x220>
 800998a:	2203      	movs	r2, #3
 800998c:	4650      	mov	r0, sl
 800998e:	7821      	ldrb	r1, [r4, #0]
 8009990:	f7fe fba7 	bl	80080e2 <memchr>
 8009994:	b138      	cbz	r0, 80099a6 <_vfiprintf_r+0x176>
 8009996:	2240      	movs	r2, #64	@ 0x40
 8009998:	9b04      	ldr	r3, [sp, #16]
 800999a:	eba0 000a 	sub.w	r0, r0, sl
 800999e:	4082      	lsls	r2, r0
 80099a0:	4313      	orrs	r3, r2
 80099a2:	3401      	adds	r4, #1
 80099a4:	9304      	str	r3, [sp, #16]
 80099a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099aa:	2206      	movs	r2, #6
 80099ac:	4829      	ldr	r0, [pc, #164]	@ (8009a54 <_vfiprintf_r+0x224>)
 80099ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099b2:	f7fe fb96 	bl	80080e2 <memchr>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d03f      	beq.n	8009a3a <_vfiprintf_r+0x20a>
 80099ba:	4b27      	ldr	r3, [pc, #156]	@ (8009a58 <_vfiprintf_r+0x228>)
 80099bc:	bb1b      	cbnz	r3, 8009a06 <_vfiprintf_r+0x1d6>
 80099be:	9b03      	ldr	r3, [sp, #12]
 80099c0:	3307      	adds	r3, #7
 80099c2:	f023 0307 	bic.w	r3, r3, #7
 80099c6:	3308      	adds	r3, #8
 80099c8:	9303      	str	r3, [sp, #12]
 80099ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099cc:	443b      	add	r3, r7
 80099ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80099d0:	e76a      	b.n	80098a8 <_vfiprintf_r+0x78>
 80099d2:	460c      	mov	r4, r1
 80099d4:	2001      	movs	r0, #1
 80099d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80099da:	e7a8      	b.n	800992e <_vfiprintf_r+0xfe>
 80099dc:	2300      	movs	r3, #0
 80099de:	f04f 0c0a 	mov.w	ip, #10
 80099e2:	4619      	mov	r1, r3
 80099e4:	3401      	adds	r4, #1
 80099e6:	9305      	str	r3, [sp, #20]
 80099e8:	4620      	mov	r0, r4
 80099ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ee:	3a30      	subs	r2, #48	@ 0x30
 80099f0:	2a09      	cmp	r2, #9
 80099f2:	d903      	bls.n	80099fc <_vfiprintf_r+0x1cc>
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0c6      	beq.n	8009986 <_vfiprintf_r+0x156>
 80099f8:	9105      	str	r1, [sp, #20]
 80099fa:	e7c4      	b.n	8009986 <_vfiprintf_r+0x156>
 80099fc:	4604      	mov	r4, r0
 80099fe:	2301      	movs	r3, #1
 8009a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a04:	e7f0      	b.n	80099e8 <_vfiprintf_r+0x1b8>
 8009a06:	ab03      	add	r3, sp, #12
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	462a      	mov	r2, r5
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	4b13      	ldr	r3, [pc, #76]	@ (8009a5c <_vfiprintf_r+0x22c>)
 8009a10:	a904      	add	r1, sp, #16
 8009a12:	f7fd fcdb 	bl	80073cc <_printf_float>
 8009a16:	4607      	mov	r7, r0
 8009a18:	1c78      	adds	r0, r7, #1
 8009a1a:	d1d6      	bne.n	80099ca <_vfiprintf_r+0x19a>
 8009a1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a1e:	07d9      	lsls	r1, r3, #31
 8009a20:	d405      	bmi.n	8009a2e <_vfiprintf_r+0x1fe>
 8009a22:	89ab      	ldrh	r3, [r5, #12]
 8009a24:	059a      	lsls	r2, r3, #22
 8009a26:	d402      	bmi.n	8009a2e <_vfiprintf_r+0x1fe>
 8009a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a2a:	f7fe fb59 	bl	80080e0 <__retarget_lock_release_recursive>
 8009a2e:	89ab      	ldrh	r3, [r5, #12]
 8009a30:	065b      	lsls	r3, r3, #25
 8009a32:	f53f af1f 	bmi.w	8009874 <_vfiprintf_r+0x44>
 8009a36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a38:	e71e      	b.n	8009878 <_vfiprintf_r+0x48>
 8009a3a:	ab03      	add	r3, sp, #12
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	462a      	mov	r2, r5
 8009a40:	4630      	mov	r0, r6
 8009a42:	4b06      	ldr	r3, [pc, #24]	@ (8009a5c <_vfiprintf_r+0x22c>)
 8009a44:	a904      	add	r1, sp, #16
 8009a46:	f7fd ff5f 	bl	8007908 <_printf_i>
 8009a4a:	e7e4      	b.n	8009a16 <_vfiprintf_r+0x1e6>
 8009a4c:	0800ac18 	.word	0x0800ac18
 8009a50:	0800ac1e 	.word	0x0800ac1e
 8009a54:	0800ac22 	.word	0x0800ac22
 8009a58:	080073cd 	.word	0x080073cd
 8009a5c:	0800980b 	.word	0x0800980b

08009a60 <__sflush_r>:
 8009a60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a66:	0716      	lsls	r6, r2, #28
 8009a68:	4605      	mov	r5, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	d454      	bmi.n	8009b18 <__sflush_r+0xb8>
 8009a6e:	684b      	ldr	r3, [r1, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	dc02      	bgt.n	8009a7a <__sflush_r+0x1a>
 8009a74:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	dd48      	ble.n	8009b0c <__sflush_r+0xac>
 8009a7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a7c:	2e00      	cmp	r6, #0
 8009a7e:	d045      	beq.n	8009b0c <__sflush_r+0xac>
 8009a80:	2300      	movs	r3, #0
 8009a82:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a86:	682f      	ldr	r7, [r5, #0]
 8009a88:	6a21      	ldr	r1, [r4, #32]
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	d030      	beq.n	8009af0 <__sflush_r+0x90>
 8009a8e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	0759      	lsls	r1, r3, #29
 8009a94:	d505      	bpl.n	8009aa2 <__sflush_r+0x42>
 8009a96:	6863      	ldr	r3, [r4, #4]
 8009a98:	1ad2      	subs	r2, r2, r3
 8009a9a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a9c:	b10b      	cbz	r3, 8009aa2 <__sflush_r+0x42>
 8009a9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009aa0:	1ad2      	subs	r2, r2, r3
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009aa8:	6a21      	ldr	r1, [r4, #32]
 8009aaa:	47b0      	blx	r6
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	d106      	bne.n	8009ac0 <__sflush_r+0x60>
 8009ab2:	6829      	ldr	r1, [r5, #0]
 8009ab4:	291d      	cmp	r1, #29
 8009ab6:	d82b      	bhi.n	8009b10 <__sflush_r+0xb0>
 8009ab8:	4a28      	ldr	r2, [pc, #160]	@ (8009b5c <__sflush_r+0xfc>)
 8009aba:	410a      	asrs	r2, r1
 8009abc:	07d6      	lsls	r6, r2, #31
 8009abe:	d427      	bmi.n	8009b10 <__sflush_r+0xb0>
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	6062      	str	r2, [r4, #4]
 8009ac4:	6922      	ldr	r2, [r4, #16]
 8009ac6:	04d9      	lsls	r1, r3, #19
 8009ac8:	6022      	str	r2, [r4, #0]
 8009aca:	d504      	bpl.n	8009ad6 <__sflush_r+0x76>
 8009acc:	1c42      	adds	r2, r0, #1
 8009ace:	d101      	bne.n	8009ad4 <__sflush_r+0x74>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b903      	cbnz	r3, 8009ad6 <__sflush_r+0x76>
 8009ad4:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ad6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ad8:	602f      	str	r7, [r5, #0]
 8009ada:	b1b9      	cbz	r1, 8009b0c <__sflush_r+0xac>
 8009adc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ae0:	4299      	cmp	r1, r3
 8009ae2:	d002      	beq.n	8009aea <__sflush_r+0x8a>
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f7ff f95b 	bl	8008da0 <_free_r>
 8009aea:	2300      	movs	r3, #0
 8009aec:	6363      	str	r3, [r4, #52]	@ 0x34
 8009aee:	e00d      	b.n	8009b0c <__sflush_r+0xac>
 8009af0:	2301      	movs	r3, #1
 8009af2:	4628      	mov	r0, r5
 8009af4:	47b0      	blx	r6
 8009af6:	4602      	mov	r2, r0
 8009af8:	1c50      	adds	r0, r2, #1
 8009afa:	d1c9      	bne.n	8009a90 <__sflush_r+0x30>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0c6      	beq.n	8009a90 <__sflush_r+0x30>
 8009b02:	2b1d      	cmp	r3, #29
 8009b04:	d001      	beq.n	8009b0a <__sflush_r+0xaa>
 8009b06:	2b16      	cmp	r3, #22
 8009b08:	d11d      	bne.n	8009b46 <__sflush_r+0xe6>
 8009b0a:	602f      	str	r7, [r5, #0]
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	e021      	b.n	8009b54 <__sflush_r+0xf4>
 8009b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b14:	b21b      	sxth	r3, r3
 8009b16:	e01a      	b.n	8009b4e <__sflush_r+0xee>
 8009b18:	690f      	ldr	r7, [r1, #16]
 8009b1a:	2f00      	cmp	r7, #0
 8009b1c:	d0f6      	beq.n	8009b0c <__sflush_r+0xac>
 8009b1e:	0793      	lsls	r3, r2, #30
 8009b20:	bf18      	it	ne
 8009b22:	2300      	movne	r3, #0
 8009b24:	680e      	ldr	r6, [r1, #0]
 8009b26:	bf08      	it	eq
 8009b28:	694b      	ldreq	r3, [r1, #20]
 8009b2a:	1bf6      	subs	r6, r6, r7
 8009b2c:	600f      	str	r7, [r1, #0]
 8009b2e:	608b      	str	r3, [r1, #8]
 8009b30:	2e00      	cmp	r6, #0
 8009b32:	ddeb      	ble.n	8009b0c <__sflush_r+0xac>
 8009b34:	4633      	mov	r3, r6
 8009b36:	463a      	mov	r2, r7
 8009b38:	4628      	mov	r0, r5
 8009b3a:	6a21      	ldr	r1, [r4, #32]
 8009b3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009b40:	47e0      	blx	ip
 8009b42:	2800      	cmp	r0, #0
 8009b44:	dc07      	bgt.n	8009b56 <__sflush_r+0xf6>
 8009b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	81a3      	strh	r3, [r4, #12]
 8009b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b56:	4407      	add	r7, r0
 8009b58:	1a36      	subs	r6, r6, r0
 8009b5a:	e7e9      	b.n	8009b30 <__sflush_r+0xd0>
 8009b5c:	dfbffffe 	.word	0xdfbffffe

08009b60 <_fflush_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	690b      	ldr	r3, [r1, #16]
 8009b64:	4605      	mov	r5, r0
 8009b66:	460c      	mov	r4, r1
 8009b68:	b913      	cbnz	r3, 8009b70 <_fflush_r+0x10>
 8009b6a:	2500      	movs	r5, #0
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	b118      	cbz	r0, 8009b7a <_fflush_r+0x1a>
 8009b72:	6a03      	ldr	r3, [r0, #32]
 8009b74:	b90b      	cbnz	r3, 8009b7a <_fflush_r+0x1a>
 8009b76:	f7fe f873 	bl	8007c60 <__sinit>
 8009b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0f3      	beq.n	8009b6a <_fflush_r+0xa>
 8009b82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b84:	07d0      	lsls	r0, r2, #31
 8009b86:	d404      	bmi.n	8009b92 <_fflush_r+0x32>
 8009b88:	0599      	lsls	r1, r3, #22
 8009b8a:	d402      	bmi.n	8009b92 <_fflush_r+0x32>
 8009b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b8e:	f7fe faa6 	bl	80080de <__retarget_lock_acquire_recursive>
 8009b92:	4628      	mov	r0, r5
 8009b94:	4621      	mov	r1, r4
 8009b96:	f7ff ff63 	bl	8009a60 <__sflush_r>
 8009b9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	07da      	lsls	r2, r3, #31
 8009ba0:	d4e4      	bmi.n	8009b6c <_fflush_r+0xc>
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	059b      	lsls	r3, r3, #22
 8009ba6:	d4e1      	bmi.n	8009b6c <_fflush_r+0xc>
 8009ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009baa:	f7fe fa99 	bl	80080e0 <__retarget_lock_release_recursive>
 8009bae:	e7dd      	b.n	8009b6c <_fflush_r+0xc>

08009bb0 <__swhatbuf_r>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bb8:	4615      	mov	r5, r2
 8009bba:	2900      	cmp	r1, #0
 8009bbc:	461e      	mov	r6, r3
 8009bbe:	b096      	sub	sp, #88	@ 0x58
 8009bc0:	da0c      	bge.n	8009bdc <__swhatbuf_r+0x2c>
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009bca:	bf14      	ite	ne
 8009bcc:	2340      	movne	r3, #64	@ 0x40
 8009bce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	6031      	str	r1, [r6, #0]
 8009bd6:	602b      	str	r3, [r5, #0]
 8009bd8:	b016      	add	sp, #88	@ 0x58
 8009bda:	bd70      	pop	{r4, r5, r6, pc}
 8009bdc:	466a      	mov	r2, sp
 8009bde:	f000 f863 	bl	8009ca8 <_fstat_r>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	dbed      	blt.n	8009bc2 <__swhatbuf_r+0x12>
 8009be6:	9901      	ldr	r1, [sp, #4]
 8009be8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009bec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009bf0:	4259      	negs	r1, r3
 8009bf2:	4159      	adcs	r1, r3
 8009bf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bf8:	e7eb      	b.n	8009bd2 <__swhatbuf_r+0x22>

08009bfa <__smakebuf_r>:
 8009bfa:	898b      	ldrh	r3, [r1, #12]
 8009bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bfe:	079d      	lsls	r5, r3, #30
 8009c00:	4606      	mov	r6, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	d507      	bpl.n	8009c16 <__smakebuf_r+0x1c>
 8009c06:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c0a:	6023      	str	r3, [r4, #0]
 8009c0c:	6123      	str	r3, [r4, #16]
 8009c0e:	2301      	movs	r3, #1
 8009c10:	6163      	str	r3, [r4, #20]
 8009c12:	b003      	add	sp, #12
 8009c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c16:	466a      	mov	r2, sp
 8009c18:	ab01      	add	r3, sp, #4
 8009c1a:	f7ff ffc9 	bl	8009bb0 <__swhatbuf_r>
 8009c1e:	9f00      	ldr	r7, [sp, #0]
 8009c20:	4605      	mov	r5, r0
 8009c22:	4639      	mov	r1, r7
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7fd faa7 	bl	8007178 <_malloc_r>
 8009c2a:	b948      	cbnz	r0, 8009c40 <__smakebuf_r+0x46>
 8009c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c30:	059a      	lsls	r2, r3, #22
 8009c32:	d4ee      	bmi.n	8009c12 <__smakebuf_r+0x18>
 8009c34:	f023 0303 	bic.w	r3, r3, #3
 8009c38:	f043 0302 	orr.w	r3, r3, #2
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	e7e2      	b.n	8009c06 <__smakebuf_r+0xc>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	9b01      	ldr	r3, [sp, #4]
 8009c4e:	6020      	str	r0, [r4, #0]
 8009c50:	b15b      	cbz	r3, 8009c6a <__smakebuf_r+0x70>
 8009c52:	4630      	mov	r0, r6
 8009c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c58:	f000 f838 	bl	8009ccc <_isatty_r>
 8009c5c:	b128      	cbz	r0, 8009c6a <__smakebuf_r+0x70>
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	f043 0301 	orr.w	r3, r3, #1
 8009c68:	81a3      	strh	r3, [r4, #12]
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	431d      	orrs	r5, r3
 8009c6e:	81a5      	strh	r5, [r4, #12]
 8009c70:	e7cf      	b.n	8009c12 <__smakebuf_r+0x18>

08009c72 <memmove>:
 8009c72:	4288      	cmp	r0, r1
 8009c74:	b510      	push	{r4, lr}
 8009c76:	eb01 0402 	add.w	r4, r1, r2
 8009c7a:	d902      	bls.n	8009c82 <memmove+0x10>
 8009c7c:	4284      	cmp	r4, r0
 8009c7e:	4623      	mov	r3, r4
 8009c80:	d807      	bhi.n	8009c92 <memmove+0x20>
 8009c82:	1e43      	subs	r3, r0, #1
 8009c84:	42a1      	cmp	r1, r4
 8009c86:	d008      	beq.n	8009c9a <memmove+0x28>
 8009c88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c8c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c90:	e7f8      	b.n	8009c84 <memmove+0x12>
 8009c92:	4601      	mov	r1, r0
 8009c94:	4402      	add	r2, r0
 8009c96:	428a      	cmp	r2, r1
 8009c98:	d100      	bne.n	8009c9c <memmove+0x2a>
 8009c9a:	bd10      	pop	{r4, pc}
 8009c9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ca0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ca4:	e7f7      	b.n	8009c96 <memmove+0x24>
	...

08009ca8 <_fstat_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	2300      	movs	r3, #0
 8009cac:	4d06      	ldr	r5, [pc, #24]	@ (8009cc8 <_fstat_r+0x20>)
 8009cae:	4604      	mov	r4, r0
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	602b      	str	r3, [r5, #0]
 8009cb6:	f7f8 fac3 	bl	8002240 <_fstat>
 8009cba:	1c43      	adds	r3, r0, #1
 8009cbc:	d102      	bne.n	8009cc4 <_fstat_r+0x1c>
 8009cbe:	682b      	ldr	r3, [r5, #0]
 8009cc0:	b103      	cbz	r3, 8009cc4 <_fstat_r+0x1c>
 8009cc2:	6023      	str	r3, [r4, #0]
 8009cc4:	bd38      	pop	{r3, r4, r5, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000940 	.word	0x20000940

08009ccc <_isatty_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	2300      	movs	r3, #0
 8009cd0:	4d05      	ldr	r5, [pc, #20]	@ (8009ce8 <_isatty_r+0x1c>)
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	602b      	str	r3, [r5, #0]
 8009cd8:	f7f8 fac1 	bl	800225e <_isatty>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_isatty_r+0x1a>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_isatty_r+0x1a>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20000940 	.word	0x20000940

08009cec <memcpy>:
 8009cec:	440a      	add	r2, r1
 8009cee:	4291      	cmp	r1, r2
 8009cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cf4:	d100      	bne.n	8009cf8 <memcpy+0xc>
 8009cf6:	4770      	bx	lr
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cfe:	4291      	cmp	r1, r2
 8009d00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d04:	d1f9      	bne.n	8009cfa <memcpy+0xe>
 8009d06:	bd10      	pop	{r4, pc}

08009d08 <__assert_func>:
 8009d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d0a:	4614      	mov	r4, r2
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	4b09      	ldr	r3, [pc, #36]	@ (8009d34 <__assert_func+0x2c>)
 8009d10:	4605      	mov	r5, r0
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68d8      	ldr	r0, [r3, #12]
 8009d16:	b954      	cbnz	r4, 8009d2e <__assert_func+0x26>
 8009d18:	4b07      	ldr	r3, [pc, #28]	@ (8009d38 <__assert_func+0x30>)
 8009d1a:	461c      	mov	r4, r3
 8009d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d20:	9100      	str	r1, [sp, #0]
 8009d22:	462b      	mov	r3, r5
 8009d24:	4905      	ldr	r1, [pc, #20]	@ (8009d3c <__assert_func+0x34>)
 8009d26:	f000 f86f 	bl	8009e08 <fiprintf>
 8009d2a:	f000 f87f 	bl	8009e2c <abort>
 8009d2e:	4b04      	ldr	r3, [pc, #16]	@ (8009d40 <__assert_func+0x38>)
 8009d30:	e7f4      	b.n	8009d1c <__assert_func+0x14>
 8009d32:	bf00      	nop
 8009d34:	20000030 	.word	0x20000030
 8009d38:	0800ac6e 	.word	0x0800ac6e
 8009d3c:	0800ac40 	.word	0x0800ac40
 8009d40:	0800ac33 	.word	0x0800ac33

08009d44 <_calloc_r>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	fba1 5402 	umull	r5, r4, r1, r2
 8009d4a:	b93c      	cbnz	r4, 8009d5c <_calloc_r+0x18>
 8009d4c:	4629      	mov	r1, r5
 8009d4e:	f7fd fa13 	bl	8007178 <_malloc_r>
 8009d52:	4606      	mov	r6, r0
 8009d54:	b928      	cbnz	r0, 8009d62 <_calloc_r+0x1e>
 8009d56:	2600      	movs	r6, #0
 8009d58:	4630      	mov	r0, r6
 8009d5a:	bd70      	pop	{r4, r5, r6, pc}
 8009d5c:	220c      	movs	r2, #12
 8009d5e:	6002      	str	r2, [r0, #0]
 8009d60:	e7f9      	b.n	8009d56 <_calloc_r+0x12>
 8009d62:	462a      	mov	r2, r5
 8009d64:	4621      	mov	r1, r4
 8009d66:	f7fe f92d 	bl	8007fc4 <memset>
 8009d6a:	e7f5      	b.n	8009d58 <_calloc_r+0x14>

08009d6c <__ascii_mbtowc>:
 8009d6c:	b082      	sub	sp, #8
 8009d6e:	b901      	cbnz	r1, 8009d72 <__ascii_mbtowc+0x6>
 8009d70:	a901      	add	r1, sp, #4
 8009d72:	b142      	cbz	r2, 8009d86 <__ascii_mbtowc+0x1a>
 8009d74:	b14b      	cbz	r3, 8009d8a <__ascii_mbtowc+0x1e>
 8009d76:	7813      	ldrb	r3, [r2, #0]
 8009d78:	600b      	str	r3, [r1, #0]
 8009d7a:	7812      	ldrb	r2, [r2, #0]
 8009d7c:	1e10      	subs	r0, r2, #0
 8009d7e:	bf18      	it	ne
 8009d80:	2001      	movne	r0, #1
 8009d82:	b002      	add	sp, #8
 8009d84:	4770      	bx	lr
 8009d86:	4610      	mov	r0, r2
 8009d88:	e7fb      	b.n	8009d82 <__ascii_mbtowc+0x16>
 8009d8a:	f06f 0001 	mvn.w	r0, #1
 8009d8e:	e7f8      	b.n	8009d82 <__ascii_mbtowc+0x16>

08009d90 <_realloc_r>:
 8009d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d94:	4680      	mov	r8, r0
 8009d96:	4615      	mov	r5, r2
 8009d98:	460c      	mov	r4, r1
 8009d9a:	b921      	cbnz	r1, 8009da6 <_realloc_r+0x16>
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da2:	f7fd b9e9 	b.w	8007178 <_malloc_r>
 8009da6:	b92a      	cbnz	r2, 8009db4 <_realloc_r+0x24>
 8009da8:	f7fe fffa 	bl	8008da0 <_free_r>
 8009dac:	2400      	movs	r4, #0
 8009dae:	4620      	mov	r0, r4
 8009db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db4:	f000 f841 	bl	8009e3a <_malloc_usable_size_r>
 8009db8:	4285      	cmp	r5, r0
 8009dba:	4606      	mov	r6, r0
 8009dbc:	d802      	bhi.n	8009dc4 <_realloc_r+0x34>
 8009dbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009dc2:	d8f4      	bhi.n	8009dae <_realloc_r+0x1e>
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	f7fd f9d6 	bl	8007178 <_malloc_r>
 8009dcc:	4607      	mov	r7, r0
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d0ec      	beq.n	8009dac <_realloc_r+0x1c>
 8009dd2:	42b5      	cmp	r5, r6
 8009dd4:	462a      	mov	r2, r5
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	bf28      	it	cs
 8009dda:	4632      	movcs	r2, r6
 8009ddc:	f7ff ff86 	bl	8009cec <memcpy>
 8009de0:	4621      	mov	r1, r4
 8009de2:	4640      	mov	r0, r8
 8009de4:	f7fe ffdc 	bl	8008da0 <_free_r>
 8009de8:	463c      	mov	r4, r7
 8009dea:	e7e0      	b.n	8009dae <_realloc_r+0x1e>

08009dec <__ascii_wctomb>:
 8009dec:	4603      	mov	r3, r0
 8009dee:	4608      	mov	r0, r1
 8009df0:	b141      	cbz	r1, 8009e04 <__ascii_wctomb+0x18>
 8009df2:	2aff      	cmp	r2, #255	@ 0xff
 8009df4:	d904      	bls.n	8009e00 <__ascii_wctomb+0x14>
 8009df6:	228a      	movs	r2, #138	@ 0x8a
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	4770      	bx	lr
 8009e00:	2001      	movs	r0, #1
 8009e02:	700a      	strb	r2, [r1, #0]
 8009e04:	4770      	bx	lr
	...

08009e08 <fiprintf>:
 8009e08:	b40e      	push	{r1, r2, r3}
 8009e0a:	b503      	push	{r0, r1, lr}
 8009e0c:	4601      	mov	r1, r0
 8009e0e:	ab03      	add	r3, sp, #12
 8009e10:	4805      	ldr	r0, [pc, #20]	@ (8009e28 <fiprintf+0x20>)
 8009e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e16:	6800      	ldr	r0, [r0, #0]
 8009e18:	9301      	str	r3, [sp, #4]
 8009e1a:	f7ff fd09 	bl	8009830 <_vfiprintf_r>
 8009e1e:	b002      	add	sp, #8
 8009e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e24:	b003      	add	sp, #12
 8009e26:	4770      	bx	lr
 8009e28:	20000030 	.word	0x20000030

08009e2c <abort>:
 8009e2c:	2006      	movs	r0, #6
 8009e2e:	b508      	push	{r3, lr}
 8009e30:	f000 f834 	bl	8009e9c <raise>
 8009e34:	2001      	movs	r0, #1
 8009e36:	f7f8 f9d0 	bl	80021da <_exit>

08009e3a <_malloc_usable_size_r>:
 8009e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e3e:	1f18      	subs	r0, r3, #4
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	bfbc      	itt	lt
 8009e44:	580b      	ldrlt	r3, [r1, r0]
 8009e46:	18c0      	addlt	r0, r0, r3
 8009e48:	4770      	bx	lr

08009e4a <_raise_r>:
 8009e4a:	291f      	cmp	r1, #31
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4605      	mov	r5, r0
 8009e50:	460c      	mov	r4, r1
 8009e52:	d904      	bls.n	8009e5e <_raise_r+0x14>
 8009e54:	2316      	movs	r3, #22
 8009e56:	6003      	str	r3, [r0, #0]
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	bd38      	pop	{r3, r4, r5, pc}
 8009e5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e60:	b112      	cbz	r2, 8009e68 <_raise_r+0x1e>
 8009e62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e66:	b94b      	cbnz	r3, 8009e7c <_raise_r+0x32>
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f000 f831 	bl	8009ed0 <_getpid_r>
 8009e6e:	4622      	mov	r2, r4
 8009e70:	4601      	mov	r1, r0
 8009e72:	4628      	mov	r0, r5
 8009e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e78:	f000 b818 	b.w	8009eac <_kill_r>
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d00a      	beq.n	8009e96 <_raise_r+0x4c>
 8009e80:	1c59      	adds	r1, r3, #1
 8009e82:	d103      	bne.n	8009e8c <_raise_r+0x42>
 8009e84:	2316      	movs	r3, #22
 8009e86:	6003      	str	r3, [r0, #0]
 8009e88:	2001      	movs	r0, #1
 8009e8a:	e7e7      	b.n	8009e5c <_raise_r+0x12>
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e94:	4798      	blx	r3
 8009e96:	2000      	movs	r0, #0
 8009e98:	e7e0      	b.n	8009e5c <_raise_r+0x12>
	...

08009e9c <raise>:
 8009e9c:	4b02      	ldr	r3, [pc, #8]	@ (8009ea8 <raise+0xc>)
 8009e9e:	4601      	mov	r1, r0
 8009ea0:	6818      	ldr	r0, [r3, #0]
 8009ea2:	f7ff bfd2 	b.w	8009e4a <_raise_r>
 8009ea6:	bf00      	nop
 8009ea8:	20000030 	.word	0x20000030

08009eac <_kill_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4d06      	ldr	r5, [pc, #24]	@ (8009ecc <_kill_r+0x20>)
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4608      	mov	r0, r1
 8009eb6:	4611      	mov	r1, r2
 8009eb8:	602b      	str	r3, [r5, #0]
 8009eba:	f7f8 f97e 	bl	80021ba <_kill>
 8009ebe:	1c43      	adds	r3, r0, #1
 8009ec0:	d102      	bne.n	8009ec8 <_kill_r+0x1c>
 8009ec2:	682b      	ldr	r3, [r5, #0]
 8009ec4:	b103      	cbz	r3, 8009ec8 <_kill_r+0x1c>
 8009ec6:	6023      	str	r3, [r4, #0]
 8009ec8:	bd38      	pop	{r3, r4, r5, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000940 	.word	0x20000940

08009ed0 <_getpid_r>:
 8009ed0:	f7f8 b96c 	b.w	80021ac <_getpid>

08009ed4 <_init>:
 8009ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed6:	bf00      	nop
 8009ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eda:	bc08      	pop	{r3}
 8009edc:	469e      	mov	lr, r3
 8009ede:	4770      	bx	lr

08009ee0 <_fini>:
 8009ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee2:	bf00      	nop
 8009ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ee6:	bc08      	pop	{r3}
 8009ee8:	469e      	mov	lr, r3
 8009eea:	4770      	bx	lr
